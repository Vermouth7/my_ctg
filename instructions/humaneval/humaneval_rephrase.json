[
    {
        "task_id": "0",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a list of floats (numbers) and a floating-point number (threshold), and initialize a flag variable set to False.",
        "instruction 2": "Use a loop to iterate over the list of numbers, comparing each number with its adjacent numbers to see if any two numbers are closer than the given threshold, and if so, return True.",
        "new_prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in the provided list of floats, any two numbers are closer to each other than\n    the specified threshold. Initialize a flag variable to False. \n    Use a loop to compare each number with its neighbors to determine if any pair is within \n    the threshold distance.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\""
    },
    {
        "task_id": "1",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "instruction 1": "Set up a stack to keep track of the current group and any opening parentheses, iterate through the input string to identify groups, and check for balanced parentheses.",
        "instruction 2": "When a closing parenthesis is encountered, pop the stack and form the group string by joining the popped opening parenthesis with the string between the current group's opening and closing parentheses, and add the group string to the final list.",
        "new_prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    Set up a stack to keep track of the current group and any opening parentheses, iterate through the input \n    string to identify groups, and check for balanced parentheses. When a closing parenthesis is encountered, \n    pop the stack and form the group string by joining the popped opening parenthesis with the string \n    between the current group's opening and closing parentheses, and add the group string to the final list.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\""
    },
    {
        "task_id": "2",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a float number, and use the built-in math module's floor function to find the integer part of the number.",
        "instruction 2": "Subtract the integer part from the original number to get the decimal part, which is the desired output.",
        "new_prompt": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than the provided number) and decimals\n    (the leftover part, always less than 1).\n\n    To achieve this, identify the input parameter as a float number, and utilize the built-in \n    math module's floor function to determine the integer part of the number. Then, subtract \n    the integer part from the original number to obtain the decimal part, which is the desired output.\n    \n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n```"
    },
    {
        "task_id": "3",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "instruction 1": " Iterate over the input list of integers, initializing a variable to track the current balance, starting with 0. For each operation, add the amount to the balance if it's a deposit (positive), otherwise, subtract the amount from the balance.",
        "instruction 2": "Check if the balance ever falls below 0 during the iteration, and return True if it does, otherwise, return False after iterating over the entire list.",
        "new_prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You are provided with a list consisting of deposit and withdrawal activities on a bank account that begins with a zero balance. Your role is to iterate through this list while keeping track of the current balance, which starts at 0. For each operation, if the amount is a deposit (positive), add it to the balance; if it’s a withdrawal (negative), subtract it from the balance. During this process, check if the balance ever falls below zero, and if it does, the function should return True. If the balance remains zero or above after processing all operations, the function should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\""
    },
    {
        "task_id": "4",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of floating-point numbers and identify the centerpoint as the mean of the list.",
        "instruction 2": "Calculate the mean of the list, then calculate the absolute difference between each element and the mean, take the average of those absolute differences, and return the result as a float.",
        "new_prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of floating-point numbers, calculate the Mean Absolute Deviation \n    around the mean of this dataset, which serves as the centerpoint. \n    This is determined by calculating the mean of the list, finding the absolute difference \n    between each element and this mean, averaging those absolute differences, and returning \n    the result as a float:\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\""
    },
    {
        "task_id": "5",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a list of integers and an integer delimeter, and initialize an empty list to accumulate the result.",
        "instruction 2": "Use a loop to iterate over the input list, inserting the delimeter between each pair of consecutive elements, and return the resulting list.",
        "new_prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    Identify the input parameters as a list of integers and an integer delimeter, and initialize an empty list to accumulate the result.\n    Use a loop to iterate over the input list, inserting the delimeter between each pair of consecutive elements, and return the resulting list.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\""
    },
    {
        "task_id": "6",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "instruction 1": "Extract each group of parentheses from the input string by splitting the string into substrings at spaces, then process each substring as if it were a new string",
        "instruction 2": "Use a stack or recursion to keep track of the current nesting level of parentheses, incrementing it when a '(', decrementing it when a ')', and updating the maximum depth for each group in the output list",
        "new_prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    Extract each group of parentheses from the input string by splitting it into substrings at spaces, then process each substring as if it were a new string. For each group, use a stack or recursion to keep track of the current nesting level of parentheses, incrementing it when a '(', decrementing it when a ')', and updating the maximum depth for each group in the output list. \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\""
    },
    {
        "task_id": "7",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a list of strings and a substring, and check if each string in the list contains the given substring using the 'in' operator.",
        "instruction 2": "Use a list comprehension to create a new list containing only the strings that contain the substring, and return this new list.",
        "new_prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings to retain only those that include the specified substring.\n    This function takes two parameters: a list of strings and a substring to check for presence within those strings.\n    It uses the 'in' operator to determine if each string in the list contains the substring and employs a list comprehension \n    to construct a new list of matching strings, which is then returned.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\""
    },
    {
        "task_id": "8",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers, and initialize variables to store the sum and the product of the numbers in the list, starting with a sum of 0 and a product of 1.",
        "instruction 2": "Iterate over the list of numbers and update the sum and product for each number, then return the calculated sum and product as a tuple.",
        "new_prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    An empty list should yield a sum of 0 and a product of 1. Begin by defining a sum initialized to 0 and a product initialized to 1.\n    Iterate through the list of integers, updating the sum and product with each integer encountered, and then return the final sum and product as a tuple.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\""
    },
    {
        "task_id": "9",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "instruction 1": "Take the input parameter as a list of integers and iterate through it using an index variable.",
        "instruction 2": "Within the iteration, compare the current element with the maximum value found so far, and append the maximum value to the result list.",
        "new_prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, iterate through it using an index variable to generate a list \n    that contains the rolling maximum element found at each moment in the sequence. During the iteration, \n    compare the current element with the maximum value found up to that point, and append the maximum \n    value to the result list.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\""
    },
    {
        "task_id": "10",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and split it into a prefix and a postfix, and find the longest postfix that is a palindrome using the `is_palindrome` function.",
        "instruction 2": "Concatenate the prefix, the reverse of the prefix, and the palindromic postfix to form the shortest palindrome, and return it.",
        "new_prompt": "```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Create the shortest palindrome starting with the provided string.\n    The approach involves:\n    - Identifying the input as a string, splitting it into a prefix and a postfix,\n      and determining the longest palindromic postfix using the `is_palindrome` function.\n    - Combining the prefix, the reverse of the prefix, and the palindromic postfix\n      to construct the shortest palindrome, which is then returned.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n```"
    },
    {
        "task_id": "11",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "instruction 1": "Initiate an empty string result, then iterate through the characters of strings a and b simultaneously using zip(), performing the binary XOR operation using the ^ operator and appending the results to the result string.",
        "instruction 2": "Use Python's join() function with an empty string and the result string to return the final result as a string.",
        "new_prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Initiate an empty string result, then iterate through the characters of strings a and b simultaneously using zip(), performing the binary XOR operation using the ^ operator and appending the results to the result string. Finally, use Python's join() function with an empty string and the result string to return the final result as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\""
    },
    {
        "task_id": "12",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of strings and handle the edge case where the list is empty by returning None. Otherwise, initialize variables to keep track of the longest string and its length.",
        "instruction 2": "Iterate over the input list, and for each string, check if its length is greater than the current longest string's length. If so, update the longest string. If multiple strings have the same maximum length, return the first one encountered.",
        "new_prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Given a list of strings, return the longest string. If there are multiple strings with the same length, return the first one encountered. If the input list is empty, return None.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\""
    },
    {
        "task_id": "13",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two integers a and b, which represent the two numbers for which the greatest common divisor is to be calculated.",
        "instruction 2": "Implement the Euclidean algorithm to find the greatest common divisor, and return the result as an integer value.",
        "new_prompt": "```python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Identify the input parameters as two integers a and b, which represent the two numbers for which the greatest common divisor is to be calculated. Implement the Euclidean algorithm to find the greatest common divisor, and return the result as an integer value.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n```"
    },
    {
        "task_id": "14",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "instruction 1": "Identify the function parameter as a string and initialize an empty list to store the prefixes.",
        "instruction 2": "Use a loop to generate all prefixes of the input string, starting from an empty string and appending each character to it, and append these prefixes to the list.",
        "new_prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Identify the function parameter as a string and initialize an empty list to store the prefixes.\n    Use a loop to generate all prefixes of the input string, starting from an empty string and appending each character to it, and append these prefixes to the list.\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\""
    },
    {
        "task_id": "15",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "instruction 1": "Define a variable to store the result string and use a loop to iterate from 0 to n, appending each integer as a string to the result string with a space separator.",
        "instruction 2": "Use the `join()` method to concatenate the result string with space separator and return the final string.",
        "new_prompt": "```python\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    Define a variable to hold the result string and use a loop to iterate from 0 to n, appending each integer as a string to this variable with a space separator. Once the loop completes, utilize the `join()` method to concatenate the numbers with a space and return the final result.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n```"
    },
    {
        "task_id": "16",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and convert it to lowercase to ignore case differences, then initialize an empty set to store unique characters.",
        "instruction 2": "Use the set comprehension to create a set of unique characters in the string and return the length of the set.",
        "new_prompt": "```python\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, convert it to lowercase to disregard case differences, and determine the number of distinct characters it contains by initializing an empty set to hold unique characters.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    Use set comprehension to generate a set of these unique characters and return the size of the set.\n    \"\"\"\n```"
    },
    {
        "task_id": "17",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string music_string representing the musical notes and initialize an empty list to store the durations of the notes. Implement a loop to iterate over the string, and define a dictionary to map note characters to their corresponding durations.",
        "instruction 2": "Use a nested loop to parse the music string, and for each character, check if it exists in the dictionary; if it does, add the corresponding duration to the result list. Finally, return the list of durations.",
        "new_prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" The input parameter for this function is a string named music_string, which represents musical notes in a special ASCII format. \n    Your task is to parse this string, initializing an empty list to store the durations of the notes, and return a list of integers that indicates how many beats each note lasts.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    You should implement a loop to iterate over the string and define a dictionary that maps note characters to their corresponding durations. \n    Additionally, utilize a nested loop to check each character against the dictionary; if it exists, add the appropriate duration to the result list. \n    Finally, return the list of durations.\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\""
    },
    {
        "task_id": "18",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a string and a substring, and initialize a variable to count the occurrences of the substring in the string, ignoring any overlapping matches.",
        "instruction 2": "Use Python's `count()` method or a loop to iterate over the string and increment the count variable each time the substring is found, then return the count.",
        "new_prompt": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Identify the input parameters as a string and a substring, and initialize a variable to count \n    the occurrences of the substring in the string, including overlapping matches. Use Python's `count()` \n    method or a loop to iterate over the string and increment the count variable each time the substring \n    is found, then return the count.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n```"
    },
    {
        "task_id": "19",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "instruction 1": "Use the string's split() method with a space as a delimiter to convert the input string into a list of numbers, and then convert each string representation of a number into its integer equivalent using a list comprehension.",
        "instruction 2": "Use the sorted() function to sort the list of numbers, and then join the sorted list of numbers back into a string with a space as a delimiter.",
        "new_prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest. \n    To achieve this, first, use the string's split() method with a space as a delimiter to convert the input string into a list of numbers, and then utilize a list comprehension to convert each string representation of a number into its integer equivalent. Finally, apply the sorted() function to arrange the list of numbers and join the sorted list back into a string with a space as a delimiter.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\""
    },
    {
        "task_id": "20",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of float numbers and initialize two variables to store the smallest difference and the corresponding pair of numbers.",
        "instruction 2": "Iterate over the list of numbers, calculate the differences between each pair of numbers and update the smallest difference and the corresponding pair if a smaller difference is found; finally, return the pair of numbers in order (smaller number, larger number).",
        "new_prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Identify the input parameter as a list of float numbers, ensuring it contains at least two elements. \n    Initialize two variables to store the smallest difference and the corresponding pair of numbers. \n    Then, iterate over the list of numbers, calculating the differences between each pair and updating the smallest \n    difference along with the corresponding pair when a smaller difference is found. Finally, return the pair of \n    numbers in order (smaller number first, larger number second).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\""
    },
    {
        "task_id": "21",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of floats and initialize an empty list to store the rescaled numbers, then sort the input list to find the minimum and maximum values.",
        "instruction 2": "Use a list comprehension and the linspace function from the numpy library to apply the linear transform and convert the result to a list, scaling the values between the minimum and maximum.",
        "new_prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of floats (with at least two elements), initialize an empty list to store the rescaled numbers.\n    Identify the minimum and maximum values by sorting the input list. \n    Then, use a list comprehension along with the linspace function from the numpy library to apply a linear transform, \n    scaling the values between the smallest number (which will become 0) and the largest number (which will become 1).\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\""
    },
    {
        "task_id": "22",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "instruction 1": "Define the function to filter the input list of any type values (including None) and convert them to integers only, returning a new list containing the converted integers.",
        "instruction 2": "Use a list comprehension or a for loop to iterate over the input list, checking each value's type using the `isinstance()` function, converting the value to an integer using the `int()` function if it's an instance of int, float, or complex, and appending the converted value to the result list.",
        "new_prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Define the function to filter the input list of any type values (including None) and convert them to integers only, returning a new list containing the converted integers.\n    Use a list comprehension or a for loop to iterate over the input list, checking each value's type using the `isinstance()` function, converting the value to an integer using the `int()` function if it's an instance of int, float, or complex, and appending the converted value to the result list.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\""
    },
    {
        "task_id": "23",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "instruction 1": "Define a function strlen with two input parameters, the string and its return type as int, and inside the function return the length of the string using the built-in len() function.",
        "instruction 2": "Test the function with two given examples, one for an empty string and another for a string with three characters, to ensure the function correctly returns 0 and 3 respectively.",
        "new_prompt": "def strlen(string: str) -> int:\n    \"\"\" Define a function that takes two input parameters: a string, and its return type as int. \n    It returns the length of the provided string using the built-in len() function.\n    Additionally, test the function with two examples: one for an empty string, which should return 0, \n    and another for a string containing three characters, which should return 3.\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\""
    },
    {
        "task_id": "24",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer n, and initialize a variable to find the largest divisor using a loop to iterate through numbers from n to 1.",
        "instruction 2": "Check if the current number is a divisor of n by using the modulus operator. If it is, update the largest divisor and continue the loop until the number 1 is reached, then return the largest divisor.",
        "new_prompt": "def largest_divisor(n: int) -> int:\n    \"\"\" Identify the input parameter as an integer n, and initialize a variable to find the largest divisor by looping from n down to 1. Check if the current number is a divisor of n using the modulus operator; if so, update the largest divisor and continue until reaching 1, then return the largest divisor.\n    >>> largest_divisor(15)\n    5\n    \"\"\""
    },
    {
        "task_id": "25",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer n that needs to be factorized, and initialize an empty list to store the prime factors.",
        "instruction 2": "Use a loop to find the factors of the given number, starting from 2 and incrementing by 1, and for each factor, calculate the count of occurrences by dividing the number by the factor, and then add the factor as many times as its count to the list of factors.",
        "new_prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    Identify the input parameter as an integer n that needs to be factorized, and initialize an empty list to store the prime factors.\n    Use a loop to find the factors of the given number, starting from 2 and incrementing by 1, and for each factor, calculate the count of occurrences by dividing the number by the factor, and then add the factor as many times as its count to the list of factors.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\""
    },
    {
        "task_id": "26",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers, recognize that it should keep the original order of elements, and determine that it should remove all duplicate elements from the list.",
        "instruction 2": "Use a dictionary or a set to track seen elements, then iterate over the input list, adding each seen element to a new list and keeping the order of elements the same.",
        "new_prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Identify the input parameter as a list of integers and ensure that all duplicate elements are removed while preserving the original order of the elements. Use a dictionary or a set to track seen elements, and then iterate over the input list, adding each unique element to a new list to maintain the order.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\""
    },
    {
        "task_id": "27",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and iterate over each character in the string.",
        "instruction 2": "If the character is lowercase, convert it to uppercase using the `upper()` method, and if it is uppercase, convert it to lowercase using the `lower()` method, and join the modified characters to form the resulting string.",
        "new_prompt": "```python\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, identify the input parameter as a string and iterate over each character.\n    If the character is lowercase, convert it to uppercase using the `upper()` method; if it is uppercase, convert it to lowercase using the `lower()` method. Finally, join the modified characters to form the resulting string.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n```"
    },
    {
        "task_id": "28",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "instruction 1": "Use the input list of strings and the join() method to concatenate all strings into a single string.",
        "instruction 2": "Return the concatenated string as the result of the function.",
        "new_prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Use the input list of strings and the join() method to concatenate all strings into a single string and return it as the result of the function.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\""
    },
    {
        "task_id": "29",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "instruction 1": "Use Python's list comprehension or a loop to iterate over the input list of strings and check if each string starts with the given prefix. Store the matching strings in a new list.",
        "instruction 2": "Return the list of strings that start with the given prefix, which is the result of the previous step.",
        "new_prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings to include only those that begin with the specified prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n    Use Python's list comprehension or a loop to iterate over the input list of strings and check if each string starts with the given prefix. Store the matching strings in a new list. Finally, return the list of strings that start with the given prefix, which is the result of the previous step.\n    \"\"\""
    },
    {
        "task_id": "30",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "instruction 1": "Write a Python function get_positive that takes a list of numbers as input and returns a new list containing only the positive numbers from the input list.",
        "instruction 2": "Use a list comprehension with an if condition to filter out the positive numbers from the input list.",
        "new_prompt": "def get_positive(l: list):\n    \"\"\"Write a Python function get_positive that takes a list of numbers as input and returns a new list containing only the positive numbers from the input list using a list comprehension with an if condition to filter out the positive numbers.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\""
    },
    {
        "task_id": "31",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "instruction 1": "Define a function is_prime(n) that takes an integer n as input and returns True if it is prime and False otherwise, and base the function's implementation on the given test cases.",
        "instruction 2": "Use a loop or conditional statements to check if the given number is prime by iterating up to the square root of the given number, checking for factors other than 1 and the number itself, and return False if any factor is found, or else return True.",
        "new_prompt": "```python\ndef is_prime(n):\n    \"\"\"Define a function is_prime(n) that takes an integer n as input and returns True if it is prime and False otherwise, based on the following test cases:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    Additionally, use a loop or conditional statements to check if the given number is prime by iterating up to the square root of the number, verifying for factors other than 1 and the number itself, and return False if any factor is found, otherwise return True.\n    \"\"\"\n```"
    },
    {
        "task_id": "32",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "instruction 1": "The input parameter is a list of coefficients of a polynomial, and identify the largest non-zero coefficient as it guarantees a solution by finding the zero point of the polynomial.",
        "instruction 2": "Use a numerical method (perhaps a simple root-finding algorithm like bisection or Newton's method) to find the zero point of the polynomial represented by the coefficients in the list, and return the result with reasonable precision (e.g., round the result to a few decimal places).",
        "new_prompt": "```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" \n    xs are coefficients of a polynomial. \n    find_zero finds x such that poly(x) = 0, using a numerical method to ensure it identifies the zero point of the polynomial effectively. \n    It will recognize the largest non-zero coefficient among xs to guarantee a solution, and the function returns only one zero point, even if multiple exist.\n    The result will be returned with reasonable precision to a few decimal places.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n```"
    },
    {
        "task_id": "33",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list l, and iterate through its elements to identify the indices that are divisible by three.",
        "instruction 2": "For the indices divisible by three, use Python's built-in list slicing and sort function to sort the corresponding values, while leaving the non-divisible elements unchanged.",
        "new_prompt": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted. To achieve this, the function first identifies the input parameter as a list l and iterates through its elements to flag the indices divisible by three. Then, for these identified indices, it utilizes Python's built-in list slicing and sort function to sort the corresponding values, all while ensuring that the elements at non-divisible indices remain unchanged.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\""
    },
    {
        "task_id": "34",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "instruction 1": "Use the set() function to convert the input list to a set, removing duplicates, then convert it back to a list and sort it.",
        "instruction 2": "Use the sorted() function to sort the set converted list and return it.",
        "new_prompt": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list by first converting the input list to a set to eliminate duplicates, and then sorting the resulting unique elements.\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\""
    },
    {
        "task_id": "35",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "instruction 1": "Associate the function with the built-in max function or establish a loop to iterate over the list and identify the maximum value.",
        "instruction 2": "Return the maximum value using the identified method and provide a comment or docstring describing the function's behavior and expected inputs/output.",
        "new_prompt": "def max_element(l: list):\n    \"\"\"Return the maximum element in the list by utilizing either the built-in max function or a loop to iterate through the list for identifying the maximum value.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\""
    },
    {
        "task_id": "36",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer n and initialize a counter variable to zero.",
        "instruction 2": "Use a loop to iterate from 11 to n, incrementing by 1, checking if each number is divisible by 11 or 13, and if so, counting the number of seven's in the number using the str() function, then return the total count.",
        "new_prompt": "def fizz_buzz(n: int):\n    \"\"\"Identify the input parameter as an integer n and initialize a counter variable to zero. \n    Use a loop to iterate from 11 to n, incrementing by 1, checking if each number is divisible by 11 or 13, \n    and if so, counting the number of times the digit 7 appears in the number using the str() function, \n    then return the total count.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\""
    },
    {
        "task_id": "37",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list and partition it into two lists, one for odd indices and one for even indices.",
        "instruction 2": "Return a new list where the values at non-even indices remain the same, and the values at even indices are replaced with the sorted values from the original even-index list.",
        "new_prompt": "```python\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and partitions it into two separate lists: one consisting of the values at odd indices and one containing the values at even indices. It then returns a new list l' where the values at odd indices remain unchanged, while the values at even indices are replaced with the sorted values from the original even-index list.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n```"
    },
    {
        "task_id": "38",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "instruction 1": "Modify the decode_cyclic function by reversing the process of the encode_cyclic function. This involves joining the groups into a single string and then reverses each group to its original position.",
        "instruction 2": "Use slicing for each group to reverse it and then join all the groups back together to form the original string.",
        "new_prompt": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string by reversing the encoding process, which involves joining the groups into a single string and reversing each group to restore them to their original position using slicing.\n    \"\"\""
    },
    {
        "task_id": "39",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer n that represents the index of the desired Fibonacci number, and initialize an empty set or data structure to store prime numbers.",
        "instruction 2": "Use a primality test function to generate and check if each Fibonacci number up to n-th number is prime, and return the first prime Fibonacci number.",
        "new_prompt": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns the n-th number that is both a Fibonacci number and a prime number. \n    The input parameter n is an integer that specifies the index of the desired Fibonacci number. \n    An empty set or data structure should be initialized to store the prime numbers. \n    A primality test function will be used to generate and verify if each Fibonacci number up to the n-th number is prime, and the function will return the first prime Fibonacci number.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\""
    },
    {
        "task_id": "40",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers and check all possible pairs of elements in the list to see if there is a third element that makes their sum zero.",
        "instruction 2": "Use two nested loops to iterate over the list, check if the sum of any two elements is present in the list as the third element, and return True if a such triplet is found, False otherwise.",
        "new_prompt": "```python\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as input and identifies if any three distinct elements\n    in the list sum to zero. It implements a solution that checks all possible pairs of elements in the \n    list to find a third element that complements their sum to zero. The function employs two nested loops \n    to iterate through the list, verifying if the sum of any two selected elements exists in the list as \n    a third element. It returns True if such a triplet is detected, and False if no such triplet exists.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "41",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of cars driving left and right, and initialize a counter to track the collision count.",
        "instruction 2": "Use a loop to generate and iterate over the left-to-right car trajectories and right-to-left car trajectories, and increment the collision count when a car collision occurs, without incrementing the cars' positions.",
        "new_prompt": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move at the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions. The input parameter n is an integer\n    that represents the number of cars moving in each direction. Initialize a counter to \n    track the collision count, and use a loop to generate and iterate over the trajectories \n    of the left-to-right and right-to-left cars, incrementing the collision count when \n    a collision occurs, while keeping the cars' positions unchanged.\n    \"\"\""
    },
    {
        "task_id": "42",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "instruction 1": "Write a function incr_list that takes a list of numbers l and returns a new list where all elements are incremented by 1.",
        "instruction 2": "Use a list comprehension to create a new list with elements from the input list incremented by 1, and then return the resulting list.",
        "new_prompt": "```python\ndef incr_list(l: list):\n    \"\"\"Write a function that takes a list of numbers and returns a new list where all elements are incremented by 1 using a list comprehension.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n```"
    },
    {
        "task_id": "43",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers, and initialize an empty set to store unique pairs of elements that sum to zero.",
        "instruction 2": "Iterate over the list of integers, and for each element, check if its negation exists in the set; if it does, return True; otherwise, add the element to the set if it's not equal to zero.",
        "new_prompt": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise. The function identifies the input parameter as a list of integers and initializes an empty set to store unique pairs of elements that sum to zero. It iterates over the list of integers, and for each element, checks if its negation exists in the set; if so, it returns True; otherwise, it adds the element to the set if it's not equal to zero.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\""
    },
    {
        "task_id": "44",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "instruction 1": "Convert the decimal integer x to the specified base using the built-in `int` function with base conversion, then convert the result to a string using the `str` function.",
        "instruction 2": "In the generated string, use list comprehension to convert each digit to its corresponding character, using the corresponding base numbers as a mapping dictionary, then join the characters to form the final string representation of the target base.",
        "new_prompt": "```python\ndef change_base(x: int, base: int):\n    \"\"\"Convert the decimal integer x into the specified base using the built-in `int` function for base conversion,\n    and subsequently convert the result to a string with the `str` function. \n    Use list comprehension to map each digit to its respective character based on the corresponding base numbers, \n    then join these characters to create the final string representation of the target base.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n```"
    },
    {
        "task_id": "45",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as the length of the side (a) and height (h) of a triangle, and express the formula for the area as 0.5 times the product of a and h.",
        "instruction 2": "Implement the formula using the `return` statement with the calculated area in the function definition, and ensure the function accurately calculates the area of a triangle with the given length and height using the provided unit test example.",
        "new_prompt": "def triangle_area(a, h):\n    \"\"\"Identify the input parameters as the length of a side (a) and height (h) of a triangle, and express the formula for the area as 0.5 times the product of a and h. Implement the formula using the return statement with the calculated area in the function definition, ensuring the function accurately calculates the area of a triangle with the given length and height, as demonstrated in the provided unit test example.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\""
    },
    {
        "task_id": "46",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "instruction 1": "Use a loop to calculate the Fibbonacci-like sequence fib4(n) starting from index 1, with base cases fib4(0) = 0, fib4(1) = 0, fib4(2) = 2, fib4(3) = 0, and recursively calculate fib4(n) as fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).",
        "instruction 2": "Use a list to store the calculated fib4 sequence, starting from [0, 0, 2, 0]. Then, return the n-th element of this list.",
        "new_prompt": "```python\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence using a loop, starting from the base cases fib4(0) = 0, fib4(1) = 0, fib4(2) = 2, fib4(3) = 0. Additionally, utilize a list to store the computed values, beginning with [0, 0, 2, 0], and return the n-th element of this list. Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n```"
    },
    {
        "task_id": "47",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "instruction 1": "Sort the input list in non-decreasing order and calculate the median by finding the middle element(s) if the list is of odd length or the average of the two middle elements if the list is of even length.",
        "instruction 2": "Use the `sorted()` function to sort the list and the indexing method or the average function to calculate the median.",
        "new_prompt": "```python\ndef median(l: list):\n    \"\"\"Return median of elements in the list l. \n    First, sort the input list in non-decreasing order. \n    Then calculate the median by finding the middle element(s) \n    if the list has an odd number of elements or by averaging \n    the two middle elements if it has an even number of elements. \n    Use the `sorted()` function to perform the sorting and employ \n    the indexing method or the average function to determine the median.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n```"
    },
    {
        "task_id": "48",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and check if it is equal to its reverse.",
        "instruction 2": "Compare the input string with its reverse using the `==` operator and return True if they are equal, False otherwise.",
        "new_prompt": "```python\ndef is_palindrome(text: str):\n    \"\"\"\n    Identifies the input parameter as a string and checks if it is equal to its reverse using the `==` operator; \n    returns True if they are equal, otherwise returns False.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "49",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "instruction 1": "Define a function called modp that takes two integer parameters, n and p, which represent the base number and the modulus respectively.",
        "instruction 2": "Use the built-in Python modulus operator (%) to calculate 2^n modulo p and return the result.",
        "new_prompt": "```python\ndef modp(n: int, p: int):\n    \"\"\"Define a function that returns 2 raised to the power of n, calculated modulo p using the built-in Python modulus operator. \n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n```"
    },
    {
        "task_id": "50",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "instruction 1": "Write the decode_shift function to reverse the process of encoding, shifting the encoded characters back by 5 positions in the alphabet using the modulo operation and the ord() function.",
        "instruction 2": "Use the same list comprehension and string joining as in the encode_shift function to generate the decoded string",
        "new_prompt": "```python\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input a string encoded with the encode_shift function and returns the decoded string by reversing the encoding process, shifting each character back by 5 positions in the alphabet using the modulo operation and the ord() function, and employing the same list comprehension and string joining as in the encode_shift function.\n    \"\"\"\n```"
    },
    {
        "task_id": "51",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and check if it is empty or not. Initialize an empty string to store the result.",
        "instruction 2": "Use a loop to iterate over each character in the input string. Check if the character is a vowel (or an uppercase vowel) using a list of vowels. If it's not a vowel, add the character to the result string. Finally, return the result string.",
        "new_prompt": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string as input, checks if it is empty, and returns a string without vowels. It initializes an empty string to build the result. \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    In the function, a loop iterates over each character of the input string, checking if the character is a vowel or an uppercase vowel using a predefined list. Non-vowel characters are appended to the result string, which is returned at the end.\n    \"\"\""
    },
    {
        "task_id": "52",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer threshold, and check if each number in the list is less than the threshold.",
        "instruction 2": "Use a loop to iterate over the list, and apply Boolean AND operation to all conditions, returning True if all numbers are below the threshold, and False otherwise.",
        "new_prompt": "```python\ndef below_threshold(l: list, t: int):\n    \"\"\"Identify the input parameters as a list of numbers and an integer threshold, and check if each number in the list is less than the threshold.\n    Use a loop to iterate over the list, applying a Boolean AND operation to all conditions, returning True if all numbers are below the threshold, and False otherwise.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "53",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two integer numbers x and y, and write a function to return their sum.",
        "instruction 2": "Use Python's addition operator to calculate the sum of x and y, which should be the function's return value.",
        "new_prompt": "def add(x: int, y: int):\n    \"\"\"Identify the input parameters as two integer numbers x and y, \n    and write a function to return their sum using Python's addition operator. \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\""
    },
    {
        "task_id": "54",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "instruction 1": "The function takes two string parameters s0 and s1, which are the two words to be compared, and ignore the order of characters in these string.",
        "instruction 2": "Use a Python set to keep track of unique characters in each string, and compare the sets; return True if the sets are equal, meaning the words have the same characters, and False otherwise.",
        "new_prompt": "```python\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters, disregarding the order of those characters. \n    The function takes two string parameters s0 and s1, which are the two words to be compared.\n    Utilize a Python set to track unique characters from each string and compare the sets; return True if they are equal, indicating that the words have the same characters, and return False otherwise.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "55",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "instruction 1": "Use a loop to recursively calculate the Fibonacci sequence up to the n-th number, starting with base cases of 1 for both the first two numbers in the sequence.",
        "instruction 2": "Return the result of the recursive calculation using the last computed Fibonacci number, incorporating memoization to avoid redundant calculations.",
        "new_prompt": "```python\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number using a loop to recursively calculate the sequence up to n, starting with base cases of 1 for the first two numbers. The result is returned using the last computed Fibonacci number, with memoization implemented to avoid redundant calculations.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n```"
    },
    {
        "task_id": "56",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string of '>' and '<' characters and initialize a counter for opening brackets.",
        "instruction 2": "Iterate through the string, incrementing the counter for each opening bracket '<', decrementing the counter for each closing bracket '>' and return True if the counter is zero at the end, indicating all brackets were matched correctly.",
        "new_prompt": "```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string consisting of '>' and '<' characters. \n    Initialize a counter for opening brackets and iterate through the string, \n    incrementing the counter for each '<' and decrementing it for each '>'. \n    Return True if the counter equals zero at the end, indicating that every \n    opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "57",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "instruction 1": "Compare each element in the list with the next one, checking if it's either always increasing or always decreasing.",
        "instruction 2": "Return True if the list passes this increasing or decreasing condition, and False otherwise.",
        "new_prompt": "def monotonic(l: list):\n    \"\"\"Return True if the list elements are either monotonically increasing or monotonically decreasing.\n    Compare each element in the list with the next one, verifying if it's consistently rising or falling.\n    Return True if the list fulfills this increasing or decreasing criterion, and False otherwise.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\""
    },
    {
        "task_id": "58",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two lists l1 and l2 and iterate through both lists simultaneously using zip() to find common elements, then convert the common elements to a set to handle duplicates and sort the result",
        "instruction 2": "Use Python's built-in set intersection operation & between the sets of common elements in both lists, sort the intersection using the sorted() function, and return the sorted unique common elements",
        "new_prompt": "```python\ndef common(l1: list, l2: list):\n    \"\"\"Identify the input parameters as two lists l1 and l2, then simultaneously iterate through both lists using zip() to find common elements. Convert these common elements to a set to eliminate duplicates and sort the result. Use Python's built-in set intersection operation & between the sets of common elements in both lists, sort the intersection using the sorted() function, and return the sorted unique common elements.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n```"
    },
    {
        "task_id": "59",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "instruction 1": "Find the factors of the input number n by iterating from 2 to the square root of n and checking for divisibility. Identify the largest factor as the maximum prime factor.",
        "instruction 2": "Determine if the largest factor is prime by checking if it has any factors other than 1 and itself, if not then it is the largest prime factor, otherwise, find the next largest factor and repeat the process.",
        "new_prompt": "```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    Find the factors of the input number n by iterating from 2 to the square root of n and checking for divisibility. Identify the largest factor as the maximum prime factor. \n    Determine if the largest factor is prime by checking if it has any factors other than 1 and itself; if it does not, then it is the largest prime factor. If it does, find the next largest factor and repeat the process.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n```"
    },
    {
        "task_id": "60",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "instruction 1": "The function sum_to_n takes an integer n as an input and calculates the sum of numbers from 1 to n.",
        "instruction 2": "Implement the sum calculation using a mathematical formula, likely the formula for the sum of an arithmetic series, and return the calculated sum.",
        "new_prompt": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that takes an integer n as input and calculates the sum of numbers from 1 to n using a mathematical formula for the sum of an arithmetic series.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\""
    },
    {
        "task_id": "61",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "instruction 1": "Initialize an empty stack and iterate through the input string, pushing opening brackets onto the stack and popping the stack when a closing bracket is encountered; if the stack is empty when a closing bracket is encountered, or if the stack is not empty after iterating through the entire string, return False.",
        "instruction 2": "otherwise, return True",
        "new_prompt": "```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    To achieve this, initialize an empty stack and iterate through the input string, pushing opening brackets onto the stack and popping the stack when a closing bracket is encountered. If the stack is empty when a closing bracket is encountered, or if the stack is not empty after iterating through the entire string, return False; otherwise, return True.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "62",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list xs representing the coefficients of a polynomial, where each coefficient is a number.",
        "instruction 2": "Return a list where each element is the derivative of the corresponding coefficient, calculated as the previous coefficient multiplied by the current power of x, and return this list as the derivative of the given polynomial in the same form.",
        "new_prompt": "def derivative(xs: list):\n    \"\"\" The input parameter xs is a list representing the coefficients of a polynomial, with each coefficient being a number.\n    The polynomial can be expressed as xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    The function returns a list in which each element is the derivative of the corresponding coefficient, calculated as the previous coefficient multiplied by the current power of x, representing the derivative of the given polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\""
    },
    {
        "task_id": "63",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "instruction 1": "Define the function to calculate the n-th element of the fibfib number sequence by recursively adding the previous three elements, using the given base cases as a starting point.",
        "instruction 2": "Use a recursive approach to implement the fibfib function, utilizing the recursive formula fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3), and handle the base cases for n <= 1 separately.",
        "new_prompt": "```python\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Define the function to calculate the n-th element of the fibfib number sequence by recursively adding the previous three elements, using the given base cases as a starting point. \n    Use a recursive approach to implement the fibfib function, utilizing the recursive formula fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3), and handle the base cases for n <= 1 separately.\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n```"
    },
    {
        "task_id": "64",
        "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string representing a word and define a set of chromosomes (a, e, i, o, u, y) to count the occurrences of vowels within the input string.",
        "instruction 2": "Use a loop to iterate through each character in the string, and if the character is a vowel, increment a counter; finally, return the counter as the number of vowels in the string.",
        "new_prompt": "FIX = \"\"\"\nAdd more test cases and clarify that the input parameter is a string representing a word. Additionally, define a set of vowels that includes 'a', 'e', 'i', 'o', 'u', and 'y' (only when it appears at the end of the word). The function should use a loop to go through each character in the string, incrementing a counter for each vowel found; ultimately, it should return this counter as the total number of vowels present in the string.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\""
    },
    {
        "task_id": "65",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "instruction 1": "Extract the input parameters as an integer x representing the number to be shifted and an integer shift representing the number of positions to shift.",
        "instruction 2": "Use the modulo operation to handle the case where shift is greater than the number of digits by reversing the digits, otherwise, use integer division to shift the digits and convert the result to a string.",
        "new_prompt": "```python\ndef circular_shift(x, shift):\n    \"\"\"Extract the input parameters as an integer x representing the number to be shifted \n    and an integer shift representing the number of positions to shift. Circular shift the \n    digits of the integer x, shifting the digits right by shift and returning the result \n    as a string. Use the modulo operation to handle cases where shift exceeds the number \n    of digits by reversing the digits, otherwise, use integer division to shift the digits \n    and convert the result to a string.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n```"
    },
    {
        "task_id": "66",
        "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "instruction 1": "Write a loop to iterate over the input string, and for each character, check if it is an uppercase letter, then add its ASCII code to the total sum.",
        "instruction 2": "Use Python's built-in sum() function to calculate the total sum of the ASCII codes of the uppercase characters, and return the result.",
        "new_prompt": "def digitSum(s):\n    \"\"\"Task\n    Develop a function that receives a string as input and computes the sum of the ASCII codes exclusively for the uppercase characters.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n\n    Instructions:\n    1. Construct a loop to traverse the input string, verifying if each character is an uppercase letter, and if so, add its ASCII code to the cumulative total.\n    2. Utilize Python's built-in sum() function to derive the total of the ASCII codes associated with the uppercase characters and return this final value.\n    \"\"\""
    },
    {
        "task_id": "67",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "instruction 1": "Split the input string by ' and ' to extract the number of apples and oranges, then parse these values from strings to integers, using a try-except block if necessary.",
        "instruction 2": "Calculate the total number of fruits by subtracting the number of apples and oranges from the input integer n",
        "new_prompt": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket. You should first split the input string by ' and ' to extract the number of apples and oranges, and ensure to parse these values from strings to integers, utilizing a try-except block if necessary. Then, calculate the total number of fruits by subtracting the number of apples and oranges from the input integer n.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\""
    },
    {
        "task_id": "68",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list representing the branch of a tree and initialize variables to store the smallest even value and its index.",
        "instruction 2": "Iterate through the list, check if each node is even, and if it's smaller than the current smallest even value, update the smallest even value and its index, then return the smallest even value and its index in a list, or return an empty list if no even values are found.",
        "new_prompt": "```python\ndef pluck(arr):\n    \"\"\"\n    Given a list representing a branch of a tree that has non-negative integer nodes,\n    your task is to identify and pluck one of the nodes, returning it in a specific format.\n    The plucked node should be the one with the smallest even value.\n    If there are multiple nodes with the same smallest even value, return the one with the smallest index.\n\n    To achieve this, initialize variables to store the smallest even value and its index. \n    Iterate through the list, checking if each node is even, and if it's smaller than the current smallest even value,\n    update the smallest even value and its index. Finally, return these values in a list, [smallest_value, its index],\n    or return an empty list if no even values exist or if the given array is empty.\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n```"
    },
    {
        "task_id": "69",
        "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "instruction 1": "Create a dictionary to store the frequency of each integer in the list and iterate through the list to count the frequency of each integer.",
        "instruction 2": "Iterate through the dictionary in descending order (by values) and return the key (integer) that has a frequency greater than or equal to the value of the integer itself, or return -1 if no such value exists.",
        "new_prompt": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. To accomplish this, create a dictionary to count the frequency of each integer as you iterate through the list. After that, examine the dictionary in descending order of frequency to find and return the key (integer) that meets the criteria, or return -1 if no such value exists.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''"
    },
    {
        "task_id": "70",
        "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "instruction 1": "Extract the input list and maintain a reference to it, then initialize two pointers, one for the minimum value and one for the maximum value.",
        "instruction 2": "Sort the list by shifting the minimum and maximum values to the start and end of the list respectively, and repeat the process until the list is sorted according to the strange sorting rule.",
        "new_prompt": "def strange_sort_list(lst):\n    '''\n    Given a list of integers, return a list in a peculiar order. \n    This peculiar sorting involves beginning with the smallest value, \n    followed by the largest of the remaining integers, and then alternating \n    between the minimum and maximum values in sequence.\n\n    Steps to implement:\n    1. Extract the input list and maintain a reference to it while initializing two pointers, one for the minimum value and another for the maximum value.\n    2. Sort the list by moving the minimum and maximum values to the beginning and end of the list respectively, repeating this process until the list conforms to the peculiar sorting requirements.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''"
    },
    {
        "task_id": "71",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "instruction 1": "Write a function that takes as input three parameters for the lengths of the triangle sides, and checks if the sum of any two sides is greater than the third side.",
        "instruction 2": "Use Heron's formula to calculate the area if the sides form a valid triangle, and round the result to 2 decimal points; otherwise, return -1.",
        "new_prompt": "def triangle_area(a, b, c):\n    '''\n    Write a function that accepts three parameters representing the lengths of the triangle sides. Verify whether the sum of any two sides exceeds the length of the third side to confirm if they can form a valid triangle. If they do form a valid triangle, use Heron's formula to compute the area, and round the result to 2 decimal points. If not, return -1.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''"
    },
    {
        "task_id": "72",
        "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "instruction 1": "Check if the input list q is a palindrome and calculate the sum of its elements, then compare it with the input parameter w to determine if the object will fly.",
        "instruction 2": "Return True if the list is a palindrome and its sum is less than or equal to w, and False otherwise.",
        "new_prompt": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \n    # First, determine if the input list q is a palindrome and compute the sum of its elements. Then, compare this sum with the input parameter w to assess if the object can fly. Return True if the list is a palindrome and its sum does not exceed w; otherwise, return False.\n    '''"
    },
    {
        "task_id": "73",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers `arr` and initialize a variable to store the minimum number of changes required to make the array palindromic.",
        "instruction 2": "Iterate through the array, tracking the number of changes required to make the array palindromic. If the array is already palindromic, return the current count. If not, update the count and continue iterating until the array is palindromic, then return the final count.",
        "new_prompt": "def smallest_change(arr):\n    \"\"\"\n    Given a list of integers `arr`, determine the minimum number of changes needed\n    to transform the array into a palindromic structure, where an array is considered\n    palindromic if it reads the same backwards and forwards. Each change allows you to\n    replace one element with any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \n    Start by initializing a variable to keep track of the minimum number of changes required.\n    Then, iterate through the array, monitoring the number of modifications needed to achieve\n    a palindromic configuration. If you find that the array is already palindromic, return the\n    current count immediately. If it isn't, continue updating the count until the array\n    becomes palindromic, at which point you will return the final count.\n    \"\"\""
    },
    {
        "task_id": "74",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
        "instruction 1": "Sort the input lists, count the total characters in each list, and store it in variables, considering list1 as the primary variable for comparison.",
        "instruction 2": "Compare the total characters in list1 and list2, and return the list with the less total characters, if the total characters are equal, return list1, and if list1 has less characters, return it.",
        "new_prompt": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings, sorts them, counts the total number of characters in each list, and returns the list that has a total number of characters less than the other list. Use lst1 as the primary variable for comparison.\n\n    If the two lists have the same number of characters, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''"
    },
    {
        "task_id": "75",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "instruction 1": "Write a function that iterates through all prime numbers up to the square root of the input number to check if the number is a multiplication of 3 distinct prime numbers.",
        "instruction 2": "Use a list comprehension to generate a list of prime factors of the input number, check if the length of the list is 3, and return True if true, otherwise return False.",
        "new_prompt": "def is_multiply_prime(a):\n    \"\"\"Write a function that checks if the given number is the product of three distinct prime numbers,\n    returning true if it is and false otherwise. The function should iterate through all prime numbers \n    up to the square root of the input number and use a list comprehension to generate a list of prime \n    factors. The input number (a) must be less than 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\""
    },
    {
        "task_id": "76",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two integers, x and n, and check if n is a factor of x.",
        "instruction 2": "Use the equality check (x == n ** int(x** (1/ n))) to determine if x is a simple power of n, and return accordingly.",
        "new_prompt": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases. \n    x is a simple power of n if n**int=x. \n    First, identify the input parameters as two integers, x and n, and check if n is a factor of x.\n    Then, use the equality check (x == n ** int(x** (1/ n))) to determine if x is a simple power of n and return accordingly.\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\""
    },
    {
        "task_id": "77",
        "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "instruction 1": "Consider the absolute value of the input integer a and calculate its cube root using the ** operator to see if it is a perfect cube.",
        "instruction 2": "Use the Python built-in math.isclose function to compare the result with the integer value of the cube root, and return True if they are close, otherwise return False.",
        "new_prompt": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid. Consider the absolute value of the input integer a and calculate its cube root using the ** operator to see if it is a perfect cube. Use the Python built-in math.isclose function to compare the result with the integer value of the cube root, and return True if they are close, otherwise return False.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''"
    },
    {
        "task_id": "78",
        "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
        "instruction 1": "Identify the input as a string containing hexadecimal digits and a dictionary mapping hexadecimal digits to their decimal equivalents, where A, B, C, D, E, F correspond to decimal 10, 11, 12, 13, 14, 15 respectively.",
        "instruction 2": "Convert each hexadecimal digit in the input string to its decimal equivalent using the dictionary, check if the decimal value is a prime number, and count the number of prime decimal values.",
        "new_prompt": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a string containing hexadecimal digits and counts the number of hexadecimal \n    digits that are primes (a prime number is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    To achieve this, identify the input as a string of hexadecimal digits and utilize a dictionary that maps these digits to their decimal equivalents, where A, B, C, D, E, F correspond to decimal 10, 11, 12, 13, 14, 15, respectively. \n    You must convert each hexadecimal digit in the input string to its decimal equivalent using the dictionary, check if the decimal value is prime, and tally the total number of prime decimal values.\n    You need to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or an empty string, \n    and symbols A, B, C, D, E, F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\""
    },
    {
        "task_id": "79",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer representing the decimal number to be converted to binary.",
        "instruction 2": "Use the built-in `bin()` function to convert the decimal number to a binary string and append 'db' to the beginning and end of the result.",
        "new_prompt": "```python\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given an integer representing a number in decimal form, and your task is to \n    convert it to binary format. The function should return a string where each character represents \n    a binary number, specifically '0' or '1'. Additionally, you will prepend and append 'db' to the \n    resulting string to assist with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n```"
    },
    {
        "task_id": "80",
        "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string s and check if its length is at least 3.",
        "instruction 2": "Use a loop to iterate over the string in chunks of 3 characters, checking if they are distinct from each other, and return False if any are not distinct, otherwise return True.",
        "new_prompt": "def is_happy(s):\n    \"\"\"Identify the input parameter as a string s and verify that its length is at least 3.\n    Your task is to determine if the string is happy or not. A happy string is defined as one that has a minimum length of 3, with every group of 3 consecutive letters being distinct from one another. \n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    Use a loop to examine the string in segments of 3 characters, ensuring they are all distinct; if any group is not distinct, return False. If all groups are distinct, return True.\n    \"\"\""
    },
    {
        "task_id": "81",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of GPAs and create a list to store the corresponding letter grades, then initialize an empty list to hold the final result.",
        "instruction 2": "Write a loop to iterate through the GPAs, use if-else statements to determine the corresponding letter grade based on the GPA and the grade table, and append the letter grades to the result list.",
        "new_prompt": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n    Identify the input parameter as a list of GPAs and create a list to store the corresponding letter grades. Initialize an empty list to hold the final results. Write a loop to iterate through the GPAs, using if-else statements to determine the corresponding letter grade based on the GPA and the grade table, appending the letter grades to the result list.\n    \"\"\""
    },
    {
        "task_id": "82",
        "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and use the built-in `len()` function to determine its length.",
        "instruction 2": "Use a conditional statement to check if the length of the string is a prime number, and return `True` if it is and `False` otherwise.",
        "new_prompt": "def prime_length(string):\n    \"\"\"Write a function that takes a string as input, identifies it, and utilizes the built-in `len()` function to determine its length. The function should then use a conditional statement to check if the length is a prime number and return True if it is, or False otherwise.\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\""
    },
    {
        "task_id": "83",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a positive integer n and initialize a count variable to store the count of n-digit numbers starting or ending with 1.",
        "instruction 2": "Use a loop to generate n-digit numbers from 10^(n-1) to 10^n, and for each number, check if it starts or ends with 1; if it does, increment the count variable, then return the count as the result.",
        "new_prompt": "def starts_one_ends(n):\n    \"\"\"\n    Identify the input parameter as a positive integer n and initialize a count variable to store the total of n-digit \n    positive integers that start or end with 1. Use a loop to generate n-digit numbers from 10^(n-1) to 10^n, \n    and for each number, check if it starts or ends with 1; if true, increment the count variable, \n    then return the count as the final result.\n    \"\"\""
    },
    {
        "task_id": "84",
        "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a positive integer N and convert it to binary using the `bin()` function, then extract the binary string by removing the '0b' prefix.",
        "instruction 2": "Use a loop to iterate through the binary string, convert each binary digit to an integer using the `int()` function with base 2, add them up using the `sum()` function, and return the result as a string.",
        "new_prompt": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n\n    Instructions:\n        Identify the input parameter as a positive integer N, convert it to binary using the `bin()` function and retrieve the binary string by removing the '0b' prefix. \n        Use a loop to iterate through the binary string, convert each binary digit to an integer with the `int()` function (base 2), sum them using the `sum()` function, and return the result as a string.\n    \"\"\""
    },
    {
        "task_id": "85",
        "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a non-empty list of integers and initialize a variable to store the sum of even elements at odd indices.",
        "instruction 2": "Use a loop to iterate over the list with indexing, add the even elements at odd indices to the sum, and return the sum.",
        "new_prompt": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, identify the input parameter and initialize a variable to store the sum of the even elements located at odd indices. Use a loop to iterate over the list with indexing, adding the even elements found at odd indices to the sum, and return the final sum.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\""
    },
    {
        "task_id": "86",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
        "instruction 1": "Split the input string into words and then iterate over each word to arrange its characters in ascending order based on their ASCII values, and then join the characters back into a single string.",
        "instruction 2": "Join the processed words back into a single string using spaces and return the resulting string.",
        "new_prompt": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it. \n    The ordered version of the string is achieved by splitting the input string into words, \n    where each word's characters are arranged in ascending order based on their ASCII values. \n    After processing, the words should be joined back into a single string, \n    while preserving the original order of the words and any blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\""
    },
    {
        "task_id": "87",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a 2D list `lst` and an integer `x`, and initialize an empty list to store the coordinates.",
        "instruction 2": "Use a nested loop to iterate over the rows and columns of the 2D list, and for each occurrence of `x`, add the coordinates to the result list, and finally sort the result list based on the row and column indices in ascending and descending order respectively.",
        "new_prompt": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, identify the input parameters as a 2D list `lst` and an integer `x`, and initialize an empty list to store the coordinates. \n    Find integers x in the list, and return a list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0. \n    Use a nested loop to iterate over the rows and columns of the 2D list, and for each occurrence of `x`, add the coordinates to the result list, and finally sort the result list based on the row and column indices in ascending and descending order respectively.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\""
    },
    {
        "task_id": "88",
        "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list and calculate the sum of the first and last elements in the array, then decide whether to sort the array in ascending or descending order based on the parity of the sum.",
        "instruction 2": "Create a copy of the input array using the `copy()` method and sort the copied array in the determined order using the `sort()` method or the `sorted()` function, then return the sorted array.",
        "new_prompt": "def sort_array(array):\n    \"\"\"\n    Given a list of non-negative integers, return a copy of the given array after sorting.\n    First, calculate the sum of the first and last elements of the array to determine the sorting order: \n    sort the array in ascending order if the sum is odd, or in descending order if the sum is even. \n    Utilize the `copy()` method to create a duplicate of the input array, and then apply the `sort()` method \n    or the `sorted()` function on the copied array before returning it.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\""
    },
    {
        "task_id": "89",
        "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
        "instruction 1": "Use the string's characters to calculate the shift position as (2 * 2), and use Python's built-in string and list methods to rotate the string's characters accordingly.",
        "instruction 2": "Apply the list slicing method to the original string and calculate the start index of the shift position, then join the sliced strings back with an empty string to get the final encrypted string.",
        "new_prompt": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and \n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. Use the string's characters \n    to calculate the shift position as (2 * 2), and utilize Python's \n    built-in string and list methods to rotate the characters accordingly. \n    Additionally, apply the list slicing method to the original string to \n    calculate the start index of the shift position, then join the sliced \n    strings back with an empty string to obtain the final encrypted string. \n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\""
    },
    {
        "task_id": "90",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
        "instruction 1": "Write a function that takes a list of integers as input and returns the 2nd smallest element. If the list has less than 2 unique elements, return None.",
        "instruction 2": "Use the built-in `min()` function with the `key()` function to get the 2nd smallest element in the sorted list. If the list has less than 2 elements, the `min()` function with `key()` will return `None`.",
        "new_prompt": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers. \n    Write a function next_smallest() that takes this list as input and returns the 2nd smallest unique element. \n    If the list has less than 2 unique elements, return None. \n    You may utilize the built-in `min()` function along with the `key()` function to assist in retrieving the 2nd smallest element in the sorted list. \n    If the list contains fewer than 2 elements, the approach will result in None.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\""
    },
    {
        "task_id": "91",
        "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string S, split it into sentences using the punctuation characters '.' , '?' , '!'. Count the number of sentences that start with the word 'I'.",
        "instruction 2": "Return the count of sentences that start with 'I' as the result.",
        "new_prompt": "```python\ndef is_bored(S):\n    \"\"\"\n    You will receive a string parameter S, and your objective is to break it down into sentences by using the punctuation marks '.', '?', and '!'. \n    Then, count the total number of sentences that begin with the word \"I\". \n    Finally, return this count as your output.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n```"
    },
    {
        "task_id": "92",
        "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
        "instruction 1": "Identify the input parameters as three integers x, y, and z, and check if any of the conditions specified in the function description (i.e., x equals the sum of y and z, or y equals the sum of x and z, or z equals the sum of x and y) are met.",
        "instruction 2": "Return True if the identified condition is met and the inputs are integers, otherwise return False, using an if-else statement or a conditional expression.",
        "new_prompt": "def any_int(x, y, z):\n    '''\n    Create a function that takes three integers: x, y, and z. \n    Check if any of the conditions in the function description are fulfilled: if x is equal to the sum of y and z, or if y is equal to the sum of x and z, or if z is equal to the sum of x and y. \n    Return True if any of these conditions are satisfied and all inputs are integers; otherwise, return False. \n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n    '''"
    },
    {
        "task_id": "93",
        "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as the message string and initialize an empty result string.",
        "instruction 2": "Use a loop to iterate over each character in the message, check if the character is a vowel, replace it with the corresponding character 2 places ahead in the alphabet, and if it's not a vowel, change its case using the `upper()` or `lower()` function depending on its original case, then add the character to the result string.",
        "new_prompt": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes it in such a \n    way that it swaps the case of all letters, and replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the English alphabet. \n    Assume only letters. The input parameter is the message string, and an \n    empty result string should be initialized. Use a loop to iterate over \n    each character in the message: check if the character is a vowel, replace \n    it with the corresponding character 2 places ahead in the alphabet, and \n    if it's not a vowel, change its case using the `upper()` or `lower()` \n    function depending on its original case, then add the character to the \n    result string.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\""
    },
    {
        "task_id": "94",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers and filter out non-prime numbers from the list using a primality test (is_prime function) to get the largest prime number, and store it in a variable.",
        "instruction 2": "Return the sum of the digits of the largest prime number using a lambda function or a regular function for digit calculations.",
        "new_prompt": "```python\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers. \n    Identify the input parameter as a list of integers and filter out non-prime numbers using a primality test (is_prime function) to find the largest prime value, which you will store in a variable. Finally, return the sum of its digits using a lambda function or a regular function for digit calculations.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n```"
    },
    {
        "task_id": "95",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a dictionary and check if it's empty. If it is empty, return False.",
        "instruction 2": "Iterate over the dictionary's keys, check if all keys are either in lowercase or all in uppercase using the `islower()` or `isupper()` methods, and return the appropriate boolean value accordingly.",
        "new_prompt": "def check_dict_case(dict):\n    \"\"\"\n    Identify the input parameter as a dictionary and return False if it is empty.\n    Given a dictionary, iterate over its keys to determine if all keys are strings in lower case \n    or if all keys are strings in upper case by utilizing the `islower()` or `isupper()` methods, \n    and return the corresponding boolean value.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\""
    },
    {
        "task_id": "96",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a non-negative integer n and initialize an empty list to store the prime numbers.",
        "instruction 2": "Use a loop to implement the Sieve of Eratosthenes algorithm to generate all prime numbers less than n, then return the first n prime numbers in the list.",
        "new_prompt": "def count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer n and returns an array of the first n\n    integers that are prime numbers and less than n. \n    Start by identifying the input parameter as a non-negative integer n and initializing an empty list to store the prime numbers. \n    Then, use a loop to implement the Sieve of Eratosthenes algorithm to generate all prime numbers less than n, \n    returning the first n prime numbers in the list.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\""
    },
    {
        "task_id": "97",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
        "instruction 1": "Extract the last digit of both integers using the modulo operator (%) and return their product.",
        "instruction 2": "Return the calculated product.",
        "new_prompt": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits. To achieve this, extract the last digit of both integers using the modulo operator (%) and return their product. Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\""
    },
    {
        "task_id": "98",
        "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string s and define an integer variable to count uppercase vowels at even indices.",
        "instruction 2": "Use a loop to iterate through the characters in the string, check if the character is an uppercase vowel at an even index, and increment the count accordingly. Return the count at the end.",
        "new_prompt": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels located at even indices.\n    Identify the input parameter as a string s and define an integer variable to track the count of uppercase vowels at even indices. \n    Use a loop to iterate through the characters in the string, checking if each character is an uppercase vowel at an even index, and increment the count accordingly. Return the final count at the end.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\""
    },
    {
        "task_id": "99",
        "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "instruction 1": "Identify the input parameter as a string value representing a number and convert it to float or int type.",
        "instruction 2": "Use the built-in round() function with a second argument of 0 to round the number away from zero, or use math.ceil() or math.floor() functions if the input is closer to the beginning or end of the integer respectively, and return the result as an integer",
        "new_prompt": "```python\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number, identifies the input parameter, and converts it to float or int type before returning the closest integer to it. Use the built-in round() function with a second argument of 0 to ensure rounding away from zero; if the number is closer to the beginning or end of the integer, utilize math.ceil() or math.floor() functions accordingly.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant from two integers, the one you should return is the one that is the farthest from zero. For example closest_integer(\"14.5\") should return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n```"
    },
    {
        "task_id": "100",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a positive integer n, and initialize an empty list to store the number of stones in each level.",
        "instruction 2": "Use a loop to generate the list of stones for each level by checking if n is odd or even and updating the number of stones accordingly, then return the list.",
        "new_prompt": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Identify n as a positive integer, and initialize an empty list to store the number of stones for each level. Use a loop to generate this list by checking the parity of n and updating the count of stones accordingly. Finally, return the number of stones in each level in a list, where the element at index i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\""
    },
    {
        "task_id": "101",
        "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "instruction 1": "Split the input string into an array of words using a separator that can be either a comma or a space.",
        "instruction 2": "Return the resulting array of words",
        "new_prompt": "def words_string(s):\n    \"\"\"\n    You will receive a string containing words that are either separated by commas or spaces. Your objective is \n    to divide the string into individual words using a separator that can be either a comma or a space, and then \n    return the resulting array of words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\""
    },
    {
        "task_id": "102",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
        "instruction 1": "Write a function that takes two positive numbers x and y as input and checks if there's a largest even number within the range [x, y]. If yes, return the largest even number; otherwise, return -1.",
        "instruction 2": "Use an if-else statement to check if x and y are even, and if y is even, return the value of y. If not, find the largest even number between the current value of x and y, and then return it; else return -1.",
        "new_prompt": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y as input and checks \n    if there's a largest even number within the range [x, y] inclusive. If such \n    a number exists, it returns the largest even integer in that range; otherwise, \n    it returns -1. The function uses an if-else statement to determine whether \n    x and y are even. If y is even, it returns y; if not, it finds the largest \n    even number between x and y and returns it. If no even number is present, \n    it returns -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\""
    },
    {
        "task_id": "103",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two positive integers n and m and return -1 if n is greater than m. Calculate the average of the integers from n through m, include n and m, and round the result to the nearest integer.",
        "instruction 2": "Convert the rounded result to binary using the built-in int() function with base 2 and return the binary string representation as a string prefixed with '0b'.",
        "new_prompt": "```python\ndef rounded_avg(n, m):\n    \"\"\"Identify the input parameters as two positive integers n and m. If n is greater than m, return -1. \n    Otherwise, compute the average of the integers from n through m (including n and m) and round the result to the nearest integer. \n    Convert the rounded result to binary using the built-in int() function with base 2, returning the binary string representation prefixed with '0b'.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n```"
    },
    {
        "task_id": "104",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of positive integers and iterate through the list to filter out numbers that contain even digits.",
        "instruction 2": "Use a list comprehension to generate the filtered list, check each digit in the number if it's even, and if not, add it to the result list. Finally, sort the result list in ascending order using the built-in `sorted()` function and return it.",
        "new_prompt": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, iterate through the list to filter out numbers that contain even digits and return a sorted list of all elements without any even digits.\n\n    Note: The returned list should be sorted in ascending order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\""
    },
    {
        "task_id": "105",
        "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
        "instruction 1": "First, sort the numbers between 1 and 9 inclusive from the array, but ignore any numbers outside this range, and then reverse the resulting array.",
        "instruction 2": "Replace each digit in the sorted and reversed array with its corresponding name from the string 'One', 'Two', ..., 'Nine', and return the resulting list of names.",
        "new_prompt": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, first, sort the numbers between 1 and 9 inclusive from the array while ignoring any numbers outside this range, then reverse the resulting array. Afterward, replace each digit in the sorted and reversed array with its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\""
    },
    {
        "task_id": "106",
        "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer 'n' that represents the size of the list, and initialize an empty list of size n.",
        "instruction 2": "Use a loop to iterate from 0 to n-1, calculating each element at index i according to the condition: if i is even, set the element to the factorial of i, otherwise set it to the sum of numbers from 1 to i, and return the resulting list.",
        "new_prompt": "```python\ndef f(n):\n    \"\"\" Implement the function f that takes n as an integer input parameter representing the size of the list,\n    and returns a list of size n. Initialize an empty list of size n, then use a loop to iterate from 0 to n-1,\n    calculating each element at index i according to the condition: if i is even, the element is set to the factorial of i;\n    otherwise, it is set to the sum of numbers from 1 to i. The loop starts with i at 1. The factorial of i\n    is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n```"
    },
    {
        "task_id": "107",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a positive integer n, and initialize variables to count the even and odd integer palindromes between 1 and n, inclusive.",
        "instruction 2": "Use a loop to iterate over the range(1, n + 1) and check if each number is a palindrome, incrementing the corresponding count (even or odd) if it is a palindrome, then return the tuple containing the counts.",
        "new_prompt": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindromes are 1, 2, 3. One of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindromes are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. The returned tuple contains the count of even and odd integer palindromes respectively.\n        \n    Instructions:\n        1. Identify the input parameter as a positive integer n, and initialize variables to count the even and odd integer palindromes within the inclusive range of 1 to n.\n        2. Use a loop to iterate over the range(1, n + 1), checking if each number is a palindrome and incrementing the appropriate count (even or odd) accordingly, then return the tuple holding these counts.\n    \"\"\""
    },
    {
        "task_id": "108",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers and initialize a variable to keep track of the count of numbers with a sum of digits greater than 0.",
        "instruction 2": "Iterate through the list, extract each number's digits using string manipulation, calculate the sum of the digits, and increment the count if the sum is greater than 0, then return the count.",
        "new_prompt": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes a list of integers and returns\n    the number of elements that have a sum of digits greater than 0. \n    Identify the input parameter as a list of integers and initialize a variable to keep track of the count of numbers with a sum of digits greater than 0. \n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3. \n    Iterate through the list, extract each number's digits using string manipulation, calculate the sum of the digits, increment the count if the sum is greater than 0, and then return the count.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\""
    },
    {
        "task_id": "109",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers and check if the list is empty, returning True if it is, as a sorted array can be obtained by right shift operations from an empty array.",
        "instruction 2": "Iterate through the array, comparing each element with the next element; if the current element is greater than the next element, and there is no left shift operation performed, return False as the array cannot be sorted; otherwise, continue the iteration and return True after completing the iteration.",
        "new_prompt": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation,\n    then return True; otherwise, return False. If the given array is empty,\n    return True, as a sorted array can be derived from an empty array.\n\n    Note: The given list is guaranteed to have unique elements.\n    \n    To solve this, first identify the input parameter as a list of integers and\n    check its emptiness. Then iterate through the array, comparing each element with \n    the next; if any current element is greater than the next and no left shift has\n    occurred, return False as the array cannot be sorted; otherwise, continue iterating\n    and return True after completing the checks.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\""
    },
    {
        "task_id": "110",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two lists of numbers, lst1 and lst2, and initialize a flag to check if it is possible to make all elements in lst1 even.",
        "instruction 2": "Use a loop to iterate through each element in lst1 and lst2, and if an odd number is found in lst1, check if an odd number with the same absolute value can be found in lst2 and replace it with the corresponding even number in lst2; if no such pair is found, return \"NO\", otherwise return \"YES\" after checking all elements in lst1.",
        "new_prompt": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    You should identify the input parameters as two lists of numbers, lst1 and lst2, and initialize a flag to check if it is possible to make all elements in lst1 even. Utilize a loop to go through each element in both lst1 and lst2; if an odd number is detected in lst1, verify whether an odd number with the same absolute value exists in lst2, and swap it with the corresponding even number from lst2. If a suitable pair cannot be found, return \"NO\", otherwise return \"YES\" after examining all elements in lst1.\n    \"\"\""
    },
    {
        "task_id": "111",
        "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "instruction 1": "Split the input string into a list of letters using the split() function, count the occurrence of each letter using a dictionary to store key-value pairs, sort the dictionary by key-value pairs in descending order and update the dictionary to keep only the most frequently occurring letters.",
        "instruction 2": "Use a dictionary comprehension to keep track of the maximum frequency and the set of letters with this frequency, and return this dictionary.",
        "new_prompt": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    To achieve this, first split the input string into a list of letters using the split() function. Then, count the occurrences of each letter and store these counts in a dictionary as key-value pairs. Sort this dictionary by the occurrence counts in descending order, and filter it to keep only the letters with the highest frequency. Utilize a dictionary comprehension to track the maximum frequency and the letters that appear with that frequency, and finally return the resulting dictionary.\n    \"\"\""
    },
    {
        "task_id": "112",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two strings, s and c, and initialize an empty string to store the result. Then, iterate through each character in s, and if it is equal to any character in c, remove it from the result string.",
        "instruction 2": "After all characters from s have been processed, check if the result string is a palindrome using two pointers from the start and end of the string and move them towards the center. If they meet without inequality, the string is a palindrome. Return the result string and a boolean value indicating whether it is a palindrome or not.",
        "new_prompt": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c; you need to delete all characters in s that match any character in c and then check if the resulting string is a palindrome.\n    A string is considered a palindrome if it reads the same backward as forward.\n    You should return a tuple containing the resulting string and a boolean indicating the palindrome check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \n    Identify the input parameters as two strings, s and c, and initialize an empty string to store the result. Then, iterate through each character in s, and if it is equal to any character in c, remove it from the result string. After all characters from s have been processed, check if the result string is a palindrome using two pointers from the start and end of the string and move them towards the center. If they meet without inequality, the string is a palindrome. Return the result string and a boolean value indicating whether it is a palindrome or not.\n    \"\"\""
    },
    {
        "task_id": "113",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of strings, where each string consists of only digits, and initialize an empty list to store the output.",
        "instruction 2": "Loop through the input list, iterate through each string, count the number of odd digits using the modulo operator, and format the result as the desired output string before appending it to the output list.",
        "new_prompt": "def odd_count(lst):\n    \"\"\"Identify the input parameter as a list of strings, where each string consists of only digits, and initialize an empty list to store the output. \n    Loop through the input list, iterate through each string, count the number of odd digits using the modulo operator, and format the result as the desired output string before appending it to the output list.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\""
    },
    {
        "task_id": "114",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers 'nums' and initialize a variable to store the minimum sum.",
        "instruction 2": "Use a variable to store the minimum sum and initialize it with infinity, then iterate over the list using a loop to calculate the sum of each subarray and update the minimum sum if the current sum is smaller.",
        "new_prompt": "def minSubArraySum(nums):\n    \"\"\"\n    Given a list of integers 'nums', identify the input parameter and initialize a variable to store the minimum sum. \n    Initialize this variable with infinity, then iterate over the list using a loop to calculate the sum of each non-empty sub-array and update the minimum sum if the current sum is smaller.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\""
    },
    {
        "task_id": "115",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a 2D grid representing the wells and an integer capacity representing the buckets' capacity.",
        "instruction 2": "Use matrix traversal (e.g., row by row or column by column) to calculate the total units of water in the wells, then divide it by the bucket capacity to find the number of times the buckets need to be lowered.",
        "new_prompt": "```python\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water. \n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity. \n    Your task is to use the buckets to empty the wells. \n    First, identify the input parameters as a 2D grid representing the wells and an integer capacity representing the buckets' capacity. \n    Then, output the number of times you need to lower the buckets by using matrix traversal (e.g., row by row or column by column) to calculate the total units of water in the wells, \n    and divide it by the bucket capacity to determine the total number of times the buckets need to be lowered.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n```"
    },
    {
        "task_id": "116",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "instruction 1": "Decode the array elements into binary representation, count the number of ones, and store it along with the decimal value in a separate structure such as a list of tuples.",
        "instruction 2": "Sort the list of tuples based on the number of ones in ascending order, and then by the decimal value in case of a tie, using Python's built-in sort function with a lambda function as the key.",
        "new_prompt": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    the number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    To achieve this, first decode the array elements into binary representation, count the number of ones, and store it along with the decimal value in a list of tuples. Then, sort the list of tuples based on the number of ones in ascending order, and by the decimal value in case of a tie, using Python's built-in sort function with a lambda function as the key.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\""
    },
    {
        "task_id": "117",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a string and a natural number, which are the input string and the number of consonants, and parse the string into words and count the consonants in each word.",
        "instruction 2": "Use a list comprehension to filter the words that contain exactly n consonants, and return the list of filtered words in the original order they appear in the string.",
        "new_prompt": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in the order these words appear in the string s. First, identify the input parameters as a string and a natural number, which represent the input string and the number of consonants. Parse the string into words and count the consonants in each word. If the string s is empty then the function should return an empty list. Use a list comprehension to filter the words that contain exactly n consonants, and return the list of filtered words in their original order. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\""
    },
    {
        "task_id": "118",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
        "instruction 1": "Split the input string into characters and iterate through it backwards (from right to left) to find the first pair of consonants.",
        "instruction 2": "Check each character between the pair of consonants to find the first vowel and return it.",
        "new_prompt": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending don't count. Return an empty string if you didn't\n    find any vowel that meets the above condition. \n\n    You may assume that the given string contains English letters only.\n\n    To do this, split the input string into characters and iterate through it backwards \n    (from right to left) to locate the first pair of consonants. Then, check each \n    character between that pair of consonants to find the first vowel and return it.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\""
    },
    {
        "task_id": "119",
        "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "instruction 1": "Identify the input parameter as a list of two strings, both containing open and close parentheses, and check if it is possible to concatenate them in any order to form a valid parentheses string.",
        "instruction 2": "Use a while loop to remove the closing parentheses if they correspond to the last opened parentheses and vice versa, until the list is empty, and return 'Yes' if the list is empty, and 'No' otherwise.",
        "new_prompt": "def match_parens(lst):\n    '''\n    The input is a list containing two strings, each made up exclusively of open\n    parentheses '(' and close parentheses ')'. Your task is to determine if it is possible to concatenate these strings in any order to create a valid parentheses string. A string S is defined as valid if all parentheses are balanced; for instance, '(())()' is valid, whereas '())' is not. Return 'Yes' if a valid configuration can be achieved and 'No' if it cannot.\n\n    Additionally, utilize a while loop to eliminate closing parentheses that match the last opened parentheses and vice versa until the list is empty. If the list is empty by the end of this process, return 'Yes'; otherwise, return 'No'.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''"
    },
    {
        "task_id": "120",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
        "instruction 1": "Sort the input array in descending order and then slice the sorted array to get the first k elements.",
        "instruction 2": "Return the sorted list of the first k elements.",
        "new_prompt": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n        \n    Instructions:\n        - Sort the input array in descending order to arrange the elements from largest to smallest,\n          and then extract the first k elements from this sorted array. \n        - Finally, return the sorted list containing these k elements.\n    \"\"\""
    },
    {
        "task_id": "121",
        "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers and initialize an empty sum variable to store the sum of odd elements in even positions.",
        "instruction 2": "Use a loop to iterate over the list, check if the current index is even and the current element is odd, and if so, add it to the sum.",
        "new_prompt": "```python\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    - Identify the input parameter as a list of integers and initialize an empty sum variable to keep track of the sum of odd elements found in even positions.\n    - Use a loop to traverse through the list, checking if the current index is even and the element at that index is odd; if both conditions are met, add the element to the sum.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n```"
    },
    {
        "task_id": "122",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a non-empty list of integers 'arr' and an integer 'k', and initialize a variable to store the sum of elements with at most two digits.",
        "instruction 2": "Use a loop to iterate and add the elements from 'arr' with at most two digits from the first 'k' elements and return the sum.",
        "new_prompt": "def add_elements(arr, k):\n    \"\"\"\n    Identify the input parameters as a non-empty list of integers 'arr' and an integer 'k', \n    and initialize a variable to hold the sum of elements with at most two digits from the \n    first 'k' elements of 'arr'. Use a loop to iterate through these elements, adding \n    those with at most two digits and returning the total sum.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\""
    },
    {
        "task_id": "123",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a positive integer n, and initialize an empty list to store the sorted odd numbers in the Collatz sequence.",
        "instruction 2": "Use a loop to generate the Collatz sequence for n, checking if each number is odd or even and applying the corresponding rule, adding the odd numbers to the list, and returning the sorted list in ascending order.",
        "new_prompt": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    Initialize an empty list to store the odd numbers from the Collatz sequence generated for the positive integer n. Use a loop to create the sequence by determining whether each term is odd or even, applying the appropriate rule, and adding only the odd numbers to the list before returning the sorted list in ascending order.\n    \"\"\""
    },
    {
        "task_id": "124",
        "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and split it into substrings to separate the month, day, and year components, and convert them into integers.",
        "instruction 2": "Implement the date validation rules: check the length of the date string, validate the month, day, and year using the specified conditions, and return True if the date is valid, False otherwise.",
        "new_prompt": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n\n    Identify the input parameter as a string and split it into substrings to separate the month, day, and year components, converting them into integers. Implement the date validation rules by checking the length of the date string, validating the month, day, and year according to the specified conditions, and returning True if the date is valid, or False otherwise.\n    \"\"\""
    },
    {
        "task_id": "125",
        "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "instruction 1": "Identify the input parameter `txt` as a string that may contain spaces or commas, and determine whether to split it by whitespace or by commas based on the presence of either.",
        "instruction 2": "Use the `split()` function to split the text by whitespace or commas, and if no whitespaces or commas are present, use a loop to iterate over the text and count the number of lower-case letters with odd order in the alphabet, then return the result.",
        "new_prompt": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace; if no whitespace exists in the text, split on commas ','; if neither whitespace nor commas are present, count and return the number of lower-case letters with odd positions in the alphabet, where ord('a') = 0, ord('b') = 1, ... ord('z') = 25. \n    The input parameter `txt` is a string that may contain spaces or commas, and the `split()` function should be used for splitting the text accordingly. If neither splitting criterion is met, utilize a loop to iterate over the text to count the lower-case letters with odd alphabetical order. \n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''"
    },
    {
        "task_id": "126",
        "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n",
        "instruction 1": "Identify the input parameter as a list of integers, check if the list contains more than one duplicate number, and use a loop to iterate through the list from the second element to the end, returning False if any element is less than the previous one.",
        "instruction 2": "Return True if the function has not found any pair of adjacent elements that are out of order, and if the list has only one duplicate, considering it is still sorted, otherwise, return False.",
        "new_prompt": "def is_sorted(lst):\n    '''\n    Identify the input parameter as a list of integers, and check if the list contains more than one duplicate number. Use a loop to iterate through the list starting from the second element to the end, returning False if any element is less than the previous one. \n\n    Return True if the function has not found any pair of adjacent elements that are out of order, and if the list has only one duplicate, considering it is still sorted, otherwise return False. \n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''"
    },
    {
        "task_id": "127",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two intervals, each represented as a tuple of two integers, and calculate the intersection of these intervals by finding the maximum of the start values and the minimum of the end values.",
        "instruction 2": "Check the length of the intersection interval, and if it is a prime number, return 'YES', otherwise return 'NO' if the intersection is empty or 'NO' again.",
        "new_prompt": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number. Begin by identifying the input parameters as two intervals, each represented as a tuple of two integers, and calculate the intersection of these intervals by finding the maximum of the start values and the minimum of the end values. \n    For example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number. \n    If the length of the intersection interval is a prime number, return \"YES\",\n    otherwise, consider if the intersection is empty to return \"NO\", or return \"NO\" again if it is not a prime number.\n    If the two intervals don't intersect, return \"NO\".\n\n    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\""
    },
    {
        "task_id": "128",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers and extract the signs of each number in the array, then calculate the product of all signs, represented by 1, -1, or 0, without considering the zeros.",
        "instruction 2": "Calculate the sum of the absolute values of the numbers in the array, then multiply the result by the product of all signs, and if the input array is empty, return None.",
        "new_prompt": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers, which should be identified as a list of integers. Your task is to return the sum of the absolute values of the integers multiplied by the product of the signs of each number in the array, represented by 1, -1, or 0, without considering the zeros. If the input array is empty, you should return None.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\""
    },
    {
        "task_id": "129",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a 2D grid and the integer k, and initialize a set to store the visited cells and a queue for BFS, with the starting cell and its value.",
        "instruction 2": "Use BFS to traverse the grid, repeatedly exploring the neighboring cells, and maintain the path length and the current path values, returning the lexicographically smallest path of length k.",
        "new_prompt": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with your current\n    cell. Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exists an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j}. It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path goes through.\n\n    To implement this, identify the input parameters as a 2D grid and the integer k, and initialize a set to store the visited cells and a queue for BFS, starting from any cell along with its value. Utilize BFS to explore the grid, continuously traversing the neighboring cells, while tracking the path length and maintaining the current path values, ultimately returning the lexicographically smallest path of length k.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\""
    },
    {
        "task_id": "130",
        "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a non-negative integer n, and initialize a list to store the Tribonacci sequence. Start with the base case tri(1) = 3 and recursively populate the list according to the given recurrence relation.",
        "instruction 2": "Use a loop to generate the Tribonacci sequence using the recurrence relation and store the results in the list. For odd values of n, calculate the next term as the sum of the previous three terms in the sequence, and for even values of n, use the simplified formula tri(n) = 1 + n/2.",
        "new_prompt": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, and your task is to return a list of the \n    first n + 1 numbers of the Tribonacci sequence. To achieve this, identify the input parameter n, and initialize a list to store the sequence. Start with the base case tri(1) = 3. Then, use a loop to generate the sequence according to the recurrence relation: for odd values of n, calculate the next term as the sum of the previous three terms, and for even values of n, apply the formula tri(n) = 1 + n/2.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\""
    },
    {
        "task_id": "131",
        "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a positive integer n and initialize a variable to store the product of odd digits.",
        "instruction 2": "Use a loop to iterate through each digit in the number, check if it is odd, and if so, multiply the product by that digit, else return the original value if all digits are even.",
        "new_prompt": "```python\ndef digits(n):\n    \"\"\"Identify the input parameter as a positive integer n, and return the product of the odd digits.\n    Initialize a variable to store the product of odd digits, and use a loop to iterate through each digit in the number. \n    Check if a digit is odd, and if so, multiply the product by that digit; otherwise, return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n```"
    },
    {
        "task_id": "132",
        "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n",
        "instruction 1": "Write a function to iterate through the string, keeping track of the opening and closing brackets, and increment a counter for each opened bracket that has not been closed.",
        "instruction 2": "Return True if the counter is greater than 0 after iterating through the entire string, indicating that there is at least one opened bracket that has not been closed.",
        "new_prompt": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    To accomplish this, iterate through the string while keeping track of the opening and closing brackets, \n    incrementing a counter for each opened bracket that remains unclosed. At the end of the iteration, \n    return True if the counter exceeds 0, which indicates the presence of at least one bracket that has not been closed.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''"
    },
    {
        "task_id": "133",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of numbers and calculate the square of each element in the list by using the '**' operator, then round each element to the upper integer using the 'math.ceil' function from the 'math' module.",
        "instruction 2": "Use a for loop to sum the squared, rounded elements in the list using the built-in sum() function.",
        "new_prompt": "```python\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers. \n    Identify the input parameter as a list of numbers and calculate the square of each element in the list by using the '**' operator, then round each element to the upper integer using the 'math.ceil' function from the 'math' module. You need to return the sum of squared numbers in the given list, which can be done by using a for loop to sum the squared, rounded elements in the list utilizing the built-in sum() function. \n    Examples: \n    For lst = [1,2,3] the output should be 14 \n    For lst = [1,4,9] the output should be 98 \n    For lst = [1,3,5,7] the output should be 84 \n    For lst = [1.4,4.2,0] the output should be 29 \n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n```"
    },
    {
        "task_id": "134",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n",
        "instruction 1": "Identify the input parameter as a string and extract the last character to check if it is an alphabetical character using the `isalpha()` method and check if it is part of the last word in the string by verifying if the last character is not followed by a space or punctuation.",
        "instruction 2": "Return `True` if the last character is an alphabetical character and not part of the last word, and `False` otherwise, handling the edge case where the input string is empty.",
        "new_prompt": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not \n    preceded by a space or punctuation to ensure it is not part\n    of a word, returning False otherwise. It is important to \n    consider that \"word\" refers to a group of characters \n    separated by spaces, and the input parameter is a string.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''"
    },
    {
        "task_id": "135",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of unique numbers and initialize a variable to keep track of the largest index that satisfies the condition.",
        "instruction 2": "Iterate through the list, comparing each element with the previous one, and update the largest index if the condition is met; if no such element is found, return -1.",
        "new_prompt": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values. Identify the input parameter as a list of unique numbers and initialize a variable to keep track of the largest index that satisfies the condition. Iterate through the list, comparing each element with the previous one, and update the largest index if the condition is met; if no such element is found, return -1.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\""
    },
    {
        "task_id": "136",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "instruction 1": "Identify the input parameter as a list of integers, and the function should find the largest negative integer (if any) and the smallest positive integer (if any), then return the pair as a tuple.",
        "instruction 2": "Apply conditional statements to check for the presence of negative and positive integers in the input list, and store the corresponding values in separate variables. If no negative or positive integers are present, set them to None and return the tuple accordingly.",
        "new_prompt": "def largest_smallest_integers(lst):\n    '''\n    Create a function that accepts a list of integers and returns a tuple (a, b), where 'a' represents the largest negative integer found in the list (if available), and 'b' denotes the smallest positive integer present (if available). If there are no negative integers, 'a' should be None, and if there are no positive integers, 'b' should be None. The function should utilize conditional statements to check for the presence of negative and positive integers, storing their values in separate variables before returning the tuple as specified.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''"
    },
    {
        "task_id": "137",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters a and b as numbers or strings representing real numbers, and check their types to determine how to compare them.",
        "instruction 2": "Compare a and b directly if they are of the same type, using the built-in comparison operators; otherwise, convert the string representation to a float and compare; if the values are equal, return None.",
        "new_prompt": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal. First, identify a and b as numbers \n    or strings representing real numbers, checking their types to determine \n    how to compare them. If a and b are of the same type, compare them directly \n    using built-in comparison operators; if they differ, convert the string \n    representation to a float for comparison. Note: If a real number is represented \n    as a string, the floating point might be . or ,.\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\""
    },
    {
        "task_id": "138",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer n and determine whether it is even.",
        "instruction 2": "Use a loop to generate and sum four even numbers, testing all possible combinations, and return True if the sum is equal to n, and False otherwise.",
        "new_prompt": "```python\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given integer n is an even number and can be expressed as the sum of exactly 4 positive even numbers.\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    Use a loop to generate and test all possible combinations of four even numbers, returning True if their sum equals n and False otherwise.\n    \"\"\"\n```"
    },
    {
        "task_id": "139",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer n, and calculate the special factorial as the product of the input number and the factorials of all numbers from the input number to 1 using recursion.",
        "instruction 2": "Use a loop to calculate the factorial of each number, multiply the current special factorial result with the calculated factorial, and return the final result.",
        "new_prompt": "```python\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will take an integer n as input and must compute the Brazilian factorial by calculating the product of n! and the factorials of all integers from n down to 1, using recursion. Furthermore, utilize a loop to sequentially compute each factorial, multiply it with the ongoing special factorial result, and return the cumulative result as the final output.\n    \"\"\"  \n```"
    },
    {
        "task_id": "140",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and initialize a variable to store the processed string, then iterate through the string to detect consecutive spaces.",
        "instruction 2": "Use a loop to replace single spaces with underscores, and when detecting 2 or more consecutive spaces, join them with a single hyphen and then proceed with the next character.",
        "new_prompt": "def fix_spaces(text):\n    \"\"\"\n    Given a string parameter, replace all spaces in it with underscores, \n    and if there are more than 2 consecutive spaces, \n    replace all consecutive spaces with a single hyphen. \n    Initialize a variable to store the processed string and iterate through the input to detect consecutive spaces.\n    Use a loop to replace single spaces with underscores, and upon finding 2 or more consecutive spaces, \n    join them with a single hyphen before continuing with the next character.\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\""
    },
    {
        "task_id": "141",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string file_name, and define the conditions to check if the file name is valid: no more than three digits, exactly one dot, starts with letter from latin alphabet, and ends with specific extensions.",
        "instruction 2": "Implement the file_name_check function using if-else statements to check each condition, returning 'Yes' if all conditions are met, and 'No' otherwise.",
        "new_prompt": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string parameter named file_name, and checks if\n    it represents a valid file name. The function should return 'Yes' if all conditions \n    below are satisfied, and 'No' otherwise. A file's name is valid only if:\n    - There are no more than three digits ('0'-'9') present in the file's name.\n    - The name contains precisely one dot '.'\n    - The portion before the dot is non-empty and begins with a letter from the latin alphabet ('a'-'z' or 'A'-'Z').\n    - The portion following the dot must be one of the following extensions: ['txt', 'exe', 'dll']\n    To implement this function, utilize if-else statements to evaluate each condition sequentially.\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n    \"\"\""
    },
    {
        "task_id": "142",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers, and initialize a variable to store the sum of the squares and cubes.",
        "instruction 2": "Use a loop to iterate over the list, check if the index is a multiple of 3 and 4, square/cube the value if necessary, add it to the sum variable, and return the sum.",
        "new_prompt": "```python\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    It is required to identify the input parameter as a list of integers and initialize a variable to store the sum of the squares and cubes. \n    A loop will be used to iterate over the list, checking if the index is a multiple of 3 or 4 to square or cube the value as appropriate, \n    subsequently adding it to the sum variable before returning the total sum.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n```"
    },
    {
        "task_id": "143",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string (sentence) and extract word lengths from the sentence.",
        "instruction 2": "Use a loop to filter words with prime lengths, and join them together in the same order as in the original sentence, with a space separator, then return the resulting string.",
        "new_prompt": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    To accomplish this, identify the input parameter as a string (sentence) and extract the lengths of the words from it. Then, use a loop to filter the words with prime lengths, and join them together in the same order as they appear in the original sentence, using a space as a separator, before returning the resulting string.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\""
    },
    {
        "task_id": "144",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
        "instruction 1": "Separate the input strings into numerator and denominator for both x and n, and calculate the product as a fraction.",
        "instruction 2": "Compare the absolute value of the product's numerator to the product's denominator and return True if they are equal, and False otherwise.",
        "new_prompt": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n are string representations of fractions, formatted as\n    <numerator>/<denominator> where both the numerator and denominator are positive whole numbers.\n    \n    You can assume that x and n are valid fractions and do not have zero as a denominator.\n\n    To achieve this, separate the input strings into their respective numerators and denominators for both x and n, and compute the product as a fraction. Then, compare the absolute value of the product's numerator to the product's denominator, returning True if they are equal and False otherwise.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\""
    },
    {
        "task_id": "145",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "instruction 1": "Sort the input list of numbers by the sum of their digits and then by their original index in the list",
        "instruction 2": "Use Python's built-in `sorted()` function with a lambda function to sort the list based on the sum of digits, and then by the original index, and return the sorted list",
        "new_prompt": "def order_by_points(nums):\n    \"\"\"\n    Write a function that sorts the provided list of integers in ascending order based on the sum of their digits. \n    If there are multiple items with the same sum of digits, they should be ordered according to their index in the original list.\n\n    To achieve this, utilize Python's built-in `sorted()` function with a lambda function to sort the list first by the sum of digits and then by the original index, returning the sorted list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\""
    },
    {
        "task_id": "146",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of numbers nums and initialize a counter variable to store the count of numbers that meet the condition.",
        "instruction 2": "Iterate over the list and check if each number is greater than 10, and both its first and last digits are odd using Python's modulo operator, incrementing the counter accordingly, and return the counter as the result.",
        "new_prompt": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    Identify the input parameter as a list of numbers nums and initialize a counter variable to store the count of numbers that meet the condition.\n    Iterate over the list and check if each number is greater than 10, and both its first and last digits are odd using Python's modulo operator, incrementing the counter accordingly, and return the counter as the result.\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\""
    },
    {
        "task_id": "147",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "instruction 1": "Initialize an empty list a of length n, and calculate the value of a[i] as i * i - i + 1 for each i in range(1, n+1).",
        "instruction 2": "Use a loop to iterate over the list a, and count the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.",
        "new_prompt": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. Begin by initializing an empty list a and creating an integer array of length n.\n        For each i in the range from 1 to n (inclusive), calculate the value of a[i] as i * i - i + 1.\n        After constructing the array, return the count of triples (a[i], a[j], a[k]) where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\""
    },
    {
        "task_id": "148",
        "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "instruction 1": "Identify the input parameters as the names of two planets planet1 and planet2, and extract their corresponding positions from the list of planets in our solar system. Check if the input planets are correct by comparing them against the list of planets.",
        "instruction 2": "Use a list comprehension to create a list of planets whose orbits are between the orbits of planet1 and planet2, and return this list sorted in the order of proximity to the Sun.",
        "new_prompt": "def bf(planet1, planet2):\n    '''\n    In our solar system, there are eight planets: Mercury is closest to the Sun, followed by Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune.\n    Develop a function that accepts two planet names as strings, planet1 and planet2. \n    The function should return a tuple of all planets whose orbits lie between those of planet1 and planet2, arranged in order of their distance from the Sun. \n    If either planet1 or planet2 are not valid planet names, the function should return an empty tuple. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    Identify the two input parameters as the names of planets, planet1 and planet2, and determine their respective positions within the solar system's list of planets. Verify the validity of the input planets by checking them against the list of known planets. \n    Implement a list comprehension to generate a list of the planets whose orbits are situated between the orbits of planet1 and planet2, then return this list sorted by their proximity to the sun.\n    '''"
    },
    {
        "task_id": "149",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of strings, filter out the strings that have odd lengths from the list and store the resulting list in a new list.",
        "instruction 2": "Use the `sorted` function with a custom sorting key to sort the new list first by the length of the strings in ascending order, then alphabetically, and return the sorted list.",
        "new_prompt": "```python\ndef sorted_list_sum(lst):\n    \"\"\"Create a function that accepts a list of strings as its parameter, \n    and filters out any strings with odd lengths, storing the remaining strings \n    in a new list. This new list must then be sorted using the `sorted` function \n    by first considering the length of each string in ascending order, followed by \n    alphabetical order for strings of the same length, ensuring the function returns \n    a list of strings in sorted order. You can assume the input is always a list \n    of strings and may include duplicates. For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n```"
    },
    {
        "task_id": "150",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as integers n, x, and y, where n is used to determine if it's a prime number to return the value of x or the value of y for non-prime numbers.",
        "instruction 2": "Use a logical condition inside the function to check if n is a prime number, utilizing the properties of prime numbers, and return the appropriate value (x or y) based on the condition.",
        "new_prompt": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise. The input parameters are integers n, x, and y, with n being used to assess whether it is prime. Inside the function, employ a logical condition to verify if n is a prime number, leveraging prime number properties to return the appropriate value (x or y) based on this condition.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\""
    },
    {
        "task_id": "151",
        "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "instruction 1": "Identify the input parameter as a list of numbers and filter out negative numbers or non-integer numbers, then iterate over the filtered list to identify odd numbers and square them.",
        "instruction 2": "Calculate the sum of the squared odd numbers using the `sum()` function and return the result, or return 0 if the input list is empty.",
        "new_prompt": "def double_the_difference(lst):\n    '''\n    This function takes a list of numbers as input and filters out any negative values or non-integer entries. It then iterates over the cleaned list to identify the odd numbers, squaring each of them. Finally, the function calculates the total sum of these squared odd numbers using the `sum()` function and returns the result. If there are no valid numbers in the input list or if the list is empty, the function will return 0.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    '''"
    },
    {
        "task_id": "152",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two lists of equal length representing scores and guesses, and initialize an empty list to store the results.",
        "instruction 2": "Iterate through the lists in parallel using zip() and for loop, calculating the absolute difference between each score and guess, and append the result to the results list, with a condition to return 0 if the score matches the guess.",
        "new_prompt": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two lists of equal length representing scores and guesses, where each index shows a match. \n    Initialize an empty list to store the results and return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score. Use zip() and a for loop to iterate through the lists in parallel, calculating the absolute difference and appending the result to the results list, ensuring to return 0 if the score matches the guess.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\""
    },
    {
        "task_id": "153",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a class name (a string) and a list of extensions, calculate the strength of each extension based on the number of uppercase and lowercase letters in its name, and find the strongest extension by comparing the strengths.",
        "instruction 2": "Return a string in the format ClassName.StrongestExtensionName, where the strongest extension is selected based on the strength, and if there are multiple extensions with the same strength, the one that comes first in the list is chosen.",
        "new_prompt": "def Strongest_Extension(class_name, extensions):\n    \"\"\"Identify the input parameters as a class name (a string) and a list of extensions. \n    Calculate the strength of each extension based on the number of uppercase and lowercase \n    letters in its name, and find the strongest extension by comparing the strengths. \n    Return a string in the format ClassName.StrongestExtensionName, where the strongest \n    extension is selected based on the strength, and if there are multiple extensions with \n    the same strength, the one that comes first in the list is chosen. \n    For example, if you are given \"Slices\" as the class and a list of the extensions: \n    ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' \n    since 'SErviNGSliCes' is the strongest extension (its strength is -1). \n    Example: \n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\""
    },
    {
        "task_id": "154",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "instruction 1": "Identify both input parameters as strings and a and b, representing the two words to be checked, and define a function cycpattern_check that takes a and b as arguments.",
        "instruction 2": "Use a Python's built-in string methods to generate all possible rotations of the second word b and check if any of these rotations are substrings of the first word a, returning True if at least one rotation is a substring, and False otherwise.",
        "new_prompt": "def cycpattern_check(a , b):\n    \"\"\"Both input parameters a and b are strings, representing two words to be checked. Define a function cycpattern_check that takes a and b as arguments. The function should utilize Python's built-in string methods to create all possible rotations of the second word b and verify if any of these rotations exist as substrings within the first word a, returning True if at least one rotation is found as a substring, and False if none are found.\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\""
    },
    {
        "task_id": "155",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "instruction 1": "Extract the input integer and split it into individual digits, then check each digit to count the even and odd numbers.",
        "instruction 2": "Create a tuple to store the counts, increment the corresponding count based on whether each digit is even or odd, and return the tuple.",
        "new_prompt": "def even_odd_count(num):\n    \"\"\"Given an integer, extract its individual digits and count how many are even and how many are odd, returning a tuple with the counts.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\""
    },
    {
        "task_id": "156",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as an integer number within the range 1-1000, and use a dictionary to map integers to their corresponding roman numeral values, with mappings for 1-3, 4-5, 5, 10, 50, 100, 500, and 1000, andIVES_handles substitution rules for numbers from 4-9, 40-90, 400-900, and 4000-9000.",
        "instruction 2": "Use a loop to iterate through the number and append the roman numeral values to the result string, handling the conversion of numbers 4-9, 40-90, 400-900, and 4000-9000 using the appropriate mappings.",
        "new_prompt": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= number <= 1000\n    Identify the input parameter as an integer within the specified range, and utilize a dictionary to map integers to their corresponding roman numeral values, including mappings for 1-3, 4-5, 5, 10, 50, 100, 500, and 1000. Ensure to handle substitution rules for numbers from 4-9, 40-90, and 400-900.\n    Use a loop to iterate through the number, appending the roman numeral values to the result string, while managing the conversion of numbers 4-9, 40-90, and 400-900 using the appropriate mappings.\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\""
    },
    {
        "task_id": "157",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "instruction 1": "Identify the input parameters as the lengths of the three sides of a triangle, which are the inputs `a`, `b`, and `c`, and define the return type as a boolean value indicating whether the sides form a right-angled triangle.",
        "instruction 2": "Use the Pythagorean theorem to check if the sides of the triangle form a right-angled triangle, and accordingly return `True` if the condition is met, and `False` otherwise.",
        "new_prompt": "def right_angle_triangle(a, b, c):\n    '''\n    Identify the input parameters as the lengths of the three sides of a triangle, denoted by `a`, `b`, and `c`. This function will return a boolean value indicating whether these sides form a right-angled triangle. A right-angled triangle is a triangle in which one angle is a right angle, or 90 degrees. \n    Use the Pythagorean theorem to determine if the sides can form a right-angled triangle, returning `True` if they do, and `False` otherwise.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"
    },
    {
        "task_id": "158",
        "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of strings and initialize an empty variable to store the word with maximum unique characters",
        "instruction 2": "Use a loop to iterate over the list of words, calculate the number of unique characters in each word using the `set` data structure and a dictionary to count the frequency of each character, compare the count with the current maximum and update it, return the word with maximum unique characters if a tie occurs, use the original comparison method as a fallback",
        "new_prompt": "```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with the maximum number\n    of unique characters. If multiple strings have the maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \n    To achieve this, identify the input parameter as a list of strings and \n    initialize an empty variable to store the word with the maximum unique characters. \n    Use a loop to iterate over the list of words, calculate the number of unique \n    characters in each word using the `set` data structure along with a dictionary \n    to count the frequency of each character. Compare the count with the current \n    maximum and update it accordingly. In the case of a tie, return the word \n    with the maximum unique characters using the original comparison method as a fallback.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n```"
    },
    {
        "task_id": "159",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
        "instruction 1": "Define the function eat within the given constraints, taking input parameters number (the eaten carrots), need (the required carrots), and remaining (the available carrots), and use them to calculate the total eaten carrots (number + need) and the remaining carrots (remaining - need).",
        "instruction 2": "Return the result as a list containing the total eaten carrots and the remaining carrots, considering that if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
        "new_prompt": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    You should define the function eat within the given constraints, taking input parameters number (the eaten carrots), need (the required carrots), and remaining (the available carrots), and use them to calculate the total eaten carrots (number + need) and the remaining carrots (remaining - need). \n    Return the result as a list containing the total eaten carrots and the remaining carrots, considering that if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\""
    },
    {
        "task_id": "160",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
        "instruction 1": "Construct the algebraic expression by combining the operator list and the corresponding elements in the operand list, based on the length of the operator list and the length of the operand list minus one.",
        "instruction 2": "Use Python's eval function to evaluate the constructed expression and return the result.",
        "new_prompt": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists, operator and operand. The first list contains basic algebra operations, while the second list consists of integers. Construct the algebraic expression by combining the operator list with the corresponding elements from the operand list, based on the length of the operator list and the length of the operand list minus one, and evaluate the result using Python's eval function.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of the operator list is equal to the length of the operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\""
    },
    {
        "task_id": "161",
        "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string s that contains letters and non-letter characters, and initialize an empty string result to store the modified string.",
        "instruction 2": "Use a loop to iterate through each character in the string, check if it's a letter, and apply the case reversal or keep it as it is; if the string contains no letters, reverse the string; finally, return the modified string as the result.",
        "new_prompt": "```python\ndef solve(s):\n    \"\"\"You are given a string s that may include both letters and non-letter characters.\n    Initialize an empty string result to store the modified string.\n    If s[i] is a letter, reverse its case from lower to upper or vice versa; otherwise, keep it unchanged.\n    If the string contains no letters, reverse the string entirely.\n    The function should return the modified string as the result.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n```"
    },
    {
        "task_id": "162",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "instruction 1": " Define a Python function `string_to_md5(text)` that takes a string input `text` and returns its MD5 hash equivalent string. If `text` is an empty string, return `None`.",
        "instruction 2": " Use Python's built-in `hashlib` library to calculate the MD5 hash of the input string `text` and return the resulting hexadecimal representation as a string.",
        "new_prompt": "```python\ndef string_to_md5(text):\n    \"\"\"\n    Define a Python function that accepts a string input 'text' and returns its MD5 hash equivalent string. \n    If 'text' is an empty string, return None. \n    Use Python's built-in hashlib library to compute the MD5 hash of 'text' and return the resulting hexadecimal representation as a string.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n```"
    },
    {
        "task_id": "163",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two positive integer values a and b, represent the range of numbers from which to extract even digits, and define a list to store the even digits.",
        "instruction 2": "Use a loop to iterate through the range from a to b (inclusive), check if a number is even by using the modulus operator, append the even number to the list if it is even, and return the list of even digits in ascending order.",
        "new_prompt": "def generate_integers(a, b):\n    \"\"\"\n    Identify the input parameters as two positive integers a and b, represent the range of numbers from which to extract even digits, and define a list to store the even digits. \n    Use a loop to iterate through the range from a to b (inclusive), check if a number is even by using the modulus operator, append the even number to the list if it is even, and return the list of even digits in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\""
    }
]