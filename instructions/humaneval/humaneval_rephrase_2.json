[
    {
        "task_id": "0",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "instruction 1": "Iterate through the list of numbers and compare the difference between each pair of numbers to the given threshold using a nested loop.",
        "instruction 2": "Return True if any pair of numbers is found to have a difference less than the threshold; otherwise, return False at the end of the iteration.",
        "new_prompt": "```python\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold by iterating through the list and comparing the difference between each pair of numbers\n    using a nested loop. Return True if any pair has a difference less than the threshold; otherwise, return False\n    at the end of the iteration.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n```"
    },
    {
        "task_id": "1",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "instruction 1": "Remove any spaces in the input string to ensure that only the parentheses are processed.",
        "instruction 2": "Iterate through the characters in the cleaned string, maintaining a balance count for the parentheses. Whenever the balance returns to zero, extract the substring representing a complete group and append it to the result list.",
        "new_prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those groups into separate strings and return the list of those. First, remove any spaces from the input string \n    to ensure that only the parentheses are processed. Then, iterate through the characters in the cleaned string, maintaining \n    a balance count for the parentheses. Whenever the balance returns to zero, extract the substring representing a complete \n    group and append it to the result list. Separate groups are balanced (each open brace is properly closed) and not nested \n    within each other.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\""
    },
    {
        "task_id": "2",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "instruction 1": "Extract the integer part of the input number using the `int()` function and subtract it from the original number to calculate the decimal part.",
        "instruction 2": "Ensure that the function returns only the decimal part as a float data type without any formatting or rounding that could alter the precision.",
        "new_prompt": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1). \n\n    Extract the integer part of the input number using the `int()` function \n    and then subtract it from the original number to calculate the decimal part. \n    Ensure that the function returns only the decimal part as a float data type \n    without any formatting or rounding that could alter the precision.\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n```"
    },
    {
        "task_id": "3",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "instruction 1": "Initialize a variable to keep track of the account balance starting at zero, and iterate through the list of operations to update the balance with each operation.",
        "instruction 2": "Check if the balance falls below zero during the iteration; if it does, return True immediately; if the loop completes without the balance going below zero, return False.",
        "new_prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You are provided with a series of deposit and withdrawal transactions for a bank account that begins with a zero balance. Your objective is to monitor the account balance throughout these transactions to determine if it ever drops below zero. If this occurs, the function should immediately return True; otherwise, it should return False at the end of the process.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\""
    },
    {
        "task_id": "4",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "instruction 1": "Calculate the mean of the input list 'numbers' using the `sum()` function divided by the length of the list.",
        "instruction 2": "Compute the mean absolute deviation by taking the average of the absolute differences between each element in 'numbers' and the calculated mean, using a list comprehension to create the absolute differences.",
        "new_prompt": "```python\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. First, compute the mean of the list 'numbers'\n    using the `sum()` function divided by the length of the list. Then, calculate the \n    Mean Absolute Deviation by taking the average of the absolute differences between \n    each element in 'numbers' and the mean, employing a list comprehension to create \n    the absolute differences:\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n```"
    },
    {
        "task_id": "5",
        "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a list of integers called `numbers` and an integer called `delimeter` that needs to be inserted between elements.",
        "instruction 2": "Use a loop or list comprehension to iterate through the elements of `numbers`, appending each element and the `delimeter` to a new list, ensuring not to append the `delimeter` after the last element, then return the new list.",
        "new_prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Identify the input parameters as a list of integers called `numbers` and an integer called `delimeter` that needs to be inserted between elements. Use a loop or list comprehension to iterate through the elements of `numbers`, appending each element and the `delimeter` to a new list, ensuring not to append the `delimeter` after the last element, then return the new list.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\""
    },
    {
        "task_id": "6",
        "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "instruction 1": "Initialize a list to store the maximum depth of nesting for each group of parentheses, and split the input string by spaces to process each group individually.",
        "instruction 2": "For each group of parentheses, use a loop to track the current depth and update the maximum depth whenever you encounter an opening or closing parenthesis, then append the result to the list before returning it.",
        "new_prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    Initialize a list to store the maximum depth of nesting for each group of parentheses, and split the input string by spaces to process each group individually. For each group of parentheses, use a loop to track the current depth and update the maximum depth whenever you encounter an opening or closing parenthesis, then append the result to the list before returning it.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\""
    },
    {
        "task_id": "7",
        "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "instruction 1": "Define the function `filter_by_substring` with parameters `strings`, a list of strings, and `substring`, a string to filter by.",
        "instruction 2": "Use a list comprehension to iterate over `strings`, checking each string for the presence of `substring`, and return a new list containing only the strings that include the substring.",
        "new_prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Define the function `filter_by_substring` that takes two parameters: `strings`, which is a list of strings, and `substring`, a string used for filtering. Utilize a list comprehension to assess each string in `strings`, verifying whether it includes the specified `substring`, and return a new list that contains only those strings which have the substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\""
    },
    {
        "task_id": "8",
        "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "instruction 1": "Check if the input list `numbers` is empty; if so, return the tuple (0, 1) for the sum and product respectively.",
        "instruction 2": "If the list is not empty, use a loop or Python's built-in functions to calculate the sum of the elements and the product of the elements, then return the resulting tuple.",
        "new_prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    If the input list is empty, return (0, 1) for the sum and product respectively. If the list contains elements, \n    use a loop or Python's built-in functions to compute the sum and product, then return the resulting tuple.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\""
    },
    {
        "task_id": "9",
        "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "instruction 1": "Initialize an empty list to store the rolling maximum values and a variable to keep track of the current maximum while iterating through the input list of numbers.",
        "instruction 2": "For each number in the input list, compare it with the current maximum; if it's greater, update the current maximum, and append the current maximum to the result list, then return the result list at the end.",
        "new_prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum elements encountered up to each moment \n    in the sequence. Initialize an empty list to store these values alongside a variable to track the current maximum \n    while iterating through the input list of numbers. For each number in the input list, compare it with the current \n    maximum; if it is greater, update the current maximum and append this value to the result list, which will be \n    returned at the end.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\""
    },
    {
        "task_id": "10",
        "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "instruction 1": "Define a helper function to check for the longest palindromic suffix by iterating through the string from the end and using the is_palindrome function to find the longest valid suffix.",
        "instruction 2": "Once the longest palindromic suffix is found, calculate the prefix that needs to be appended by taking the substring from the start to the beginning of the suffix, reverse it, and concatenate it with the original string to form the shortest palindrome.",
        "new_prompt": "```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Define a helper function to check for the longest palindromic suffix by iterating through the string from the end and using the is_palindrome function to find the longest valid suffix.\n    - Once the longest palindromic suffix is found, calculate the prefix that needs to be appended by taking the substring from the start to the beginning of the suffix, reverse it, and concatenate it with the original string to form the shortest palindrome.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n```"
    },
    {
        "task_id": "11",
        "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "instruction 1": "Ensure that the inputs a and b are of equal length, padding the shorter string with leading zeros if necessary to facilitate the XOR operation.",
        "instruction 2": "Iterate through the characters of both strings, apply the XOR operation on each corresponding pair of bits (using '1' for XOR if they are different, '0' if they are the same) and construct the result string from these computed values.",
        "new_prompt": "```python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Ensure that the inputs a and b are of equal length by padding the shorter string with leading zeros if necessary to facilitate the XOR operation. \n    Iterate through the characters of both strings, applying the XOR operation on each corresponding pair of bits (using '1' for XOR if they are different, '0' if they are the same) and construct the result string from these computed values. \n    Return the result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n```"
    },
    {
        "task_id": "12",
        "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "instruction 1": "Check if the input list is empty and return None if it is.",
        "instruction 2": "Iterate through the list, keep track of the longest string found, and return it after comparing lengths during iteration.",
        "new_prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. If the input list is empty, return None. \n    Iterate through the list to find the longest string, and in case of ties, return the first one encountered.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\""
    },
    {
        "task_id": "13",
        "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "instruction 1": "Implement the Euclidean algorithm by using a while loop that continues until b becomes zero, where in each iteration set a to b and b to the remainder of a divided by b.",
        "instruction 2": "Return the value of a once b is zero, as this will be the greatest common divisor of the two integers.",
        "new_prompt": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" \n    Calculate the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm. \n    The process involves a while loop that iterates until b reaches zero, updating the values of a and b in each iteration by setting a to b and b to the remainder of a divided by b. \n    Once b is zero, the value of a is returned as it represents the GCD. \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\""
    },
    {
        "task_id": "14",
        "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and initialize an empty list to store the prefixes.",
        "instruction 2": "Use a loop to create prefixes of increasing lengths from the input string and append each prefix to the list, then return the list of prefixes.",
        "new_prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Identify the input parameter as a string and initialize an empty list to store the prefixes.\n    Use a loop to create prefixes of increasing lengths from the input string and append each prefix to the list, then return the list of prefixes.\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\""
    },
    {
        "task_id": "15",
        "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "instruction 1": "Define the function 'string_sequence' to accept a single integer parameter n, and create a range from 0 to n inclusive.",
        "instruction 2": "Convert the range of numbers into a list of strings and use the 'join' method to concatenate them with spaces, then return the resulting string.",
        "new_prompt": "```python\ndef string_sequence(n: int) -> str:\n    \"\"\" Define the function 'string_sequence' to accept a single integer parameter n, and create a range from 0 to n inclusive. \n    Convert the range of numbers into a list of strings and use the 'join' method to concatenate them with spaces, then return the resulting string.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n```"
    },
    {
        "task_id": "16",
        "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "instruction 1": "Convert the input string to lowercase to ensure case insensitivity, and then use a set to store distinct characters from the string.",
        "instruction 2": "Return the length of the set, which represents the count of distinct characters in the input string.",
        "new_prompt": "```python\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, convert it to lowercase to ensure case insensitivity, and find out how many distinct characters it consists of by using a set to store them.\n    Then, return the length of the set, which represents the count of distinct characters in the input string.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n```"
    },
    {
        "task_id": "17",
        "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "instruction 1": "Identify different musical note representations in the input string and map each representation to its corresponding beat value, with 'o' equating to 4 beats, 'o|' to 2 beats, and '.|' to 1 beat.",
        "instruction 2": "Split the input string into individual notes, iterate through them, and for each note, append its corresponding beat value to a result list which is returned at the end.",
        "new_prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to identify different musical note representations in the input string, map each representation to its corresponding beat value, and return a list of integers that indicates how many beats each note lasts.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\""
    },
    {
        "task_id": "18",
        "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "instruction 1": "Define a variable to keep track of the count of occurrences of the substring within the string, and initialize it to zero.",
        "instruction 2": "Use a while loop to find the position of the substring in the string, update the count, and adjust the starting position for the next search to handle overlapping instances until no further occurrences are found.",
        "new_prompt": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    Define a variable to keep track of the count of occurrences of the substring within the string, and initialize it to zero. \n    Use a while loop to find the position of the substring in the string, update the count, and adjust the starting position for the next search to handle overlapping instances until no further occurrences are found.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n```"
    },
    {
        "task_id": "19",
        "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "instruction 1": "Parse the input string to create a list of words by splitting the string on spaces, then map each word to its corresponding numerical value using a predefined dictionary.",
        "instruction 2": "Sort the list of numerical values and then convert it back to a string format by mapping the sorted list of numbers back to their corresponding words, joining them with spaces.",
        "new_prompt": "```python\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest after parsing the input string into a list of words,\n    mapping each word to its corresponding numerical value using a predefined dictionary, followed by sorting the \n    list of numerical values and converting it back to a string format by mapping the sorted list of numbers \n    back to their corresponding words, joining them with spaces.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\" \n```"
    },
    {
        "task_id": "20",
        "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "instruction 1": "Sort the input list to facilitate the identification of the closest elements by comparing adjacent pairs.",
        "instruction 2": "Iterate through the sorted list to find the pair of adjacent numbers with the smallest difference and return them in the order of (smaller number, larger number).",
        "new_prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two), sort the list to help identify the closest elements \n    by comparing adjacent pairs. Then, iterate through the sorted list to find the pair of adjacent numbers with the \n    smallest difference and return them in the order of (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\""
    },
    {
        "task_id": "21",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "instruction 1": "Calculate the minimum and maximum values from the input list to determine the scaling range.",
        "instruction 2": "Apply the linear transformation to each element in the list using the formula (x - min) / (max - min) to rescale the numbers between 0 and 1, then return the new list.",
        "new_prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers with at least two elements, first calculate the minimum and maximum values from the input list to determine the scaling range, then apply a linear transformation to that list such that the smallest number becomes 0 and the largest becomes 1. \n    You can use the formula (x - min) / (max - min) to rescale each element in the list between 0 and 1, then return the new list.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\""
    },
    {
        "task_id": "22",
        "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "instruction 1": "Iterate through each element in the input list 'values' and check if the element is an instance of 'int' using the isinstance() function.",
        "instruction 2": "Collect all integers into a new list and return this list at the end of the function.",
        "new_prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers.\n    This involves iterating through each element in the input list 'values' and checking if the element is an instance of 'int' using the isinstance() function. All integers will be collected into a new list which will be returned at the end of the function.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\""
    },
    {
        "task_id": "23",
        "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "instruction 1": "Implement the function to return the length of the input string using the built-in `len()` function.",
        "instruction 2": "Ensure the function is capable of handling and returning the length for both empty and non-empty strings as demonstrated in the provided docstring examples.",
        "new_prompt": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string using the built-in `len()` function\n    Ensure the function can handle and return the length for both empty and non-empty strings as demonstrated in the provided docstring examples.\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\""
    },
    {
        "task_id": "24",
        "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "instruction 1": "Implement a loop that iterates from n-1 down to 1, checking each number to see if it divides n evenly using the modulus operator.",
        "instruction 2": "Return the first number found that divides n evenly as the largest divisor.",
        "new_prompt": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n.\n    Implement a loop that iterates from n-1 down to 1, checking each number to see if it divides n evenly using the modulus operator. Return the first number found that divides n evenly as the largest divisor.\n    >>> largest_divisor(15)\n    5\n    \"\"\""
    },
    {
        "task_id": "25",
        "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "instruction 1": "Implement a loop that checks for divisibility of n by each integer starting from 2 up to the square root of n, and if divisible, add that integer to the list of factors and divide n by that integer until it is no longer divisible.",
        "instruction 2": "After the loop, if n is greater than 1, add n to the list of factors as it is a prime number itself, and then return the list of prime factors.",
        "new_prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return a list of prime factors of the given integer in ascending order.\n    Each factor should appear in the list as many times as it is present in the factorization.\n    The input number should equal the product of all factors. \n    Implement a loop that checks for divisibility of n by each integer starting from 2 up to the square root of n; if divisible, add that integer to the list of factors and divide n by that integer until it is no longer divisible. \n    After the loop, if n is greater than 1, include n in the list of factors since it is also a prime number, and return the complete list of prime factors.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\""
    },
    {
        "task_id": "26",
        "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "instruction 1": "Create a dictionary to count the occurrences of each number in the input list to identify duplicates.",
        "instruction 2": "Iterate through the input list and include only those numbers in the result that appear exactly once in the dictionary, preserving their original order.",
        "new_prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Create a dictionary to count the occurrences of each number in the input list to identify duplicates.\n    Iterate through the input list and include only those numbers in the result that appear exactly once in the dictionary, preserving their original order.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\""
    },
    {
        "task_id": "27",
        "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "instruction 1": "Iterate through each character in the input string and check if it is lowercase or uppercase using the `isupper()` and `islower()` string methods.",
        "instruction 2": "Create a new string by appending each flipped character (lowercase to uppercase and vice versa) and return that new string after the iteration is complete.",
        "new_prompt": "```python\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase by iterating through each character and checking its case using the `isupper()` and `islower()` string methods. Create a new string by appending each flipped character and return that new string once the iteration is complete.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n```"
    },
    {
        "task_id": "28",
        "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "instruction 1": "Define the function to accept a list of strings as input and initialize an empty string to store the concatenated result.",
        "instruction 2": "Loop through each string in the input list, appending each string to the result string, and finally return the concatenated string.",
        "new_prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Define the function to take a list of strings as input and start with an empty string to hold the concatenated result.\n    Then, loop through each string in the input list, appending each string to the result and returning the final concatenated string.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\""
    },
    {
        "task_id": "29",
        "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as a list of strings and a prefix string, then create an empty list to store the filtered results.",
        "instruction 2": "Use a loop to iterate through each string in the input list, check if it starts with the given prefix using the `startswith()` method, and append matching strings to the results list, then return the results list.",
        "new_prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    Identify the input parameters as a list of strings and a prefix string, then create an empty list to store the filtered results.\n    Use a loop to iterate through each string in the input list, check if it starts with the given prefix using the `startswith()` method, and append matching strings to the results list, then return the results list.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\""
    },
    {
        "task_id": "30",
        "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "instruction 1": "Define the function to take a list as an input parameter and initialize an empty list to store the positive numbers.",
        "instruction 2": "Use a loop to iterate through the input list, check if each number is positive, and if so, append it to the list of positive numbers, then return that list.",
        "new_prompt": "def get_positive(l: list):\n    \"\"\"Define the function to accept a list as an input parameter and return a list containing only the positive numbers found within it.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    Use a loop to iterate through the input list, checking if each number is positive; if it is, append it to the list of positive numbers, then return that list.\n    \"\"\""
    },
    {
        "task_id": "31",
        "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "instruction 1": "Check if the input n is less than 2; if so, return False since 0 and 1 are not prime numbers and negative numbers are not prime either.",
        "instruction 2": "Use a loop to iterate from 2 to the square root of n, checking if n is divisible by any of these numbers; if it is divisible, return False; if no divisors are found, return True.",
        "new_prompt": "```python\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    Check if the input n is less than 2; if so, return False since 0 and 1 are not prime numbers and negative numbers are not prime either. \n    Use a loop to iterate from 2 to the square root of n, checking if n is divisible by any of these numbers; if it is divisible, return False; if no divisors are found, return True.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "32",
        "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "instruction 1": "Validate that the input list xs has an even number of coefficients and that the largest non-zero coefficient is the leading coefficient to ensure a polynomial root exists.",
        "instruction 2": "Use numerical methods, such as Newton's method or the bisection method, to iteratively find an approximate root x such that poly(x) equals zero, then return the found value.",
        "new_prompt": "```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero locates a value x such that poly(x) = 0.\n    It validates that the input list xs has an even number of coefficients \n    and that the largest non-zero coefficient is the leading coefficient to ensure \n    a polynomial root exists. The function employs numerical methods, such as \n    Newton's method or the bisection method, to iteratively find an approximate \n    root x. find_zero returns only one zero point, even if multiple roots exist.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n```"
    },
    {
        "task_id": "33",
        "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "instruction 1": "Identify the elements in the list that are at indices divisible by three and store these elements in a separate list for sorting.",
        "instruction 2": "Sort the list of elements found at the specified indices, then replace those elements in the original list while keeping the other elements unchanged, and return the modified list.",
        "new_prompt": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted. Specifically, it first identifies the elements in the list that are at indices\n    divisible by three and stores these elements in a separate list for sorting. After sorting the list of elements found at these \n    specified indices, it replaces those elements in the original list, ensuring that the other elements remain unchanged, and then it returns \n    the modified list.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\""
    },
    {
        "task_id": "34",
        "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list and use a set to filter out duplicate elements from the list to ensure uniqueness.",
        "instruction 2": "Sort the unique elements in ascending order using Python's built-in `sorted()` function, and return the sorted list.",
        "new_prompt": "def unique(l: list):\n    \"\"\"Identify the input parameter as a list, filter out duplicate elements using a set to ensure uniqueness, and return the sorted unique elements in ascending order using Python's built-in `sorted()` function.\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\""
    },
    {
        "task_id": "35",
        "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "instruction 1": "Verify that the input is a list and check if it is not empty to handle potential edge cases.",
        "instruction 2": "Iterate through the list to compare each element with a variable initialized to the first element of the list, updating that variable whenever a larger element is found, then return the variable containing the maximum value.",
        "new_prompt": "def max_element(l: list):\n    \"\"\"Return maximum element in the list after ensuring the input is a non-empty list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    This function iterates through the list, comparing each element with a variable that is initially set to the first element, updating it whenever a larger element is encountered, and ultimately returns the variable holding the maximum value.\n    \"\"\""
    },
    {
        "task_id": "36",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "instruction 1": "Iterate through all integers from 1 to n-1 and check if each integer is divisible by either 11 or 13.",
        "instruction 2": "Convert each qualifying integer to a string and count the occurrences of the digit '7', summing these counts to return the total.",
        "new_prompt": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    Iterate through all integers from 1 to n-1 and check if each integer is divisible by either 11 or 13. \n    Convert each qualifying integer to a string and count the occurrences of the digit '7', summing these counts to return the total.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\""
    },
    {
        "task_id": "37",
        "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "instruction 1": "Extract the elements at even indices from the input list l and sort them while preserving the original order of the odd indices.",
        "instruction 2": "Iterate through the original list and create a new list, replacing the elements at even indices with the sorted even elements and keeping the odd indices unchanged.",
        "new_prompt": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' maintains the values at the odd indices from l unchanged, while the values at the even indices are comprised of \n    the elements extracted from the even indices of l but sorted in ascending order. \n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\""
    },
    {
        "task_id": "38",
        "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string s that has been encoded using the encode_cyclic function, and determine how to revert the cycling process applied to groups of three characters.",
        "instruction 2": "Use a similar approach as in the encoding function to split the string into groups of three characters and cycle the elements back to their original positions by moving the last character to the front, then return the concatenated decoded string.",
        "new_prompt": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string s that has been encoded with the encode_cyclic function. It returns the decoded string by splitting the input into groups of three characters and reverting the cycling process applied to each group, specifically moving the last character to the front, then returning the concatenated result.\n    \"\"\""
    },
    {
        "task_id": "39",
        "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "instruction 1": "Define a function that generates Fibonacci numbers, continuously checking each generated number for primality until the n-th prime Fibonacci number is found.",
        "instruction 2": "Implement a helper function to check the primality of a number and a mechanism to maintain a count of found prime Fibonacci numbers, returning the n-th found prime Fibonacci once identified.",
        "new_prompt": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib generates Fibonacci numbers while continuously checking each one for primality, ultimately returning the n-th number that is both a Fibonacci number and prime. \n    A helper function is implemented to determine the primality of each generated number, and a counting mechanism tracks the discovered prime Fibonacci numbers until the n-th prime Fibonacci number is found. \n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\""
    },
    {
        "task_id": "40",
        "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "instruction 1": "Implement a nested loop to iterate over all unique combinations of three distinct elements in the list to check if their sum equals zero.",
        "instruction 2": "If such a combination is found, return True immediately; otherwise, after checking all combinations, return False.",
        "new_prompt": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise. To achieve this, utilize a nested loop\n    to iterate over all unique combinations of three distinct elements in the \n    list and check if their sum is zero. If a valid combination is identified, \n    return True immediately; otherwise, after examining all combinations, return False.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\""
    },
    {
        "task_id": "41",
        "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "instruction 1": "Determine the number of collisions as the result of the number of cars from both sides, which will simply be the product of the number of cars moving in each direction, n * n, since each car from the left side can potentially collide with each car from the right side.",
        "instruction 2": "Return the calculated total collisions as the output of the function.",
        "new_prompt": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move at the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function calculates the total number of collisions, which is determined by the product of the number of cars from both sides (n * n), since each car from the left can potentially collide with each car from the right, and returns this value as the output of the function.\n    \"\"\""
    },
    {
        "task_id": "42",
        "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "instruction 1": "Define the function `incr_list` that takes a list as input, then use a list comprehension to iterate over each element in the list and increment it by 1.",
        "instruction 2": "Return the new list generated by the list comprehension after performing the increment operation.",
        "new_prompt": "```python\ndef incr_list(l: list):\n    \"\"\"Define the function that takes a list as input and utilizes a list comprehension to iterate over each element, incrementing it by 1, then return the new list generated by this comprehension.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n```"
    },
    {
        "task_id": "43",
        "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "instruction 1": "Create a set to store the seen elements as you iterate through the list, which helps in identifying if the complement (negative of the current element) exists in the set.",
        "instruction 2": "For each element in the list, check if its negative counterpart is already in the set; if yes, return True, otherwise add the element to the set and continue until all elements are processed, returning False if no such pairs are found.",
        "new_prompt": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise. To achieve this, a set is created to \n    store the seen elements while iterating through the list. For each \n    element, the function checks if its negative counterpart is present in \n    the set; if it is, the function returns True. If not, the element is \n    added to the set, and the process continues until all elements are \n    examined, ultimately returning False if no such pairs are found.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\""
    },
    {
        "task_id": "44",
        "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "instruction 1": "Define a while loop to repeatedly divide the input number x by the base while storing the remainders in a list, building the string representation of the new base from these remainders in reverse order.",
        "instruction 2": "Convert the list of remainders into a string and return it as the final output, ensuring to handle the case where x is 0 directly by returning '0'.",
        "new_prompt": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    Define a while loop to repeatedly divide the input number x by the base while storing the remainders in a list, building the string representation of the new base from these remainders in reverse order. \n    Convert the list of remainders into a string and return it as the final output, ensuring to handle the case where x is 0 directly by returning '0'.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\""
    },
    {
        "task_id": "45",
        "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "instruction 1": "Calculate the area of the triangle using the formula (base * height) / 2, where 'a' is the base and 'h' is the height.",
        "instruction 2": "Ensure the function returns the computed area as a float value to match the provided example output.",
        "new_prompt": "def triangle_area(a, h):\n    \"\"\"Calculate the area of a triangle using the formula (base * height) / 2, where 'a' represents the base and 'h' is the height. The function should return the computed area as a float value.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\""
    },
    {
        "task_id": "46",
        "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "instruction 1": "Initialize a list to store the Fib4 sequence values with the first four values defined as 0, 0, 2, 0, and a loop to compute further values up to n using the provided non-recursive formula.",
        "instruction 2": "In each iteration, compute the current Fib4 value as the sum of the last four values in the list, update the list, and return the n-th value from the list at the end of the function.",
        "new_prompt": "```python\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    Initialize a list to store the Fib4 sequence values with the first four values defined as 0, 0, 2, 0, and create a loop to compute further values up to n using the provided non-recursive formula. In each iteration, compute the current Fib4 value as the sum of the last four values in the list, update the list, and return the n-th value from the list at the end of the function.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n```"
    },
    {
        "task_id": "47",
        "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "instruction 1": "Check the length of the list l to determine if it is even or odd, as this affects the calculation of the median.",
        "instruction 2": "Sort the list l and return the middle element if the length is odd, or the average of the two middle elements if the length is even.",
        "new_prompt": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    First, check the length of the list l to determine if it is even or odd, as this affects the calculation of the median. \n    Then, sort the list l and return the middle element if the length is odd, or the average of the two middle elements if the length is even.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\""
    },
    {
        "task_id": "48",
        "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "instruction 1": "Define the function so that it checks if the string is equal to its reverse, using slicing to compare the original string `text` with `text[::-1]`.",
        "instruction 2": "Return True if the string is a palindrome (i.e., both strings are identical) or False if they are not.",
        "new_prompt": "def is_palindrome(text: str):\n    \"\"\"\n    This function determines whether the provided string is a palindrome by checking if it is identical to its reverse. \n    It utilizes slicing to compare the original string `text` with `text[::-1]`.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    Returns True if the string is a palindrome and False if it is not.\n    \"\"\""
    },
    {
        "task_id": "49",
        "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as an integer n and an integer p, where n is the exponent and p is the modulus.",
        "instruction 2": "Implement a method to calculate 2 raised to the power of n modulo p, preferably using the built-in `pow()` function with three arguments to handle large numbers efficiently and return the result.",
        "new_prompt": "```python\ndef modp(n: int, p: int):\n    \"\"\"Identify the input parameters as integers n (the exponent) and p (the modulus), and implement a method to calculate 2 raised to the power of n modulo p, preferably using the built-in `pow()` function with three arguments to handle large numbers efficiently and return the result.\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n```"
    },
    {
        "task_id": "50",
        "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string s that has been encoded using the encode_shift function.",
        "instruction 2": "Use a list comprehension to shift each character in the encoded string back by 5 positions in the alphabet, handling the wrap-around for characters at the beginning of the alphabet, and return the joined decoded string.",
        "new_prompt": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input a string s that has been encoded using the encode_shift function and uses a list comprehension to shift each character in the encoded string back by 5 positions in the alphabet, handling the wrap-around for characters at the beginning of the alphabet, and returns the joined decoded string.\n    \"\"\""
    },
    {
        "task_id": "51",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string 'text' and create a string variable to store the result without vowels.",
        "instruction 2": "Use a loop or a list comprehension to iterate through each character in 'text', checking if it is a vowel, and if not, add it to the result string, then return the resulting string.",
        "new_prompt": "def remove_vowels(text):\n    \"\"\"\n    The remove_vowels function accepts a string parameter named 'text' and produces a new string that excludes all vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \n    To achieve this, create a string variable to hold the result without vowels. Utilize either a loop or a list comprehension to go through each character in 'text', verify if it's a vowel, and if it's not, append it to the result string before returning the final result.\n    \"\"\""
    },
    {
        "task_id": "52",
        "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "instruction 1": "Iterate through each number in the list l to check if it is less than the threshold t.",
        "instruction 2": "Return True if all numbers in the list are below the threshold; if any number meets or exceeds the threshold, return False immediately.",
        "new_prompt": "```python\ndef below_threshold(l: list, t: int):\n    \"\"\"Iterate through each number in the list l to check if it is less than the threshold t.\n    Return True if all numbers in the list are below the threshold; if any number meets or exceeds the threshold, return False immediately.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "53",
        "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "instruction 1": "Implement the function body by using the addition operator to return the sum of x and y.",
        "instruction 2": "Ensure the function has proper type hints and includes doctest examples to validate the function's behavior.",
        "new_prompt": "def add(x: int, y: int):\n    \"\"\"Add two integers, x and y, and return their sum.\n    \n    The function should utilize the addition operator to compute the result.\n    It must also include type hints for the parameters and provide doctest examples to confirm its functionality.\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\""
    },
    {
        "task_id": "54",
        "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "instruction 1": "Collect the characters from both input strings s0 and s1, storing them in a data structure that counts occurrences, such as a dictionary or a Counter from the collections module.",
        "instruction 2": "Compare the character counts of both strings; return True if they match, indicating that both strings have the same characters with the same frequency, otherwise return False.",
        "new_prompt": "```python\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    Collect the characters from both input strings s0 and s1, storing them in a data structure that counts occurrences, such as a dictionary or a Counter from the collections module. \n    Compare the character counts of both strings; return True if they match, indicating that both strings have the same characters with the same frequency, otherwise return False.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "55",
        "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "instruction 1": "Implement a method for calculating the n-th Fibonacci number using either recursion or iteration, ensuring that edge cases for n = 0 and n = 1 are handled appropriately.",
        "instruction 2": "Utilize a loop or a memoization technique to optimize the calculation for larger values of n, returning the n-th Fibonacci number as the result.",
        "new_prompt": "```python\ndef fib(n: int):\n    \"\"\"Return the n-th Fibonacci number, calculating it either iteratively or recursively. \n    Ensure that edge cases for n = 0 and n = 1 are properly addressed, and utilize a loop or a memoization technique to optimize calculations for larger values of n. \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n```"
    },
    {
        "task_id": "56",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "instruction 1": "Define a variable to keep track of the count of opening brackets encountered as you iterate through each character in the input string.",
        "instruction 2": "For each character, increment the count for a '<' and decrement it for a '>'; return True if the count is zero at the end of the iteration, and False if it becomes negative at any point.",
        "new_prompt": "```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    Define a variable to track the number of opening brackets as you iterate through each character in the input string.\n    Increment the count for a '<' and decrement it for a '>'. \n    Return True if the count is zero at the end of the iteration, and False if it becomes negative at any point.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "57",
        "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "instruction 1": "Check if the list is empty or has only one element; if so, return True since it is trivially considered monotonic.",
        "instruction 2": "Iterate through the list to determine if all elements are either non-increasing or non-decreasing, returning True if either condition is satisfied and False otherwise.",
        "new_prompt": "def monotonic(l: list):\n    \"\"\"Return True if the list is empty or has only one element, as such cases are trivially considered monotonic. \n    Additionally, check if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\""
    },
    {
        "task_id": "58",
        "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two lists l1 and l2, and extract the unique elements from both lists using Python's 'set' data structure to facilitate comparison.",
        "instruction 2": "Find the intersection of the two sets to get common elements, convert the resulting set back to a sorted list, and return that list.",
        "new_prompt": "```python\ndef common(l1: list, l2: list):\n    \"\"\"Identify the input parameters as two lists l1 and l2, and extract the unique elements using Python's 'set' data structure to facilitate comparison. \n    Find the intersection of the two sets to obtain common elements, convert the resulting set back to a sorted list, and return that list.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n```"
    },
    {
        "task_id": "59",
        "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "instruction 1": "Implement a loop to divide the input number n by potential factors starting from 2, continuing until the square root of n, checking for prime factors and updating n when a factor is found.",
        "instruction 2": "After finding the largest prime factor, ensure to return the last factor found or n itself if it remains greater than 1 after the loop.",
        "new_prompt": "```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    Implement a loop to divide the input number n by potential factors starting from 2, continuing until the square root of n, checking for prime factors and updating n when a factor is found. After finding the largest prime factor, ensure to return the last factor found or n itself if it remains greater than 1 after the loop.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n```"
    },
    {
        "task_id": "60",
        "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "instruction 1": "Implement the function sum_to_n by utilizing the formula for the sum of the first n natural numbers, which is n * (n + 1) // 2.",
        "instruction 2": "Ensure the function includes test cases in the docstring to validate that it returns the correct sums for given inputs.",
        "new_prompt": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n using the formula for the sum of the first n natural numbers, which is n * (n + 1) // 2.\n    \n    It also includes test cases in the docstring to confirm that it returns the correct sums for specified inputs.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\""
    },
    {
        "task_id": "61",
        "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "instruction 1": "Initialize a variable to keep track of the balance of opening and closing brackets, iterating through each character in the input string, increasing the balance for each '(' and decreasing it for each ')'.",
        "instruction 2": "Return True if the balance is zero at the end of the iteration and was never negative during the process; otherwise, return False.",
        "new_prompt": "```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    Initialize a variable to track the balance of opening and closing brackets by iterating through each character in the input string, increasing the balance for each '(' and decreasing it for each ')'. \n    Return True if the balance is zero at the end of the iteration and was never negative during the process; otherwise, return False.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n```"
    },
    {
        "task_id": "62",
        "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "instruction 1": "Determine the degree of the polynomial from the length of the input list and iterate through the list of coefficients to calculate the derivative coefficients based on the power rule for derivatives.",
        "instruction 2": "Return a new list containing the calculated coefficients of the derivative, which should exclude the constant term and have each coefficient multiplied by its respective power index.",
        "new_prompt": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Determine the degree of the polynomial from the length of the input list and iterate through the list of coefficients to calculate the derivative coefficients based on the power rule for derivatives.\n    Return a new list containing the calculated coefficients of the derivative, which should exclude the constant term and have each coefficient multiplied by its respective power index.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\""
    },
    {
        "task_id": "63",
        "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "instruction 1": "Identify the base cases for the recursive function fibfib(n), specifically returning 0 for n equals 0 and 1, and returning 1 for n equals 2.",
        "instruction 2": "Implement a recursive definition for fibfib(n) that calls itself with the three preceding indices (n-1, n-2, and n-3) and sums their results to compute the nth FibFib number.",
        "new_prompt": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Identify the base cases for the recursive function fibfib(n), specifically returning 0 for n equals 0 and 1, and returning 1 for n equals 2. Please write a function that implements a recursive definition for fibfib(n) that calls itself with the three preceding indices (n-1, n-2, and n-3) and sums their results to compute the n-th FibFib number.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\""
    },
    {
        "task_id": "64",
        "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "instruction 1": "Add test cases to the function docstring that cover a variety of scenarios, including words with mixed cases, words ending with 'y', a word with no vowels, and a word filled with vowels.",
        "instruction 2": "Ensure that the added test cases return the expected results when the `vowels_count` function is called, to validate the correctness of the implementation.",
        "new_prompt": "FIX = \"\"\"\nAdd diverse test cases to the function docstring that cover various scenarios. These should include examples with mixed-case words, words that end with 'y', a word that contains no vowels, and a word that is composed entirely of vowels. Additionally, validate that these new test cases yield the expected results when the `vowels_count` function is invoked, ensuring the implementation's correctness.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\""
    },
    {
        "task_id": "65",
        "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "instruction 1": "Convert the input integer x to a string to access its digits, and determine the number of digits in x for further calculations.",
        "instruction 2": "Calculate the effective shift value using modulus operation with the length of the digit string, and construct the new string by slicing the digit string appropriately, then return the shifted result.",
        "new_prompt": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x by shifting the digits to the right by the specified amount, returning the result as a string.\n    Convert the input integer x to a string to access its digits, and determine the number of digits in x for further calculations.\n    If shift exceeds the number of digits, return the digits in reverse order.\n    Calculate the effective shift value using modulus operation with the length of the digit string, and construct the new string by slicing the digit string appropriately before returning the shifted result.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\""
    },
    {
        "task_id": "66",
        "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "instruction 1": "Initialize a variable to hold the sum of ASCII values, then iterate over each character in the input string to check if it is an uppercase letter using the `isupper()` method.",
        "instruction 2": "For each uppercase letter found, add its ASCII value (obtained using the `ord()` function) to the sum variable and return the total sum after the iteration.",
        "new_prompt": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the ASCII codes of only the uppercase characters.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n\n    Instructions:\n    Begin by initializing a variable to accumulate the sum of ASCII values. Then, loop through each character in the input string and determine if it is an uppercase letter using the `isupper()` method. For every uppercase letter identified, add its ASCII value, which can be retrieved using the `ord()` function, to the accumulated sum variable. Finally, return the total sum after completing the iteration.\n    \"\"\""
    },
    {
        "task_id": "67",
        "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "instruction 1": "Parse the input string to extract the number of apples and oranges using regular expressions or string manipulation methods.",
        "instruction 2": "Subtract the total number of apples and oranges from the total number of fruits, and return the result as the number of mango fruits.",
        "new_prompt": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit; this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represents the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket. \n    To achieve this, first, parse the input string to extract the counts of apples and oranges using \n    regular expressions or string manipulation techniques. Then, subtract the total number of apples and \n    oranges from the total number of fruits to find and return the number of mango fruits.\n    For example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\""
    },
    {
        "task_id": "68",
        "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "instruction 1": "Iterate through the input array to identify all even values along with their indices, storing them in a list.",
        "instruction 2": "Determine the smallest even value from the collected list, and return it along with its index in a list format; if no even values are found, return an empty list.",
        "new_prompt": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to iterate through the input array to identify all even values along with their indices, \n    storing them in a list. Then, determine the smallest even value from the collected list and return it \n    along with its index in a list format. If multiple nodes with the same smallest even value are found, \n    return the node that has the smallest index. If there are no even values or the given array is empty, return [].\n\n    The plucked node should be returned in a list, [ smallest_value, its index ].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\""
    },
    {
        "task_id": "69",
        "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "instruction 1": "Iterate through the unique integers in the list, and for each integer, count its frequency using the list method `count()`.",
        "instruction 2": "Check if the frequency of each integer is greater than or equal to the integer itself, keep track of the greatest integer that satisfies this condition, and return it; if no integer meets the criteria, return -1.",
        "new_prompt": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Your task is to iterate through the unique integers in the list, counting their frequency using the list method `count()`. Then, return the greatest integer that is greater than zero and has a frequency that is greater than or equal to its own value. If no such value exists, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''"
    },
    {
        "task_id": "70",
        "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "instruction 1": "Sort the input list to facilitate access to the minimum and maximum values easily, then initialize an empty result list.",
        "instruction 2": "Use a loop to alternate between appending the current minimum and maximum values from the sorted list to the result list until all elements are used, then return the result list.",
        "new_prompt": "def strange_sort_list(lst):\n    '''\n    Given a list of integers, return a list arranged in a peculiar order where you begin with the smallest value, followed by the largest of the remaining integers, and continue to alternate between the minimum and maximum.\n\n    To achieve this, first sort the input list to allow for straightforward access to the minimum and maximum values, and then initialize an empty result list. Next, use a loop to alternately append the current minimum and maximum values from the sorted list to the result list until all elements have been processed, and finally return the result list.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''"
    },
    {
        "task_id": "71",
        "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "instruction 1": "Check if the three sides a, b, and c satisfy the triangle inequality theorem to determine if they form a valid triangle.",
        "instruction 2": "If the triangle is valid, calculate the area using Heron's formula and return the result rounded to two decimal points; otherwise, return -1.",
        "new_prompt": "def triangle_area(a, b, c):\n    '''\n    Check if the lengths of the three sides of a triangle satisfy the triangle inequality theorem. If they do, calculate the area using Heron's formula and return the result rounded to 2 decimal points. If the sides do not form a valid triangle, return -1.\n    A valid triangle is one where the sum of any two sides is greater than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''"
    },
    {
        "task_id": "72",
        "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "instruction 1": "Check if the input list q is a palindrome by comparing it to its reverse, which determines if it is balanced.",
        "instruction 2": "Calculate the sum of elements in the list q and compare it to the maximum weight w, returning True if the list is balanced and the sum is less than or equal to w, otherwise return False.",
        "new_prompt": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n    To determine if the input list q is balanced, compare it to its reverse to check for palindrome status. \n    Additionally, calculate the sum of the elements in the list q and verify if this sum is less than or equal to the maximum weight w; return True if both conditions are satisfied, otherwise return False.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''"
    },
    {
        "task_id": "73",
        "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "instruction 1": "Determine the length of the input array and initialize a counter to keep track of the number of changes needed.",
        "instruction 2": "Use a loop to compare elements from the start and end of the array, counting how many pairs of elements need to be changed to make them equal, and return that count as the final result.",
        "new_prompt": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. To begin, determine the length of the input array \n    and initialize a counter to track the necessary changes. In one change, you can change one \n    element to any other element. Then, use a loop to compare elements from the start and end \n    of the array, counting how many pairs of elements need to be altered to make them equal, \n    and return that count as the final result.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\""
    },
    {
        "task_id": "74",
        "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
        "instruction 1": "Define the function to accept two lists of strings and initialize a variable for the total character count for each list using a generator expression to sum the lengths of the strings in each list.",
        "instruction 2": "Compare the total character counts of the two lists and return the list with the smaller count, or the first list if both counts are equal.",
        "new_prompt": "def total_match(lst1, lst2):\n    '''\n    Define a function that takes two lists of strings as input and utilizes a generator expression to calculate the total character count for each list by summing the lengths of their strings. The function will then compare the total character counts of both lists and return the one with a smaller count; if both counts are equal, it will return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''"
    },
    {
        "task_id": "75",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "instruction 1": "Define a helper function to check if a number is prime and generate a list of prime numbers less than 100 for reference.",
        "instruction 2": "Use a combination of nested loops to iterate through the list of prime numbers and check if any combination of three distinct primes multiplies to the given number a, returning True if such a combination exists and False otherwise.",
        "new_prompt": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less than 100. Additionally, define a helper function to check if a number is prime \n    and generate a list of prime numbers less than 100 for reference. Use a combination of nested loops to \n    iterate through this list and check if any combination of three distinct primes multiplies to the given \n    number a, returning True if such a combination exists and False otherwise.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\""
    },
    {
        "task_id": "76",
        "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as an integer x, representing the number to check, and an integer n, representing the base that x should be checked against for being a simple power.",
        "instruction 2": "Use a loop to calculate n raised to the power of integers starting from 0 until it either equals x or exceeds x, returning True if a match is found and False otherwise.",
        "new_prompt": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases. Identify the input parameters as an integer x,\n    representing the number to check, and an integer n, representing the base that x \n    should be checked against for being a simple power. x is a simple power of n if n**int=x.\n    Use a loop to calculate n raised to the power of integers starting from 0 until it \n    either equals x or exceeds x, returning True if a match is found and False otherwise.\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\""
    },
    {
        "task_id": "77",
        "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "instruction 1": "Determine the integer's cube root using the power operator and round it to the nearest integer, then cube that result to check if it equals the original integer a.",
        "instruction 2": "Return True if the cube of the rounded integer equals a, otherwise return False.",
        "new_prompt": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number. \n    To do this, calculate the integer's cube root using the power operator and round it to the nearest integer. \n    Then, check if cubing that result equals the original integer a. \n    Return True if the cube of the rounded integer equals a; otherwise, return False.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''"
    },
    {
        "task_id": "78",
        "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
        "instruction 1": "Identify the valid hexadecimal prime digits as a set containing the characters '2', '3', '5', '7', 'B', and 'D'.",
        "instruction 2": "Iterate over each character in the input string, count how many of these characters are in the set of valid hexadecimal prime digits, and return the count.",
        "new_prompt": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    To accomplish this, first identify the valid hexadecimal prime digits as a set containing the characters '2', '3', '5', '7', 'B', and 'D'. \n    Then, iterate over each character in the input string, counting how many of these characters are in the set of valid hexadecimal prime digits, and return that count.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\""
    },
    {
        "task_id": "79",
        "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "instruction 1": "Convert the given decimal number to binary format using Python's built-in `bin()` function and slice the result to obtain only the binary digits (excluding the '0b' prefix).",
        "instruction 2": "Format the binary string by adding 'db' at the beginning and at the end, then return the final formatted string.",
        "new_prompt": "```python\ndef decimal_to_binary(decimal):\n    \"\"\"You will be provided with a number in decimal form, and your task is to convert it to\n    binary format using Python's built-in `bin()` function, ensuring that you slice the result \n    to capture only the binary digits without the '0b' prefix. The function should return a string, \n    with each character representing a binary number. Each character in the string will be '0' or '1'.\n\n    Additionally, format the binary string by adding 'db' at both the beginning and the end of the \n    string, resulting in a final output that adheres to this format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n```"
    },
    {
        "task_id": "80",
        "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "instruction 1": "Check if the length of the string s is less than 3; if so, return False immediately as it cannot be happy.",
        "instruction 2": "Iterate through the string using a sliding window of size 3 and check if all characters in each window are distinct; return False if any window has repeating characters, otherwise return True.",
        "new_prompt": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3; if the length is less than 3, return False immediately as it cannot be happy. Additionally, every 3 consecutive letters must be distinct. To do this, iterate through the string using a sliding window of size 3 and check if all characters in each window are distinct; return False if any window has repeating characters, otherwise return True.\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\""
    },
    {
        "task_id": "81",
        "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "instruction 1": "Create a mapping of GPA ranges to their corresponding letter grades using a series of conditional statements to evaluate each GPA in the input list.",
        "instruction 2": "Iterate through the input list of GPAs, apply the conditional checks for each GPA to determine the letter grade, and append the result to a new list which is then returned.",
        "new_prompt": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n    Create a mapping of GPA ranges to their corresponding letter grades by using conditional statements. Then, iterate through the input list of GPAs, applying these checks to determine each letter grade, and append the results to a new list that will be returned.\n    \"\"\""
    },
    {
        "task_id": "82",
        "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and create a helper function to determine if a number is prime by checking divisibility.",
        "instruction 2": "Calculate the length of the input string, pass it to the prime-checking helper function, and return the boolean result indicating whether the length is prime.",
        "new_prompt": "def prime_length(string):\n    \"\"\"Identify the input parameter as a string and create a helper function to determine if a number is prime by checking divisibility. The function should calculate the length of the input string, pass it to the prime-checking helper function, and return True if the string length is a prime number or False otherwise.\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\""
    },
    {
        "task_id": "83",
        "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
        "instruction 1": "Determine the range of n-digit positive integers, which is from 10^(n-1) to 10^n - 1, and count the total n-digit integers.",
        "instruction 2": "Calculate the count of n-digit integers starting with 1 and the count of those ending with 1, ensuring to avoid double-counting the number '1' that both starts and ends with 1 for precise results, and return the total count.",
        "new_prompt": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1. First, determine the range of n-digit \n    positive integers, which is from 10^(n-1) to 10^n - 1, and count the total n-digit integers. \n    Next, calculate the count of n-digit integers starting with 1 and the count of those \n    ending with 1, ensuring to avoid double-counting the number '1' that both starts \n    and ends with 1 for precise results, and return the total count.\n    \"\"\""
    },
    {
        "task_id": "84",
        "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
        "instruction 1": "Convert the integer N to its binary representation using Python's `bin()` function and count the number of '1's in that binary string to calculate the sum of its digits.",
        "instruction 2": "Convert the calculated sum to its binary representation using `bin()` again, and return the substring starting from the third character to exclude the '0b' prefix.",
        "new_prompt": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string representing the binary form of the sum of the digits in the binary representation of N, excluding the '0b' prefix.\n    \"\"\""
    },
    {
        "task_id": "85",
        "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers and initialize a variable to keep track of the sum of even elements at odd indices.",
        "instruction 2": "Use a loop to iterate through the list, checking if the index is odd and if the element at that index is even, then add it to the sum variable, and return the final sum after the loop.",
        "new_prompt": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, identify the input parameter as a list of integers and initialize a variable to keep track of the sum of even elements that are located at odd indices. \n\n    Use a loop to iterate through the list, checking if each index is odd and if the corresponding element is even; if both conditions are met, add it to the sum variable. Finally, return the total sum after completing the loop.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\""
    },
    {
        "task_id": "86",
        "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
        "instruction 1": "Split the input string into words using the space character as a delimiter, and preserve any leading or trailing spaces.",
        "instruction 2": "For each word, sort its characters in ascending order based on their ASCII values, then join the ordered words back into a single string with spaces and return the result.",
        "new_prompt": "```python\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    The ordered version of the string requires that all words (separated by spaces) \n    are transformed into new words composed of characters arranged in \n    ascending order based on their ASCII values, while maintaining the sequence of words \n    and any blank spaces in the sentence.\n\n    To do this, first, split the input string into words while ensuring to keep any \n    leading or trailing spaces. Next, for each word, sort its characters according \n    to their ASCII values. Finally, join the sorted words back into a single string \n    with spaces and return the resulting string.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n```"
    },
    {
        "task_id": "87",
        "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "instruction 1": "Iterate through each row of the input list and check for the presence of the integer x, keeping track of the indices where x is found as tuples of (row_index, column_index).",
        "instruction 2": "Sort the list of tuples first by the row index in ascending order, and then by the column index in descending order before returning the sorted list.",
        "new_prompt": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to a matrix; however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst and an integer x, iterate through each row to find \n    the presence of the integer x, keeping track of the indices \n    where x is found as tuples of (row_index, column_index). \n    Return a list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple represents a coordinate - (row, column), starting with 0.\n    Before returning, sort the list of tuples first by the row index \n    in ascending order, and then by the column index in descending order. \n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\""
    },
    {
        "task_id": "88",
        "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "instruction 1": "Determine if the input is an empty array or contains a single element, in which case return the array as is without any sorting.",
        "instruction 2": "Calculate the sum of the first and last elements of the array to decide on sorting order; use Python's `sorted()` function with appropriate parameters to return a new sorted list based on odd/even criteria.",
        "new_prompt": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting. \n    If the input is an empty array or contains a single element, return the array as is without any sorting. \n    You will sort the given array in ascending order if the sum of the first and last index values is odd, \n    or sort it in descending order if the sum is even. Use Python's `sorted()` function with appropriate parameters \n    to return a new sorted list based on these odd/even criteria.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\""
    },
    {
        "task_id": "89",
        "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string and prepare to create an output string to hold the encrypted result.",
        "instruction 2": "Iterate over each character in the input string, determine its position in the alphabet, apply the rotation by shifting it down by two multiplied by two (i.e., four positions), handle wrap-around for letters beyond 'z', and append the resulting characters to the output string.",
        "new_prompt": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    Identify the input parameter as a string and prepare to create an output string to hold the encrypted result. \n    Iterate over each character in the input string, determine its position in the alphabet, apply the rotation by shifting it down by two multiplied by two (i.e., four positions), handle wrap-around for letters beyond 'z', and append the resulting characters to the output string.\n    \"\"\""
    },
    {
        "task_id": "90",
        "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a list of integers and filter out unique elements from the list to handle duplicates.",
        "instruction 2": "Sort the unique elements and check the length of the resulting list; if the length is less than 2, return None; otherwise, return the second smallest element.",
        "new_prompt": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers. Identify the input parameter as a list of integers and filter out unique elements from the list to handle duplicates. \n    Write a function next_smallest() that returns the 2nd smallest element of the filtered list. Sort the unique elements and check the length of the resulting list; if the length is less than 2, return None; otherwise, return the second smallest element. \n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\""
    },
    {
        "task_id": "91",
        "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "instruction 1": "Split the input string S into sentences using the specified delimiters ('.', '?', '!') to identify individual sentences.",
        "instruction 2": "Iterate through the list of sentences and count how many sentences start with the word 'I', returning this count at the end.",
        "new_prompt": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    First, split the input string S into individual sentences using the specified delimiters. \n    Then, go through the list of sentences and count how many of them begin with the word 'I', \n    returning this count at the end.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\""
    },
    {
        "task_id": "92",
        "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
        "instruction 1": "Check if all provided parameters x, y, and z are integers using the `isinstance()` function.",
        "instruction 2": "Return True if any of the three numbers equals the sum of the other two, using simple arithmetic checks, and return False otherwise.",
        "new_prompt": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers, ensuring that all provided parameters x, y, and z are integers using the `isinstance()` function.\n    Returns true if any of the three numbers equals the sum of the other two, through simple arithmetic checks, and returns false in all other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n    '''"
    },
    {
        "task_id": "93",
        "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "instruction 1": "Identify the input parameter as a string `message`, and initialize an empty string to hold the encoded result.",
        "instruction 2": "Loop through each character in the message, swap its case, replace vowels with the letter that is two places ahead in the alphabet, and append the transformed character to the result string before returning it.",
        "new_prompt": "def encode(message):\n    \"\"\"\n    Write a function that takes a string input parameter called `message`, and encodes it in such a \n    way that it swaps the case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the English alphabet, and appends the transformed character to an initially empty \n    result string before returning it. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\""
    },
    {
        "task_id": "94",
        "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
        "instruction 1": "Iterate through the list to filter out the prime numbers by defining a helper function that checks for primality, and keep track of the largest prime found during the iteration.",
        "instruction 2": "Once the largest prime is identified, convert it to a string to iterate through its digits, sum those digits using a generator expression, and return the result.",
        "new_prompt": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Instructions: First, create a helper function to check for primality and use it to iterate through the list, filtering out the prime numbers while keeping track of the largest prime found. Once the largest prime is identified, convert it to a string to iterate through its digits, sum those digits using a generator expression, and return the result.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\""
    },
    {
        "task_id": "95",
        "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
        "instruction 1": "Check if the dictionary is empty and return False if it is; otherwise, collect all keys in a list to analyze their case.",
        "instruction 2": "Use set operations to check if all keys are either lowercase or uppercase strings, returning True if one of the conditions is met and False otherwise.",
        "new_prompt": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, the function first checks if the dictionary is empty and returns False if it is; otherwise, it collects all keys in a list to analyze their case. It should return True if all keys are strings in lower case or all keys are strings in upper case, using set operations to check these conditions, and it should return False otherwise. \n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\""
    },
    {
        "task_id": "96",
        "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "instruction 1": "Define a helper function to check if a number is prime, then iterate through the numbers from 2 up to n, adding prime numbers to a result list.",
        "instruction 2": "Return the result list after completing the iteration, ensuring it contains only primes that are less than n.",
        "new_prompt": "```python\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n. First, define a helper function to check if a number is prime.\n    Then, iterate through the numbers from 2 up to n, adding any prime numbers to a result list.\n    Finally, return the result list after completing the iteration, ensuring it contains only primes that are less than n. \n    For example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n```"
    },
    {
        "task_id": "97",
        "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
        "instruction 1": "Extract the unit digits of the two integers a and b by taking the modulus of each with 10.",
        "instruction 2": "Return the product of the extracted unit digits.",
        "new_prompt": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits. First, extract the unit digits \n    of the two integers a and b by taking the modulus of each with 10. \n    Then, return the product of the extracted unit digits. \n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\""
    },
    {
        "task_id": "98",
        "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
        "instruction 1": "Iterate through the string s using a loop, and check the index of each character to ensure it is even before checking if the character is an uppercase vowel (A, E, I, O, U).",
        "instruction 2": "Maintain a counter to keep track of the number of uppercase vowels found at even indices, and return this counter at the end of the function.",
        "new_prompt": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    Iterate through the string s using a loop, checking if each character's index is even before determining if it is an uppercase vowel (A, E, I, O, U). \n    Maintain a counter to track the number of uppercase vowels found at these even indices, and return this counter at the end of the function.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\""
    },
    {
        "task_id": "99",
        "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "instruction 1": "Convert the input string value to a float to handle both integer and decimal values appropriately.",
        "instruction 2": "Use the `round()` function to round the float value, applying the specific rule to round away from zero for equidistant cases by checking the sign of the number and adjusting the result accordingly.",
        "new_prompt": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Instructions:\n    1. Convert the input string value to a float to handle both integer and decimal values appropriately.\n    2. Use the `round()` function to round the float value, applying the specific rule to round away from zero for equidistant cases by checking the sign of the number and adjusting the result accordingly.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''"
    },
    {
        "task_id": "100",
        "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "instruction 1": "Determine the starting number of stones for the first level based on the input integer n and initialize an empty list to hold the number of stones for each level.",
        "instruction 2": "Use a loop to generate the number of stones for each subsequent level based on whether the current number of stones is odd or even, appending each value to the list, and return the final list after completing n levels.",
        "new_prompt": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    Determine the starting number of stones for the first level based on the input integer n and initialize an empty list to hold the number of stones for each level. \n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Use a loop to generate the number of stones for each subsequent level based on whether the current number of stones is odd or even, appending each value to the list, and return the final list after completing n levels. \n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\""
    },
    {
        "task_id": "101",
        "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "instruction 1": "Use Python's `re` module to split the input string `s` on both commas and spaces, creating a list of words while ensuring that excess whitespace is handled appropriately.",
        "instruction 2": "Return the list of words, ensuring that any empty string results from consecutive delimiters are ignored.",
        "new_prompt": "```python\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to use Python's `re` module to split the string into words on both commas and spaces, \n    creating a list of words while ensuring that excess whitespace is handled appropriately \n    and ignoring any empty strings that may result from consecutive delimiters. Finally, return \n    the list of words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n```"
    },
    {
        "task_id": "102",
        "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters x and y as the two positive integers that define the range [x, y].",
        "instruction 2": "Determine the largest even integer within the specified range by iterating from the maximum of x and y down to the minimum of x and y, checking if each number is even, and return the first even number found or -1 if none exists.",
        "new_prompt": "```python\ndef choose_num(x, y):\n    \"\"\"This function takes two positive integers, x and y, which define the range [x, y] inclusive, and returns the\n    largest even integer within that range. The function iterates from the maximum of x and y down to the minimum of\n    x and y, checking for the first even number found. If no even number exists, the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n```"
    },
    {
        "task_id": "103",
        "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
        "instruction 1": "Check if n is greater than m and return -1 if true; otherwise, compute the average of the integers from n to m inclusive by using the formula for the average of a series.",
        "instruction 2": "Round the computed average to the nearest integer and convert it to binary format using Python's `bin()` function before returning the result.",
        "new_prompt": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to check if n is greater than m and return -1 if that is the case; otherwise, compute the average of the integers from n through m (including n and m) using the formula for the average of a series. \n    Round the computed average to the nearest integer and convert that to binary format using Python's `bin()` function before returning the result. \n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\""
    },
    {
        "task_id": "104",
        "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "instruction 1": "Iterate through the list of integers and convert each integer to a string to check if it contains any even digit, filtering out those that do not contain any even digits.",
        "instruction 2": "Sort the filtered list of integers in increasing order and return the sorted list as the output.",
        "new_prompt": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, this function filters the list to return a sorted list of all \n    elements that do not contain any even digits.\n\n    Note: The result must be sorted in ascending order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\""
    },
    {
        "task_id": "105",
        "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
        "instruction 1": "Filter the input array to include only integers between 1 and 9, then sort the filtered array in ascending order.",
        "instruction 2": "Reverse the sorted array, replace each digit with its corresponding name from a predefined list of names, and return the final list.",
        "new_prompt": "def by_length(arr):\n    \"\"\"\n    Filter the input array to include only integers between 1 and 9 inclusive, then sort the filtered array in ascending order.\n    Next, reverse the sorted array, replace each digit with its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", and return the final list.\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\""
    },
    {
        "task_id": "106",
        "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "instruction 1": "Initialize an empty list to store the results and use a loop to iterate over the range from 1 to n.",
        "instruction 2": "Within the loop, check if the current index i is even or odd, compute the factorial for even indices using a helper function or a loop, and compute the sum from 1 to i for odd indices, then append the result to the list.",
        "new_prompt": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    Initialize an empty list to store the results and use a loop to iterate over the range from 1 to n.\n    Within the loop, check if the current index i is even or odd, compute the factorial for even indices using a helper function or a loop, \n    and compute the sum from 1 to i for odd indices, then append the result to the list.\n    The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\""
    },
    {
        "task_id": "107",
        "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
        "instruction 1": "Create a helper function to check if a number is a palindrome by converting the number to a string and comparing it to its reverse.",
        "instruction 2": "Iterate through the range from 1 to n, use the helper function to count the even and odd palindromes, and return the counts as a tuple.",
        "new_prompt": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindromes are 1, 2, 3. One of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindromes are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. The returned tuple contains the counts of even and odd integer palindromes, respectively. \n        3. To determine if a number is a palindrome, implement a helper function that converts the number to a string and checks if it equals its reverse. \n        4. Use this helper function to iterate through the range from 1 to n, counting the even and odd palindromes, and return the results as a tuple.\n    \"\"\""
    },
    {
        "task_id": "108",
        "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "instruction 1": "Define a helper function to calculate the sum of digits for a given integer, considering the sign of the first digit, and apply this function to each element in the input array.",
        "instruction 2": "Iterate through the input array, count how many elements have a digit sum greater than zero using the helper function, and return this count.",
        "new_prompt": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    Additionally, define a helper function to calculate the sum of digits for \n    a given integer, taking into account the sign of the first digit, and apply \n    this function to each element in the input array. Finally, iterate through \n    the input array to count how many elements have a digit sum greater than \n    zero using the helper function, and return this count.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\""
    },
    {
        "task_id": "109",
        "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "instruction 1": "Check if the input array is empty and return True if it is, as an empty array is considered sorted.",
        "instruction 2": "Determine if the array can be made non-decreasing by checking if the smallest element is at a position such that all elements before it are greater than it, and all elements after it are in the correct order, which can be done by examining the point of transition in the array under the assumption of circular rotation.",
        "new_prompt": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    First, check if the input array is empty and return True if it is, as an empty \n    array is considered sorted. If it is possible to obtain the sorted array by \n    performing the above operation, then return True, else return False.\n    \n    Next, determine if the array can be made non-decreasing by checking if the \n    smallest element is situated such that all elements preceding it are greater, \n    and all elements following it are in the correct order. This can be done by \n    examining the point of transition in the array assuming circular rotation.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\""
    },
    {
        "task_id": "110",
        "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
        "instruction 1": "Check each element in lst1 to determine if it is odd or even, and simultaneously collect the even elements from lst2.",
        "instruction 2": "If there are enough even elements in lst2 to replace all odd elements in lst1, return 'YES'; otherwise, return 'NO'.",
        "new_prompt": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    To solve this, check each element in lst1 to assess whether it is odd or even while simultaneously collecting the even elements from lst2. If there are sufficient even elements in lst2 to replace all the odd elements in lst1, return 'YES'; otherwise, return 'NO'.\n    \"\"\""
    },
    {
        "task_id": "111",
        "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "instruction 1": "Split the input string into a list of characters using space as a delimiter and create a dictionary to count the occurrences of each character.",
        "instruction 2": "Determine the maximum occurrence count from the dictionary and filter the dictionary to include only the letters with that count, then return the resulting dictionary.",
        "new_prompt": "def histogram(test):\n    \"\"\"Given a string representing a space-separated sequence of lowercase letters, return a dictionary\n    containing the letter(s) that appear most frequently along with their respective counts.\n    In cases where multiple letters share the highest frequency, include all of them in the return value.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    Step 1: Split the input string into a list of characters using space as a delimiter and create a dictionary to count the occurrences of each character.\n    Step 2: Determine the maximum occurrence count from the dictionary and filter the dictionary to include only the letters with that count, then return the resulting dictionary.\n    \"\"\""
    },
    {
        "task_id": "112",
        "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
        "instruction 1": "Filter the characters in string s, removing any character that appears in string c, to obtain the modified result string.",
        "instruction 2": "Check if the modified result string is equal to its reverse to determine if it is a palindrome, and return a tuple containing the result string and the palindrome check result (True/False).",
        "new_prompt": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c; your objective is to filter the characters in s by removing any character that appears in c to obtain the modified result string. Then, check if this resulting string is equal to its reverse to determine if it is a palindrome—a string is considered a palindrome if it reads the same backward as forward. You should return a tuple containing the result string and a boolean value indicating the palindrome check (True/False).\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\""
    },
    {
        "task_id": "113",
        "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "instruction 1": "Iterate through each string in the input list, and for each string, count the number of odd digits by checking each character and ensuring it is an odd digit (1, 3, 5, 7, or 9).",
        "instruction 2": "Construct the output list by formatting a string for each input string, replacing the occurrences of 'i' with the count of odd digits found, and return the output list.",
        "new_prompt": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input. To achieve this, iterate through each string in the input list, and for each string, count the number of odd digits by checking each character and ensuring it is an odd digit (1, 3, 5, 7, or 9). Then, construct the output list by formatting a string for each input string, replacing the occurrences of 'i' with the count of odd digits found, and return the output list.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\""
    },
    {
        "task_id": "114",
        "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
        "instruction 1": "Initialize a variable to hold the minimum sum encountered so far and another variable to hold the current sum, starting with the first element of the array.",
        "instruction 2": "Iterate through the numbers in the array, updating the current sum by adding the current number, updating the minimum sum if the current sum becomes smaller, and reset the current sum to the current number if it becomes positive; return the minimum sum at the end of the iteration.",
        "new_prompt": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. Initialize a variable to track the minimum sum encountered so far and another to store the current sum, starting with the first element of the array. Traverse through the numbers in the array, updating the current sum by adding the current number, adjusting the minimum sum if the current sum diminishes, and resetting the current sum to the current number if it turns positive; return the minimum sum once the iteration concludes.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\""
    },
    {
        "task_id": "115",
        "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
        "instruction 1": "Iterate through each row of the grid, and for each row, calculate the total units of water represented by 1s.",
        "instruction 2": "Divide the total units of water in each row by the bucket capacity to determine the number of times the bucket needs to be lowered, summing these values across all rows to get the final output.",
        "new_prompt": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n\n    Instructions:\n        Iterate through each row of the grid and calculate the total units of water represented by 1s for each row. \n        Then, divide the total units of water in each row by the bucket capacity to determine how many times the bucket needs to be lowered, summing these values across all rows to obtain the final output.\n    \"\"\""
    },
    {
        "task_id": "116",
        "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "instruction 1": "Implement the sorting functionality by creating a custom sort key that first counts the number of ones in the binary representation using `bin(x).count('1')`, and then sorts by the decimal value for ties.",
        "instruction 2": "Use Python's built-in `sorted()` function with the custom sort key to sort the array and return the sorted result.",
        "new_prompt": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    the number of ones in their binary representation in ascending order. To achieve this,\n    create a custom sort key that first counts the number of ones using `bin(x).count('1')`\n    and then sorts by decimal value to resolve any ties. Finally, utilize Python's built-in \n    `sorted()` function with this custom key to sort the array and return the sorted result.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\""
    },
    {
        "task_id": "117",
        "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
        "instruction 1": "Split the input string s into individual words using Python's `split()` method to create a list of words.",
        "instruction 2": "Define a helper function to count the number of consonants in a word, then iterate through the list of words and return a new list containing only those words that have exactly n consonants.",
        "new_prompt": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. To achieve this, \n    first, split the input string s into individual words using Python's `split()` \n    method to create a list of words. Then, define a helper function to count \n    the number of consonants in a word, and iterate through the list of words \n    to return a new list containing only those words that have exactly n \n    consonants. If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\""
    },
    {
        "task_id": "118",
        "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
        "instruction 1": "Iterate through the characters of the word from right to left, checking for consonants and tracking the closest vowel found between them.",
        "instruction 2": "If a vowel is found after a consonant, store it and continue until the next consonant, then return that vowel; if no such vowel exists between two consonants, return an empty string.",
        "new_prompt": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels at the beginning and ending don't count. Return an empty string if you didn't\n    find any vowel that meets the above condition. \n\n    You may assume that the given string contains only English letters.\n\n    To achieve this, iterate through the characters of the word from right to left, checking for consonants and tracking the closest vowel found between them. \n    If a vowel is found after a consonant, store it and continue until you encounter the next consonant; then return that vowel. If no such vowel exists between two consonants, return an empty string.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\""
    },
    {
        "task_id": "119",
        "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "instruction 1": "Identify the input parameter as a list of two strings consisting of parentheses, and count the number of open '(' and close ')' parentheses in each string to determine their balance.",
        "instruction 2": "Check the total count of open and close parentheses from both strings to determine if they can be concatenated in either order to form a balanced string, returning 'Yes' if they can form a good string and 'No' otherwise.",
        "new_prompt": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. Your job is to identify the input parameter as a list of two strings consisting of parentheses, and count the number of open '(' and close ')' parentheses in each string to determine their balance. Additionally, check the total count of open and close parentheses from both strings to determine if they can be concatenated in either order to form a balanced string. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''"
    },
    {
        "task_id": "120",
        "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
        "instruction 1": "Sort the input array arr in descending order to prioritize the maximum values.",
        "instruction 2": "Slice the sorted array to obtain the first k elements and return this slice as a sorted list in ascending order.",
        "new_prompt": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n        \n    Instructions:\n        1. First, arrange the input array arr in descending order to focus on the highest values.\n        2. Then, select the first k elements from this sorted array and return them as a sorted list in ascending order.\n    \"\"\""
    },
    {
        "task_id": "121",
        "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "instruction 1": "Iterate over the list using an index to identify which elements are in even positions, specifically using the range function with a step of 2 starting from index 0.",
        "instruction 2": "Within the loop, check if the current element is odd using the modulus operator and, if so, accumulate the sum into a variable, then return the final sum after the iteration.",
        "new_prompt": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all the odd elements located at even indices. \n    Iterate over the list with an index that identifies elements in even positions by using the range function with a step of 2 starting from index 0. Within the loop, check if the current element is odd with the modulus operator; if it is, add it to a cumulative sum, which should be returned after completing the iteration.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\""
    },
    {
        "task_id": "122",
        "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "instruction 1": "Initialize a variable to hold the sum and iterate through the first k elements of the input array arr, checking if each element has at most two digits using an if condition.",
        "instruction 2": "If an element meets the criteria, add it to the sum variable and return the final sum after the loop ends.",
        "new_prompt": "```python\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    To accomplish this, initialize a variable to store the sum and iterate through the first k elements of the input array arr, checking if each element has at most two digits using an if condition. If an element meets this criterion, add it to the sum variable. Finally, return the computed sum after completing the loop.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n```"
    },
    {
        "task_id": "123",
        "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
        "instruction 1": "Implement a loop that generates the Collatz sequence starting from the input integer n, storing only the odd numbers encountered in a list.",
        "instruction 2": "Sort the list of odd numbers in increasing order and return the sorted list as the final output.",
        "new_prompt": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that comprises only the odd numbers found in the Collatz sequence.\n\n    The Collatz conjecture is a mathematical hypothesis regarding a sequence defined as follows: begin with any positive integer n. Each subsequent term is derived from the previous one: if the previous term is even, the next term is half of the previous term; if the previous term is odd, the next term is three times the previous term plus one. The conjecture posits that regardless of the initial value of n, the sequence will always culminate in 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. The output list should be sorted in ascending order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The Collatz sequence for 5 is [5, 16, 8, 4, 2, 1], thus the odd numbers included are only 1 and 5.\n    \"\"\""
    },
    {
        "task_id": "124",
        "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
        "instruction 1": "Use regular expressions to check if the date string follows the format 'mm-dd-yyyy' and extract the month, day, and year as integers.",
        "instruction 2": "Implement the validation rules for the extracted month and day values, ensuring that they comply with the expected range for each month, and return True or False based on the validity.",
        "new_prompt": "```python\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. Use regular expressions to check if the date string follows the format 'mm-dd-yyyy' and extract the month, day, and year as integers. The number of days is not less than 1 or higher than 31 for months 1,3,5,7,8,10,12. For months 4,6,9,11, the number of days is not less than 1 or higher than 30 days. For the month 2, the number of days is not less than 1 or higher than 29.\n    3. The months should not be less than 1 or higher than 12.\n    4. Implement the validation rules for the extracted month and day values, ensuring that they comply with the expected range for each month, and return True or False based on the validity.\n    5. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n```"
    },
    {
        "task_id": "125",
        "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "instruction 1": "Check if the input string contains any whitespace; if it does, split the string on whitespace and return the resulting list of words.",
        "instruction 2": "If there are no whitespaces, check for commas and split on those; if neither exists, count the number of lower-case letters in odd positions of the alphabet (1, 3, 5, ...) and return that count.",
        "new_prompt": "def split_words(txt):\n    '''\n    Given a string of words, if the input string includes any whitespace, split it on whitespace and return the resulting list of words. If there are no whitespaces, check for commas and split the string on those; if neither are present, count the number of lower-case letters with odd positions in the alphabet (1, 3, 5, ...) and return that count.\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''"
    },
    {
        "task_id": "126",
        "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n",
        "instruction 1": "Check if the list is sorted in ascending order by comparing each element to the next and ensure that no adjacent elements are equal.",
        "instruction 2": "Count the occurrences of each element in the list and ensure that no element appears more than once using a dictionary or collections.Counter, returning False if any have duplicates.",
        "new_prompt": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order by comparing each element to the next, and ensure\n    that no adjacent elements are equal. Additionally, count the occurrences\n    of each element in the list using a dictionary or collections.Counter, \n    ensuring that no element appears more than once; return False if \n    any have duplicates. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''"
    },
    {
        "task_id": "127",
        "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
        "instruction 1": "Calculate the overlap of the two intervals by determining the maximum of the two start points and the minimum of the two end points to establish the intersection range.",
        "instruction 2": "Determine the length of the intersection and check if it is prime by implementing a helper function to evaluate primality, returning 'YES' if it is prime and 'NO' if it is not or if there is no intersection.",
        "new_prompt": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to calculate the overlap of the two intervals by determining the maximum of the two start points and the minimum of the two end points to establish the intersection range, \n    and then check whether the length of the intersection of these two intervals is a prime number. \n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\""
    },
    {
        "task_id": "128",
        "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "instruction 1": "Check if the input array is empty and return None if it is; otherwise, initialize two variables to store the sum of magnitudes and the product of signs (starting with 1).",
        "instruction 2": "Iterate through the array, updating the sum of magnitudes with the absolute value of each number and updating the product of signs by multiplying the current product with 1 for positive numbers, -1 for negative numbers, and 0 if a zero is encountered; finally, return the computed sum of magnitudes multiplied by the product of signs.",
        "new_prompt": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr. First, check if the input array is empty and return None if it is; \n    otherwise, initialize two variables to store the sum of magnitudes \n    and the product of signs (starting with 1). Then, iterate through the \n    array, updating the sum of magnitudes with the absolute value of each number \n    and the product of signs by multiplying the current product with 1 for positive \n    numbers, -1 for negative numbers, and 0 if a zero is encountered; \n    finally, return the computed sum of magnitudes multiplied by the product of signs.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\""
    },
    {
        "task_id": "129",
        "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "instruction 1": "Define the function to take in the grid and k as parameters, and initialize variables to track the minimum path found and its corresponding path values.",
        "instruction 2": "Implement a recursive or iterative method to traverse the grid, ensuring that you keep track of the current path and only proceed to valid neighbor cells, utilizing a priority queue or backtracking to maintain the path order and update the minimum path when a valid length k path is found.",
        "new_prompt": "```python\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with your current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path goes through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n\n    Define the function to accept the grid and k as inputs, while initializing variables to keep track of the minimum path found along with its corresponding path values. Then, employ either a recursive or iterative approach to navigate through the grid, ensuring that the current path is monitored and movement is restricted to valid neighboring cells. Utilize a priority queue or backtracking technique to maintain the order of the path and update the minimum path whenever a valid length k path is discovered.\n    \"\"\"\n```"
    },
    {
        "task_id": "130",
        "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
        "instruction 1": "Create a list to store the first n + 1 numbers of the Tribonacci sequence, initializing the first three values based on the given recurrence relation.",
        "instruction 2": "Implement a loop that iterates from 3 to n, applying the defined rules for even and odd n to compute each successive number in the sequence, appending each result to the list, then return the list.",
        "new_prompt": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, create a list to store the first n + 1 numbers of the Tribonacci sequence, initializing the first three values based on the given recurrence relation, and then implement a loop that iterates from 3 to n, applying the defined rules for even and odd n to compute each successive number in the sequence, appending each result to the list, and finally return the list.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\""
    },
    {
        "task_id": "131",
        "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
        "instruction 1": "Extract the individual digits of the number n by converting it to a string and then iterating over each character to convert them back to integers.",
        "instruction 2": "Initialize a product variable to 1 and a flag to check for odd digits; iterate through the digits, multiplying the odd digits together and updating the flag, then return the product if at least one odd digit was found, otherwise return 0.",
        "new_prompt": "def digits(n):\n    \"\"\"Given a positive integer n, extract the individual digits by converting n to a string and iterating over each character to convert them back to integers. Initialize a product variable to 1 and a flag to check for odd digits; iterate through the digits while multiplying the odd digits together and updating the flag. Return the product if at least one odd digit was found, otherwise return 0.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\""
    },
    {
        "task_id": "132",
        "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n",
        "instruction 1": "Iterate through the characters of the input string while maintaining a count of open and close brackets, ensuring to track when a nested structure is identified by having at least one unmatched open bracket remaining.",
        "instruction 2": "Return True if there is at least one unmatched open bracket remaining at the end of the iteration, indicating valid nesting, otherwise return False.",
        "new_prompt": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    Iterate through the characters of the input string while maintaining a count of open and close brackets, ensuring to track when a nested structure is identified by having at least one unmatched open bracket remaining. \n    Return True if there is at least one unmatched open bracket remaining at the end of the iteration, indicating valid nesting; otherwise, return False.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''"
    },
    {
        "task_id": "133",
        "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
        "instruction 1": "Begin by importing the `math` module to use the `ceil()` function for rounding each element in the list to the upper integer value.",
        "instruction 2": "Use a list comprehension to apply the `ceil()` function to each element in the input list, then calculate the sum of the squares of these rounded values using the `sum()` function with a generator expression.",
        "new_prompt": "```python\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int (Ceiling) first. \n    Begin by importing the `math` module to use the `ceil()` function for rounding each element in the list to the upper integer value. \n    Use a list comprehension to apply the `ceil()` function to each element in the input list, then calculate the sum of the squares of these rounded values using the `sum()` function with a generator expression.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n```"
    },
    {
        "task_id": "134",
        "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n",
        "instruction 1": "Strip any trailing whitespace from the input string to ensure the last character is accurately evaluated, then check if the string is empty after stripping.",
        "instruction 2": "Use string indexing to access the last character of the stripped string, and verify if it is an alphabetical character and not followed by any characters or spaces, returning True or False accordingly.",
        "new_prompt": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    First, strip any trailing whitespace from the input string to ensure \n    the last character is accurately evaluated; then check if the string \n    is empty after stripping. Use string indexing to access the last \n    character of the stripped string, and verify if it is an alphabetical \n    character that is not followed by any characters or spaces, returning \n    True or False accordingly.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''"
    },
    {
        "task_id": "135",
        "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "instruction 1": "Iterate through the list `arr` in reverse order, comparing each element with the one before it to find the largest index where the current element is less than the previous one.",
        "instruction 2": "Return the found index if it exists, otherwise return -1 if no such index is found.",
        "new_prompt": "```python\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. This can be done by iterating through the list `arr` in reverse order to compare each element with the one before it, aiming to find the largest index where the current element is less than the previous one. If such an index is found, return it; otherwise, if no such index exists, return -1. The given array will not contain duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n```"
    },
    {
        "task_id": "136",
        "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "instruction 1": "Iterate through the list to identify negative integers and track the largest negative integer, while simultaneously tracking the smallest positive integer.",
        "instruction 2": "Return a tuple containing the largest negative integer found (or None if none exist) and the smallest positive integer found (or None if none exist).",
        "new_prompt": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. To achieve this, iterate through the list\n    to identify negative integers and track the largest negative integer, \n    while also tracking the smallest positive integer. Return a tuple \n    containing the largest negative integer found (or None if none exist) \n    and the smallest positive integer found (or None if none exist).\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''"
    },
    {
        "task_id": "137",
        "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n",
        "instruction 1": "Determine the input types of a and b, ensuring to handle comparisons between integers, floats, and strings that represent real numbers, with special attention to the potential comma in string representations of floats.",
        "instruction 2": "Implement logic to compare the two variables, converting any string representations to their appropriate float or integer types when necessary, and return the larger value or None if they are equal.",
        "new_prompt": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal. Additionally, determine the input types of a and b, ensuring to handle comparisons\n    between integers, floats, and strings that represent real numbers, with special attention to the potential comma\n    in string representations of floats. Implement logic to compare the two variables, converting any string \n    representations to their appropriate float or integer types when necessary, and return the larger value or None\n    if they are equal.\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\""
    },
    {
        "task_id": "138",
        "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
        "instruction 1": "Determine the logic for checking if the number n can be expressed as the sum of exactly 4 positive even numbers and identify that the smallest sum possible is 8 (2+2+2+2).",
        "instruction 2": "Return True if n is greater than or equal to 8 and is an even number, otherwise return False.",
        "new_prompt": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be expressed as the sum of exactly 4 positive even numbers.\n    The smallest sum possible is 8 (2+2+2+2). \n    Return True if n is greater than or equal to 8 and is an even number; otherwise, return False.\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\""
    },
    {
        "task_id": "139",
        "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "instruction 1": "Define the function to accept an integer parameter n and initialize a variable to hold the result of the special factorial calculation.",
        "instruction 2": "Use a loop to iterate from n down to 1, calculating the factorial for each integer and multiplying it to the result, then return the final computed value.",
        "new_prompt": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    Define the function to accept an integer parameter n and initialize a variable to hold the result of the special factorial calculation. Use a loop to iterate from n down to 1, calculating the factorial for each integer and multiplying it to the result, then return the final computed value.\n    \"\"\""
    },
    {
        "task_id": "140",
        "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
        "instruction 1": "Check the input string for leading and trailing spaces, and replace them with underscores before processing the rest of the string.",
        "instruction 2": "Replace sequences of spaces in the text: replace any instance of more than 2 consecutive spaces with a hyphen, and replace single or double spaces with underscores.",
        "new_prompt": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, first check for leading and trailing spaces and replace them with underscores. \n    Then, replace all single and double spaces with underscores, and for any instance of more than 2 consecutive spaces, \n    replace them with a hyphen. \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\""
    },
    {
        "task_id": "141",
        "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
        "instruction 1": "Implement a function that checks for the presence of exactly one dot in the file name, and split the file name into the substring before the dot and the substring after the dot for further validation.",
        "instruction 2": "Verify that the substring before the dot starts with a letter and contains at most three digits, and that the substring after the dot is one of the allowed extensions ['txt', 'exe', 'dll'], returning 'Yes' if all conditions are met and 'No' otherwise.",
        "new_prompt": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name must contain exactly one dot '.', which should be used to split the name \n      into the substring before the dot and the substring after the dot for further validation.\n    - The substring before the dot should not be empty, must start with a letter from \n      the Latin alphabet ('a'-'z' and 'A'-'Z'), and may contain at most three digits.\n    - The substring after the dot must be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a Latin alphabet letter)\n    \"\"\""
    },
    {
        "task_id": "142",
        "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "instruction 1": "Iterate through the list with their indices, checking each index to determine if it is a multiple of 3 or 4, applying the appropriate transformation (squaring or cubing) to the elements based on the condition.",
        "instruction 2": "Keep a running total of the transformed values and return the final sum after completing the iteration over the list.",
        "new_prompt": "```python\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    The function will iterate through the list with their indices, checking each index to apply the appropriate transformation (squaring or cubing) \n    based on whether it is a multiple of 3 or 4, while maintaining a running total of the transformed values and returning the final sum after completing the iteration.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n```"
    },
    {
        "task_id": "143",
        "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
        "instruction 1": "Split the input sentence into a list of words by using the `split()` method, and define a helper function to check if the length of each word is a prime number.",
        "instruction 2": "Use a list comprehension to filter the words based on the prime length criteria, and then join the filtered words into a new string with spaces to form the final output.",
        "new_prompt": "```python\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    To achieve this, first split the input sentence into a list of words using the `split()` method, \n    and define a helper function to check if the length of each word is a prime number. \n    Then, utilize a list comprehension to filter the words based on the prime length criteria, \n    and finally join the filtered words into a new string with spaces to form the output.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n```"
    },
    {
        "task_id": "144",
        "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
        "instruction 1": "Parse the string fractions x and n to extract their numerators and denominators, converting them to integers for mathematical operations.",
        "instruction 2": "Multiply the numerators of x and n and divide by the product of their denominators, then check if the result is a whole number by verifying if the modulo of the result with 1 equals zero.",
        "new_prompt": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    To achieve this, first parse the string fractions x and n to extract their numerators and denominators, converting them to integers for mathematical operations. Then, multiply the numerators of x and n and divide by the product of their denominators, checking if the result is a whole number by verifying if the modulo of the result with 1 equals zero.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\""
    },
    {
        "task_id": "145",
        "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "instruction 1": "Define a helper function that calculates the sum of the digits of a given integer, which will be used as a key for sorting.",
        "instruction 2": "Use Python's built-in `sorted()` function with a custom key that considers the digit sum and the original index of the elements to sort the input list.",
        "new_prompt": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in the original list. \n    Additionally, define a helper function to calculate the sum of the digits of a given integer, which will be used as a sorting key. \n    Finally, utilize Python's built-in `sorted()` function with a custom key that incorporates both the digit sum and the original index for sorting the input list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\""
    },
    {
        "task_id": "146",
        "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "instruction 1": "Define the input parameter as a list of numbers and initialize a counter to track the number of qualifying elements.",
        "instruction 2": "Iterate through each number in the list, check if it is greater than 10, extract its first and last digits, confirm that both are odd, and increment the counter accordingly, then return the counter.",
        "new_prompt": "def specialFilter(nums):\n    \"\"\"Define the input parameter as a list of numbers and write a function \n    that takes this list as input and returns the count of elements that are \n    greater than 10, where both the first and last digits of each number are \n    odd (1, 3, 5, 7, 9). To achieve this, initialize a counter to track the \n    number of qualifying elements. Iterate through each number in the list, \n    checking if it is greater than 10, extracting its first and last digits, \n    confirming that both are odd, and incrementing the counter accordingly. \n    Finally, return the counter. \n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\""
    },
    {
        "task_id": "147",
        "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "instruction 1": "Create an integer array a of length n where each element a[i] is calculated using the formula a[i] = i * i - i + 1 for every index i from 1 to n.",
        "instruction 2": "Use three nested loops to iterate through all combinations of indices (i, j, k) such that i < j < k, check if the sum a[i] + a[j] + a[k] is a multiple of 3, and count valid triples.",
        "new_prompt": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. Create an integer array a of length n where each element a[i] is calculated using the formula a[i] = i * i - i + 1 for every index i from 1 to n. \n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3 by using three nested loops to iterate through all combinations of indices (i, j, k) and check for valid triples.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\""
    },
    {
        "task_id": "148",
        "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "instruction 1": "Define a list of planets in order of their proximity to the sun, and verify if the provided planet1 and planet2 are valid planet names by checking their presence in this list.",
        "instruction 2": "Determine the indices of planet1 and planet2 in the list, extract the sublist of planets between these indices, and return this sublist as a tuple, ensuring to sort the extracted planets by their proximity to the sun.",
        "new_prompt": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should first establish a list of planets arranged by their closeness \n    to the sun and check if planet1 and planet2 are valid names by confirming their \n    inclusion in this list. Then, it should identify the indices of these planets, \n    create a sublist of the planets situated between these indices, and return this \n    sublist as a tuple, ensuring the planets are sorted by their proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''"
    },
    {
        "task_id": "149",
        "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "instruction 1": "Define the input parameter as a list of strings and filter out the strings with odd lengths using a list comprehension.",
        "instruction 2": "Sort the remaining strings first by their length and, for those of the same length, alphabetically, then return the sorted list.",
        "new_prompt": "def sorted_list_sum(lst):\n    \"\"\"Define the input parameter as a list of strings and use a list comprehension to filter out the strings with odd lengths. \n    The function should then sort the remaining strings by their length and alphabetically for those with the same length, \n    returning the sorted list in ascending order. \n    The input will always be a list of strings, which may contain duplicates, and is never an array of numbers. \n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\""
    },
    {
        "task_id": "150",
        "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
        "instruction 1": "Implement a function that checks if the input number n is a prime number by testing divisibility with all integers up to the square root of n.",
        "instruction 2": "Return the value of x if n is prime and return the value of y if n is not prime.",
        "new_prompt": "def x_or_y(n, x, y):\n    \"\"\"A simple program that checks if the input number n is a prime number by testing divisibility with all integers up to the square root of n. It should return the value of x if n is prime and return the value of y if n is not prime.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\""
    },
    {
        "task_id": "151",
        "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "instruction 1": "Define the function `double_the_difference` that takes a list as an argument and initialize a variable to accumulate the sum of squares of the valid odd integers from the list.",
        "instruction 2": "Iterate through each element in the list, check if it is a positive integer and odd, square it, and add the result to the accumulator, then return the total sum after the iteration.",
        "new_prompt": "```python\ndef double_the_difference(lst):\n    '''\n    Define the function `double_the_difference` that takes a list as an argument and returns the sum of squares of the positive odd integers in the list. \n    Ignore any negative numbers or non-integer values.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0. Iterate through each element in the list, checking if it is a positive integer and odd, square it, and add the result to an accumulator variable, then return the total sum after the iteration.\n    '''\n```"
    },
    {
        "task_id": "152",
        "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two lists of equal length, one representing the actual scores and the other representing the guesses.",
        "instruction 2": "Use a list comprehension to iterate through both lists simultaneously, calculating the absolute difference between corresponding elements, and return a new list where each element indicates the difference or 0 if the guess was correct.",
        "new_prompt": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two lists of equal length, one representing the actual scores and the other representing the guesses, where each index corresponds to a match. \n    Use a list comprehension to iterate through both lists simultaneously, calculating the absolute difference between corresponding elements. \n    Return a new list indicating how far off each guess was: if the guess is correct, the value is 0; otherwise, it is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\""
    },
    {
        "task_id": "153",
        "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
        "instruction 1": "Define a helper function to calculate the strength of each extension based on the number of uppercase and lowercase letters, returning the result as CAP - SM.",
        "instruction 2": "Iterate through the provided list of extensions, applying the strength calculation, and keep track of the maximum strength found along with the corresponding extension name, finally returning the formatted string with the class name and strongest extension.",
        "new_prompt": "```python\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \n    Define a helper function to calculate the strength of each extension based on the number of uppercase and lowercase letters, returning the result as CAP - SM. \n    Iterate through the provided list of extensions, applying the strength calculation, and keep track of the maximum strength found along with the corresponding extension name, finally returning the formatted string with the class name and strongest extension.\n    \"\"\"\n```"
    },
    {
        "task_id": "154",
        "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two strings, a and b, and concatenate string b with itself to generate all possible rotations of b as substrings.",
        "instruction 2": "Use the 'in' operator to check if b or any of its rotations (within the concatenated version) exist as a substring in string a, returning True or False accordingly.",
        "new_prompt": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 strings, referred to as a and b. The task is to concatenate string b with itself to create all possible rotations of b and then check if any of these rotations, including b itself, is a substring of the first string a. \n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\""
    },
    {
        "task_id": "155",
        "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "instruction 1": "Convert the given integer to its absolute value and then convert it to a string to iterate over each digit.",
        "instruction 2": "Initialize two counters for even and odd digits, loop through each digit, check if it's even or odd, update the counters accordingly, and return the counters as a tuple.",
        "new_prompt": "```python\ndef even_odd_count(num):\n    \"\"\"Given an integer, first convert it to its absolute value and then to a string to iterate over each digit. \n    Initialize two counters for even and odd digits, loop through each digit, check if it's even or odd, \n    update the counters accordingly, and return the counts as a tuple.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n```"
    },
    {
        "task_id": "156",
        "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "instruction 1": "Define a mapping of integer values to their corresponding Roman numeral representations, focusing on those necessary to represent values up to 1000.",
        "instruction 2": "Iterate through the mapping, subtracting the integer values from the input number and appending the corresponding Roman numeral symbols to the result string while ensuring the output is in lowercase.",
        "new_prompt": "```python\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase. Define a mapping of integer values to their corresponding Roman numeral representations, focusing on those necessary to represent values up to 1000. Then, iterate through the mapping, subtracting the integer values from the input number and appending the corresponding Roman numeral symbols to the result string while ensuring the output is in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n```"
    },
    {
        "task_id": "157",
        "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "instruction 1": "Check if the squares of the lengths of the two shorter sides (a and b) add up to the square of the length of the longest side (c) to determine if the triangle is a right-angled triangle.",
        "instruction 2": "Return True if the condition from instruction 1 is satisfied, otherwise return False.",
        "new_prompt": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, determine if they form a right-angled triangle by checking if the sum of the squares of the two shorter sides (a and b) equals the square of the longest side (c). Return True if this condition is met; otherwise, return False.\n    A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"
    },
    {
        "task_id": "158",
        "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "instruction 1": "Loop through each string in the input list to count the unique characters in each string using a set and keep track of the maximum count and the corresponding string.",
        "instruction 2": "If two strings have the same count of unique characters, compare them lexicographically and update the current maximum if the new string comes first, then return the string with the maximum unique characters.",
        "new_prompt": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    To achieve this, loop through each string in the input list to count \n    the unique characters in each string using a set, keeping track of the \n    maximum count and the corresponding string. In cases where two strings \n    have the same count of unique characters, compare them lexicographically \n    and update the current maximum if the new string comes before the \n    existing one, then return the string with the maximum unique characters.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\""
    },
    {
        "task_id": "159",
        "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
        "instruction 1": "Calculate the total number of eaten carrots after meals by adding the initial number of eaten carrots to the minimum of the need and remaining carrots.",
        "instruction 2": "Determine the number of remaining carrots after meals by subtracting the carrots eaten in this meal from the remaining, then return an array with the total eaten carrots and the remaining carrots.",
        "new_prompt": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    You should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    If there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    To find the total number of eaten carrots after meals, add the initial number of eaten carrots to the minimum of the need and remaining carrots. \n    To determine the number of remaining carrots after meals, subtract the carrots eaten in this meal from the remaining, then return an array with the total eaten carrots and the remaining carrots.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\""
    },
    {
        "task_id": "160",
        "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
        "instruction 1": "Extract the first operand from the operand list and initialize a variable to hold the result, then iterate through the operator list and corresponding operands to build the expression step-by-step by applying each operator to the running result and the next operand.",
        "instruction 2": "Use a series of conditional statements to determine which operation to perform based on the current operator, and update the result accordingly, finally returning the evaluated result after processing all operators and operands.",
        "new_prompt": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists: operator and operand. The first list contains basic algebra operations, while \n    the second list consists of integers. Utilize the provided lists to construct the algebraic \n    expression and return its evaluation.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        - Begin by extracting the first operand from the operand list and initializing a variable to hold the result. \n        - Iterate through the operator list and the corresponding operands, building the expression step-by-step by \n          applying each operator to the current result and the next operand. \n        - Use a series of conditional statements to determine the specific operation based on the current operator, \n          and update the result accordingly. Finally, return the evaluated result after processing all operators and operands.\n        - The length of the operator list is equal to the length of the operand list minus one.\n        - The operand list consists of non-negative integers.\n        - The operator list contains at least one operator, while the operand list includes at least two operands.\n    \"\"\""
    },
    {
        "task_id": "161",
        "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "instruction 1": "Check each character in the string s; if the character is a letter, change its case, otherwise keep it unchanged.",
        "instruction 2": "If no letters are found in the string, reverse the entire string and return the result.",
        "new_prompt": "def solve(s):\n    \"\"\"You are given a string s.\n    Check each character in the string; if it is a letter, change its case from lower to upper or vice versa; otherwise, keep it unchanged. \n    If no letters are found in the string, reverse the entire string and return the result.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\""
    },
    {
        "task_id": "162",
        "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "instruction 1": "Check if the input 'text' is an empty string; if so, return None immediately.",
        "instruction 2": "If 'text' is not empty, use the 'hashlib' library to create an md5 hash of the string and return the hexadecimal representation of that hash.",
        "new_prompt": "```python\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', check if it is empty; if so, return None immediately. \n    If 'text' is not empty, use the 'hashlib' library to create its md5 hash and return the hexadecimal representation of that hash.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n```"
    },
    {
        "task_id": "163",
        "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
        "instruction 1": "Identify the input parameters as two integers a and b, and determine the inclusive range between them by calculating the minimum and maximum of a and b.",
        "instruction 2": "Use a list comprehension to iterate through the range of numbers between the minimum and maximum values, filtering for even digits and returning the sorted list of these even digits.",
        "new_prompt": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, determine the inclusive range of even digits between the smaller and larger of the two integers. Return this list of even digits in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\""
    }
]