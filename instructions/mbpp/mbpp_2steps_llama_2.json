[
    {
        "task_id": 2,
        "prompt": "Write a function to find the shared elements from the given two lists.",
        "instruction 1": "Identify the input parameters as two lists of elements and determine the common elements between them using set operations or iterating through the lists.",
        "instruction 2": "Use Python's set intersection or list comprehension to find the common elements and return the resulting list, possibly converting the result to a list if necessary."
    },
    {
        "task_id": 3,
        "prompt": "Write a python function to identify non-prime numbers.",
        "instruction 1": "Identify the input parameter as a single integer or a list of integers to be checked for primality, and initialize a set of prime numbers containing the number 2 as the only prime number by default.",
        "instruction 2": "Use a loop to check each number in the input list or range, starting from the number 3; for each number, check for divisibility by each number in the set of prime numbers, incrementally updating the set with numbers that are found to be prime; finally, return a new set or list of numbers that are not in the set of prime numbers."
    },
    {
        "task_id": 4,
        "prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "instruction 1": "Sort the input list of numbers in descending order, then return the first n elements using list slicing.",
        "instruction 2": "Use the built-in Python `sorted()` function with the reverse=True argument to sort the list in descending order, then use list slicing with its starting index at 0 and end index at the length of the list, but increment the end index by n to slice the desired number of elements"
    },
    {
        "task_id": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "instruction 1": "Convert the two input numbers into binary, then use the XOR operator (^) to identify the bits that differ between them. Initialize two counters, one to count the total number of bits and one to count the number of bits that differ.",
        "instruction 2": "Use an if-else statement to check if the count of different bits is equal to 1. Return True if the count is 1 and False otherwise."
    },
    {
        "task_id": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string.",
        "instruction 1": "Identify the input parameter as a string and separate it into individual words, then check each word's length to filter out words with a length less than 4.",
        "instruction 2": "Use a list comprehension to create a new list containing only the words that meet the length condition, then return the resulting list."
    },
    {
        "task_id": 8,
        "prompt": "Write a function to find squares of individual elements in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers and create a new list to store the squares of each element.",
        "instruction 2": "Use a loop to iterate over the elements in the input list, calculate the square of each element using the ** operator, and append the result to the new list, then return the new list."
    },
    {
        "task_id": 9,
        "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "instruction 1": "Identify the input parameter as a string, and then calculate the length of the string.",
        "instruction 2": "Use a loop to iterate and rotate the string by 1 position at a time, counting the number of rotations, until the rotated string is the same as the original string, and return the count of rotations."
    },
    {
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "instruction 1": "Write a Python function with two parameters: the input string and the character to be removed, and strip the first occurrence of the character using the `str.replace` method, then strip the last occurrence using the `str.rreplace` method",
        "instruction 2": "Merge the results of the two replacement operations using the `str.replace` method again, then return the resulting string"
    },
    {
        "task_id": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "instruction 1": "Identify the input parameter as a 2D list (matrix) and sort its elements according to the sum of the rows in ascending order, using Python's built-in `sorted()` function with a custom key function.",
        "instruction 2": "Use a custom key function within `sorted()` to calculate the sum of each row, and then return the sorted 2D list (matrix)."
    },
    {
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.",
        "instruction 1": "Identify the input parameters as a, b, and h that represent the base length, base width, and height of the triangular prism, and calculate the base area and triangular prism volume using the formulas.",
        "instruction 2": "Use Python's mathematical functions to calculate the area using the formula (a * b) / 2 and the volume using the formula (area * h), and return the calculated volume."
    },
    {
        "task_id": 16,
        "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "instruction 1": "Identify the input parameter as a string and use a regular expression pattern to match sequences of lowercase letters joined with an underscore.",
        "instruction 2": "Use the `re` module and `findall()` function to find all matches of the pattern in the input string, and return True if any matches are found, False otherwise."
    },
    {
        "task_id": 17,
        "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
        "instruction 1": "Define a Python function with a single input parameter representing the side length of the square, and calculate the perimeter by multiplying the side length by 4.",
        "instruction 2": "Return the calculated perimeter as the result of the function."
    },
    {
        "task_id": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "instruction 1": "Identify the input parameters as two strings and initialize an empty string to store the result.",
        "instruction 2": "Use Python's list comprehension and the `in` operator to create a new string that excludes characters from the second string from the first string, then return the resulting string."
    },
    {
        "task_id": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "instruction 1": "Use an empty set to keep track of unique elements in the given array and iterate through the array to add each element to the set, returning False as soon as a duplicate element is found.",
        "instruction 2": "Use the built-in set data structure's __len__ method in combination with the in operator to check if the set's size is equal to the length of the input array, returning True if all unique elements were found and False if a duplicate was found."
    },
    {
        "task_id": 20,
        "prompt": "Write a function to check if the given number is woodball or not.",
        "instruction 1": "Identify the input parameter as an integer representing the number to be checked, and define a variable to store the woodball number (assuming it is a specific fixed value).",
        "instruction 2": "Use an if statement to compare the given number with the woodball number, returning a boolean True if they match and False otherwise."
    },
    {
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "instruction 1": "Identify the input parameter as an integer number and invert it to get its reverse, then calculate twice the reverse.",
        "instruction 2": "Compare the original number with the result of the previous step, and return True if the two are equal, indicating that the number is one less than twice its reverse; otherwise, return False."
    },
    {
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "instruction 1": "Identify the input parameter as a list of digits and sort the list in descending order to prioritize larger numbers.",
        "instruction 2": "Use a loop to construct all possible permutations of the sorted list of digits, then check each permutation to see if it can be converted to an integer and is greater than the current maximum value, and return the maximum value."
    },
    {
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "instruction 1": "Identify the input parameters as two integers and compare their signs by using the corresponding mathematical operators (>0, <0, or ==0) and logical operators (and, or).",
        "instruction 2": "Return a boolean value indicating whether the signs are opposite or not, using the logic that if one integer is positive and the other is negative, or vice versa, then they are opposite in sign."
    },
    {
        "task_id": 59,
        "prompt": "Write a function to find the nth octagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the octagonal number in a series, and calculate the formula for the nth octagonal number by using the formula 8*n^3 - 8*n.",
        "instruction 2": "Use the calculated formula to calculate the nth octagonal number, converting the result to an integer if necessary and returning it."
    },
    {
        "task_id": 61,
        "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "instruction 1": "Define a function that takes a string input and initialize a counter variable to zero, then iterate over all possible substrings of the input string, summing the digits of each substring and checking if the sum is equal to the length of the substring, incrementing the counter each time this condition is met.",
        "instruction 2": "Return the counter value, which now represents the total number of substrings with the sum of digits equal to their length."
    },
    {
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize a variable to store the smallest number.",
        "instruction 2": "Use a loop to iterate through the list and compare the current element with the smallest number variable, updating the variable with the smallest number found."
    },
    {
        "task_id": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "instruction 1": "Identify the input parameter as a list of tuples, where each tuple contains a pair of values, and extract all the pairs of values from the tuple list.",
        "instruction 2": "Initialize a variable to store the maximum difference found so far, then iterate through the pairs and calculate the absolute difference between each pair, updating the maximum difference if the current difference is greater, and finally return the maximum difference found."
    },
    {
        "task_id": 64,
        "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
        "instruction 1": "Identify the input parameter as a list of tuples and sort the list based on the second value of each tuple using Python's built-in `sorted()` function with a lambda function as the key.",
        "instruction 2": "Return the sorted list of tuples using the `sorted()` function and assign the result to a variable, which is the desired output."
    },
    {
        "task_id": 65,
        "prompt": "Write a function to flatten a list and sum all of its elements.",
        "instruction 1": "Identify the input parameter as a list of numbers or other iterable elements, and initialize a variable to store the sum.",
        "instruction 2": "Use a loop or a list comprehension to iterate over the elements in the input list, and update the sum variable with the addition of each element, finally returning the calculated sum."
    },
    {
        "task_id": 66,
        "prompt": "Write a python function to count the number of positive numbers in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers, and iterate through each element in the list to check if it is positive.",
        "instruction 2": "Use an if statement to count the number of positive numbers, incrementing a counter for each positive number found, and return the total count at the end of the iteration."
    },
    {
        "task_id": 67,
        "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "instruction 1": "Identify the input parameter as the Bell number Bell(n), and initialize a variable to store the number of ways to partition it",
        "instruction 2": "Use dynamic programming to find the number of ways to partition the Bell number, considering the number of ways to partition each subproblems and add it to the result"
    },
    {
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.",
        "instruction 1": "Identify the input parameter as a list of numbers, and define a function that checks if the list is either monotonically increasing or monotonically decreasing.",
        "instruction 2": "Compare adjacent elements in the list, and if the list is monotonically increasing, check if all elements are greater than the previous one; if the list is monotonically decreasing, check if all elements are less than the previous one, and return True if both conditions are met, otherwise return False."
    },
    {
        "task_id": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "instruction 1": "Identify the input parameters as a list and a sublist, and check if the sublist is a contiguous sequence of elements within the list.",
        "instruction 2": "Use a loop to iterate through the list and check if the sublist matches with a contiguous sequence of elements in the list, and return True if found, False otherwise."
    },
    {
        "task_id": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "instruction 1": "Define a function that accepts a list of tuples as input and initialize an empty variable to store the length of the first tuple.",
        "instruction 2": "Use a conditional statement to iterate over the list, comparing the length of each tuple with the initial stored length, returning False if any tuple has a different length, else True."
    },
    {
        "task_id": 71,
        "prompt": "Write a function to sort a list of elements.",
        "instruction 1": "Identify the input parameter as a list of elements and specify the sorting function or algorithm to be used (e.g., bubble sort, quick sort, etc.) or import a built-in sorting function from a library like the built-in 'sorted' function.",
        "instruction 2": "Implement the specified sorting function to sort the input list in ascending or descending order and return the sorted list."
    },
    {
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "instruction 1": "Identify the input parameter as an integer n and use mathematical techniques (e.g., factorization) to determine if it can be expressed as the difference of two perfect squares (a^2 - b^2) without adding extraneous calculations.",
        "instruction 2": "Check if the problem can be reduced to the form a*x*x - b*x - 0 = n by identifying the possible values of a and b that satisfy the equation and return True if such a solution is found, and False otherwise."
    },
    {
        "task_id": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "instruction 1": "Define a function that takes in two input parameters: a list of numbers and a list of patterns where each pattern in the list is a sequence of numbers.",
        "instruction 2": "Iterate through each pattern in the patterns list and check if the input list matches the pattern, returning True if a match is found, and False if no match is found."
    },
    {
        "task_id": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "instruction 1": "Identify the input parameter as a list of tuples and an integer k, then initialize an empty list to store the result.",
        "instruction 2": "Use a loop to iterate over the tuples in the list, check if all elements in the tuple are divisible by k using the modulus operator, and if True, add the tuple to the result list."
    },
    {
        "task_id": 77,
        "prompt": "Write a python function to find whether a number is divisible by 11.",
        "instruction 1": "Write a Python function and define an integer parameter n representing the number to check for divisibility by 11.",
        "instruction 2": "Return True if the remainder of n divided by 11 is 0, and False otherwise, using the modulus operator % and Python's built-in integer division operator //."
    },
    {
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.",
        "instruction 1": "Identify the input parameter as a word or string and use the `len()` function to get its length.",
        "instruction 2": "Use a conditional statement to check if the length of the word is odd (i.e., an integer value that is not divisible by 2), and return a boolean value indicating whether it is odd or not."
    },
    {
        "task_id": 80,
        "prompt": "Write a function to find the nth tetrahedral number.",
        "instruction 1": "Specify the input parameter as an integer n that represents the nth tetrahedral number and describe the formula for the calculation of tetrahedral numbers as (n*(n+1)*(n+2))/6.",
        "instruction 2": "Calculate the tetrahedral number using the specified formula and return it as the result."
    },
    {
        "task_id": 82,
        "prompt": "Write a function to find the volume of a sphere.",
        "instruction 1": "Identify the input parameter as a single number representing the radius of the sphere, and initialize a variable to store the calculated volume.",
        "instruction 2": "Use the formula for the volume of a sphere (4/3 * π * r^3) to calculate the volume and return the result."
    },
    {
        "task_id": 84,
        "prompt": "Write a function to find the nth number in the newman conway sequence.",
        "instruction 1": "Define a recursive function that takes an integer n as input, and recursively calculate the value of the 'next' number in the Newman-Conway sequence by adding the square of the number to itself and the next number up if it exists.",
        "instruction 2": "Use a loop to call the recursive function for n times, and then return the result, which is the nth number in the Newman-Conway sequence."
    },
    {
        "task_id": 85,
        "prompt": "Write a function to find the surface area of a sphere.",
        "instruction 1": "Identify the input parameter as a single floating-point number representing the radius of the sphere, and define a mathematical constant for the mathematical constant pi.",
        "instruction 2": "Use the formula for the surface area of a sphere (4 * pi * r^2) and divide it by the mathematical constant pi, then return the result as the total surface area of the sphere."
    },
    {
        "task_id": 86,
        "prompt": "Write a function to find nth centered hexagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the center hexagonal number to find, and define a variable to store the sum of the first n odd numbers",
        "instruction 2": "Calculate the centered hexagonal number by adding 1 and the triple the sum of the first n odd numbers, and return the result"
    },
    {
        "task_id": 87,
        "prompt": "Write a function to merge three dictionaries into a single dictionary.",
        "instruction 1": "Identify the input parameters as three dictionaries and define the merge operation. Ensure identical key handling is implemented to avoid overwriting values.",
        "instruction 2": "Use the `**` operator to update the first dictionary with the second and third dictionaries, and return the merged result."
    },
    {
        "task_id": 88,
        "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "instruction 1": "Create an empty dictionary to store the frequency of each element in the list, then iterate through the list using a for loop to count the occurrences of each element and update the dictionary with the element as the key and its frequency as the value.",
        "instruction 2": "Return the completed dictionary once the iteration is complete, providing a key-value pair for each unique element in the list, with the key being the element and the value being its corresponding frequency."
    },
    {
        "task_id": 89,
        "prompt": "Write a function to find the closest smaller number than n.",
        "instruction 1": "Identify the input parameter as an integer n and initialize a variable to store the closest smaller number, setting it to n-1.",
        "instruction 2": "Use a loop to iterate from n-1 down to 1, and return the first number that is smaller than n, which is the closest smaller number to n."
    },
    {
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.",
        "instruction 1": "Identify the input parameter as a string containing space-separated words, split the string into individual words, and store them in a list.",
        "instruction 2": "Use a loop to iterate over the list of words and find the maximum length of a word using the `len()` function, returning the length of the longest word."
    },
    {
        "task_id": 91,
        "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
        "instruction 1": "Identify the input parameters as a list of strings and a target string that needs to be searched.",
        "instruction 2": "Use a loop to iterate over each string in the list, and for each string, use the `in` operator to check if the target string is a substring, returning `True` if it is found and `False` otherwise."
    },
    {
        "task_id": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "instruction 1": "Identify the input parameter as an integer and create a function to check if the number is undulating, which is defined as a number that has a difference of more than one between two consecutive digits, and all digits are different.",
        "instruction 2": "Iterate through the digits of the number and compare the current digit with the previous one, if the difference is more than one, return False, otherwise, store the digit and check the next one, after checking all digits, return True if all conditions are met."
    },
    {
        "task_id": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "instruction 1": "Identify the input parameters as integers a and b, representing the base and exponent, and check if they are valid numbers.",
        "instruction 2": "Use Python's built-in '**' operator to calculate the result of 'a' raised to the power 'b' and return the result."
    },
    {
        "task_id": 94,
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "instruction 1": "Identify the input parameter as a list of tuples and initialize an empty variable to store the result.",
        "instruction 2": "Use Python's built-in `min()` function with a key argument set to the second element of each tuple to find the tuple with the smallest second value, then return the first value of that tuple."
    },
    {
        "task_id": 95,
        "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
        "instruction 1": "Identify the input parameter as a list of lists, and initialize an empty variable to store the length of the smallest list.",
        "instruction 2": "Iterate through the list of lists, checking the length of each sublist and updating the smallest length if a shorter list is found, then return the smallest list length."
    },
    {
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.",
        "instruction 1": "Identify the input parameter as an integer and iterate from 1 to the given integer, checking if the given integer is divisible by each number, and count the number of divisors.",
        "instruction 2": "Return the count of divisors found in the previous step."
    },
    {
        "task_id": 97,
        "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "instruction 1": "Flatten the given list of lists into a single list and identify the elements to count the frequency of each element in the flattened list.",
        "instruction 2": "Use a dictionary comprehension to iterate over the flattened list, counting the frequency of each element using the value as the key and the count as the value, then return the resulting dictionary."
    },
    {
        "task_id": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "instruction 1": "Identify the input parameter as a list of numbers and define a variable to store the product of the elements in the list and another variable to store the length of the list.",
        "instruction 2": "Use a loop to iterate over the list, multiplying each element with the product variable and calculate the length of the list using the `len()` function, then divide the product by the length and return the result."
    },
    {
        "task_id": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "instruction 1": "Write a function that accepts a decimal integer as input, and define variable `binary` to store the binary representation, using a while loop to continuously divide the input by 2 and append the remainder (0 or 1) to the `binary` string, from right to left.",
        "instruction 2": "Before returning the `binary` string, reverse it to ensure the most significant bit is at the beginning, and remove leading zeros by slicing the string starting from the first non-zero character."
    },
    {
        "task_id": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "instruction 1": "Identify the input parameter as an integer and initialize the next smallest palindrome by incrementing the input integer. Check if the incremented integer is a palindrome, if it is, return. Otherwise, decrement the integer until a palindrome is found.",
        "instruction 2": "Use a loop to check if the current integer is a palindrome, if it is return the current integer. If not, decrement the integer and repeat the check until a palindrome is found, then return the palindrome."
    },
    {
        "task_id": 101,
        "prompt": "Write a function to find the kth element in the given array using 1-based indexing.",
        "instruction 1": "Identify the input parameter as a list of numbers and an integer k that represents the 1-based position of the target element, then convert the 1-based indexing to 0-based indexing by subtracting 1 from k.",
        "instruction 2": "Use Python's list indexing to retrieve the kth element in the list, starting from 0, using the expression list[k-1], and return the result."
    },
    {
        "task_id": 102,
        "prompt": "Write a function to convert a snake case string to camel case string.",
        "instruction 1": "Define a function that takes a snake case string as input and initializes an empty string to store the camel case output. Split the input string into a list of words using the underscore character as a delimiter, and then iterate over the list to capitalize the first letter of each word except the first one.",
        "instruction 2": "Join the processed words into a single string and return the camel case string result, using the `join()` function to concatenate the words without spaces and adding the first capitalized letter of each word to the resulting string."
    },
    {
        "task_id": 103,
        "prompt": "Write a function to find the Eulerian number a(n, m).",
        "instruction 1": "Define the base cases for the Eulerian number a(n, m) with n and m as 1 to calculate the base cases for the function and handle the edge cases.",
        "instruction 2": "Use recursion to calculate the Eulerian number by considering the base cases and the recursive formula a(n, m) = a(n-1, m) + a(n-1, m-1) when m > 1, and return the calculated result."
    },
    {
        "task_id": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
        "instruction 1": "Identify the input parameter as a list of lists of strings, and use a loop to iterate over each sublist.",
        "instruction 2": "Use Python's built-in `sorted()` function with the key argument set to the `str.lower()` function to sort each sublist in-place, or return a new list of sorted sublists if the original list should not be modified."
    },
    {
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.",
        "instruction 1": "Identify the input parameter as a list of Boolean values and initialize a counter variable to zero.",
        "instruction 2": "Use a loop to iterate through the list and increment the counter variable for each True value, then return the count."
    },
    {
        "task_id": 106,
        "prompt": "Write a function to append the given list to the given tuples.",
        "instruction 1": "Identify the input parameters as a list and a tuple, then initialize an empty list. Assign the given tuple to a list using the `.extend()` method.",
        "instruction 2": "Return the original list by extending it with the elements of the given tuple using the `+` operator and return the result."
    },
    {
        "task_id": 108,
        "prompt": "Write a function to merge three lists into a single sorted list.",
        "instruction 1": "Identify the input parameters as three separate lists of elements and use an existing sorting function, such as the built-in sort() method, to sort the merged list",
        "instruction 2": "Use list concatenation to merge the input lists into a single list, then apply the sorting function, and finally return the sorted merged list"
    },
    {
        "task_id": 109,
        "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "instruction 1": "Define a function that takes two parameters: the binary string and the number of rotations, initialize a counter variable to zero, and iterate over each character in the string to count the number of odd values when the string is rotated.",
        "instruction 2": "Implement the rotation logic by using the modulus operator to calculate the remainder of the rotation divided by the length of the string, and then count the number of odd values in the resulting string using a loop or the built-in `sum()` function with a generator expression."
    },
    {
        "task_id": 111,
        "prompt": "Write a function to find the common elements in given nested lists.",
        "instruction 1": "Identify the input parameter as a list of nested lists and flatten the list using a list comprehension or a loop to create a single list, then set it as a common elements set.",
        "instruction 2": "Use a set intersection operation (`set intersection`) to find the common elements between the original flattened list and the set, and return the result as a list of common elements."
    },
    {
        "task_id": 113,
        "prompt": "Write a function to check if a string represents an integer or not.",
        "instruction 1": "Identify the input parameter as a string, then attempt to convert it to an integer using the built-in `int()` function, and catch any `ValueError` exceptions that may occur during the conversion.",
        "instruction 2": "In the exception handling block, return `False` to indicate that the input string does not represent an integer, otherwise, return `True` to indicate that the input string represents an integer."
    },
    {
        "task_id": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into a single integer.",
        "instruction 1": "Identify the input parameter as a tuple of positive integers and convert it into a single integer by multiplying the product of the integers.",
        "instruction 2": "Use the built-in `math.prod()` function or a simple loop to calculate the product of the integers in the tuple, then return the result as an integer."
    },
    {
        "task_id": 118,
        "prompt": "Write a function to convert a string to a list of strings split on the space character.",
        "instruction 1": "Identify the input parameter as a string and use the `split()` function with the space character as the separator to split the string into a list of substrings.",
        "instruction 2": "Return the list of substrings as the output, which represents the desired result of converting the string to a list of strings split on the space character."
    },
    {
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "instruction 1": "Identify the input parameter as a sorted list of integers and initialize an empty set to store unique elements and another variable to store the target element that appears only once.",
        "instruction 2": "Iterate through the list, checking if each element is in the set; if not, add it to the set; if yes, remove it from the set; at the end of the iteration, the remaining element in the set is the one that appears only once, which you can return as the function result."
    },
    {
        "task_id": 120,
        "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "instruction 1": "Identify the input parameter as a list of tuples containing integers, and initialize a variable to store the maximum absolute product.",
        "instruction 2": "Use a loop to iterate over the list of tuples, calculate the absolute product of each pair of integers, and update the maximum absolute product if the current product is greater than the stored maximum."
    },
    {
        "task_id": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "instruction 1": "Identify the input parameter as a number that specifies the upper limit, and define a function to initialize an empty set and a sum variable for storing the result.",
        "instruction 2": "Use nested loops to iterate from 1 to the input number, calculate the sum of proper divisors for each number, and check if the sum of the divisors is equal to the number; if true, add the pair of amicable numbers to the set and update the sum of the amicable numbers; finally, return the total sum."
    },
    {
        "task_id": 124,
        "prompt": "Write a function to get the angle of a complex number.",
        "instruction 1": "Identify the input parameter as a complex number and extract its real and imaginary parts using the `real` and `imag` attributes.",
        "instruction 2": "Return the angle of the complex number using the `math.atan2` function on the imaginary and real parts, converting the result to radians and then degrees."
    },
    {
        "task_id": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "instruction 1": "Initialize and traverse a hashmap to count the occurrences of '0' and '1' in the binary string, and update the maximum difference when a new local minimum or maximum is found.",
        "instruction 2": " Iterate through the binary string and update the hashmap accordingly, checking for the maximum difference at each step and returning the maximum found difference at the end of the iteration."
    },
    {
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "instruction 1": "Define a function with two integer parameters representing the two given numbers, and initialize an empty set to store the common divisors.",
        "instruction 2": "Use nested loops to iterate over the range of the first number down to 1, and check if each number is a divisor of both numbers, appending it to the set of common divisors, then return the sum of the elements in the set using the `sum()` function."
    },
    {
        "task_id": 127,
        "prompt": "Write a function to multiply two integers.",
        "instruction 1": "Identify the input parameters as two integers and define a function to perform the multiplication operation using the `*` operator.",
        "instruction 2": "Return the result of the multiplication as the output of the function."
    },
    {
        "task_id": 128,
        "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
        "instruction 1": "Define a function with an input parameter as a list of words and an integer n, then iterate through the list of words to identify those with lengths greater than n.",
        "instruction 2": "Use a conditional statement to check the length of each word and append the words that meet the condition to a new list, then return the list of words that are longer than n characters."
    },
    {
        "task_id": 129,
        "prompt": "Write a function to calculate whether the matrix is a magic square.",
        "instruction 1": "Identify the parameters as a matrix (a list of lists of integers) and define a helper function to sum up the rows and columns to check if they all equal the sum of the central element.",
        "instruction 2": "Implement a function to check if the input matrix is a magic square by iterating over each row and column, summing the elements, and comparing them to the sum of the central element, returning True if it is a magic square and False otherwise."
    },
    {
        "task_id": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "instruction 1": "Identify the input parameter as a list of items and use Python's built-in `Counter` class from the `collections` module to count the frequency of each item in the list.",
        "instruction 2": "Use the `most_common` method of the `Counter` object to get the item with the maximum frequency and return its value along with the frequency."
    },
    {
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "instruction 1": "Identify the input parameter as a string, and divide it into two separate lists, one for consonants and one for vowels, excluding the character 'y' being a vowel.",
        "instruction 2": "Use Python's slicing and list concatenation to recreate the string, placing the original consonants and the reversed vowels in the correct order, returning the modified string."
    },
    {
        "task_id": 132,
        "prompt": "Write a function to convert a tuple to a string.",
        "instruction 1": "Convert the tuple to a string using the built-in str() function, which accepts an iterable like a tuple as an argument.",
        "instruction 2": "Return the resulting string converted from the tuple using the return keyword, without any additional manipulation or modification."
    },
    {
        "task_id": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize a variable to zero, which will accumulate the sum of the negative numbers.",
        "instruction 2": "Use a loop to iterate over the list of numbers, check if each number is negative, and if so, add it to the accumulation variable, then return the total sum."
    },
    {
        "task_id": 135,
        "prompt": "Write a function to find the nth hexagonal number.",
        "instruction 1": "Define a function to calculate the nth hexagonal number, taking the input parameter n as an integer, and define a variable to store the sum of the first n odd integers using the formula (2*n^2 - n)",
        "instruction 2": "Return the calculated hexagonal number based on the formula (2*n^2 - n) and handle any edge cases for n <= 0 or non-integer inputs as necessary"
    },
    {
        "task_id": 137,
        "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "instruction 1": "Identify the input parameter as an array of integers and initialize two variables to count the number of zeroes and non-zero elements, separately.",
        "instruction 2": "Iterate through the array, incrementing the corresponding count variable for each element, and finally return the ratio of the count of zeroes to the count of non-zero elements."
    },
    {
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "instruction 1": "Identify the input parameter as an integer and use a binary representation of the number to iterate through the bits, checking each bit to see if it's 1, and if so, divide the number by 2 and add the corresponding 2^x to the sum.",
        "instruction 2": "Use a while loop to continue dividing the number by 2 and adding the corresponding 2^x to the sum as long as the number is greater than 0, then return True if the sum equals the original number, otherwise return False."
    },
    {
        "task_id": 139,
        "prompt": "Write a function to find the circumference of a circle.",
        "instruction 1": "Identify the input parameter as the radius of the circle and define the mathematical constant pi.",
        "instruction 2": "Compute the circumference using the formula 2 * pi * radius and return the result."
    },
    {
        "task_id": 140,
        "prompt": "Write a function to flatten the list of lists into a single set of numbers.",
        "instruction 1": "Identify the input parameter as a list of lists, and initialize an empty set to store the flattened numbers.",
        "instruction 2": "Use a loop to iterate over the input list of lists, and for each sublist, use list comprehension or the `extend()` method to add all elements to the set."
    },
    {
        "task_id": 141,
        "prompt": "Write a function to sort a list of elements.",
        "instruction 1": "Identify the input parameter as a list of elements that needs to be sorted, and import the built-in Python function `sorted()` to sort the list.",
        "instruction 2": "Use the `sorted()` function with the input list to sort it and return the sorted list, and if descending order is required, add the `.reverse()` function."
    },
    {
        "task_id": 142,
        "prompt": "Write a function to count number items that are identical in the same position of three given lists.",
        "instruction 1": "Identify the input parameters as three lists of elements, and define a function that compares each pair of elements at the same position across the three lists.",
        "instruction 2": "Use three nested loops to iterate through each position in the lists, check if the elements at the current position are identical, and count the number of matching positions, then return the count."
    },
    {
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "instruction 1": "Identify the input parameter as a one-dimensional list of numbers, and store the list in a variable.",
        "instruction 2": "Use a loop to iterate over each element in the list, calculate the absolute difference between each element and the smallest element in the list, and update the maximum difference if the current difference is greater, then return the calculated maximum difference."
    },
    {
        "task_id": 160,
        "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "instruction 1": "Define a function that accepts three integer parameters: a (the coefficient of x), b (the coefficient of y), and n (the constant term). Identify the equations parameters and calculate the gcd of a and b.",
        "instruction 2": "Use the extended Euclidean algorithm to find integers x and y such that ax + by = gcd(a, b) and then adjust the values to satisfy ax + by = n by dividing both sides by gcd(a, b), returning the solution as a tuple (x, y) or None if no solution exists."
    },
    {
        "task_id": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "instruction 1": "Identify the two input parameters as two separate lists, targeting_list and complement_list, and initialize an empty list to store the resulting list after removal.",
        "instruction 2": "Use a loop to iterate over the elements of complement_list, checking if each element is present in targeting_list, and if found, remove it using the remove() method or the list comprehension technique."
    },
    {
        "task_id": 162,
        "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "instruction 1": "Define a function with a single input parameter 'n' which represents the upper limit of the series, and define an accumulator variable to calculate the total sum.",
        "instruction 2": "Use a loop to iterate from i=0 to n // 2, add the term (n-2*i) to the accumulator, and return the accumulator value as the total sum."
    },
    {
        "task_id": 165,
        "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "instruction 1": "Identify the input parameter as a string and convert it to lowercase to ignore case sensitivity, then initialize a counter variable to zero.",
        "instruction 2": "Iterate over each character in the string, check if the character's ASCII value minus the ASCII value of 'a' is within the range 0 to 25 (since 'a' to 'z' are at indices 0 to 25), and if so, increment the counter variable by 1."
    },
    {
        "task_id": 166,
        "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize a variable to store the count of pairs that xor to an even number.",
        "instruction 2": "Use a pair iterator to iterate over the list, calculate the xor of each pair and check if the result is even, incrementing the count if true, and return the final count."
    },
    {
        "task_id": 167,
        "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "instruction 1": "Identify the input parameter as an integer n and initialize a variable to store the smallest power of 2 greater than or equal to n, with the initial value set to 1.",
        "instruction 2": "Use a while loop to incrementally multiply the current value by 2 until it is no longer less than n, returning the result as the smallest power of 2 greater than or equal to n."
    },
    {
        "task_id": 168,
        "prompt": "Write a function to count the number of occurrences of a number in a given list.",
        "instruction 1": "Identify the input parameters as a list of numbers and the number to be counted, then define a variable to store the count of occurrences.",
        "instruction 2": "Use a loop to iterate through the list, and for each element, check if it matches the number to be counted; if it does, increment the count variable, then return the final count."
    },
    {
        "task_id": 170,
        "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "instruction 1": "Define the input parameters as a list of numbers and two indices that specify the range, and check if the indices are valid and within the range of the list.",
        "instruction 2": "Use Python's list slicing to extract the sublist between the specified indices and return the sum of the elements in that sublist using the `sum()` function."
    },
    {
        "task_id": 171,
        "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "instruction 1": " Identify the input parameter as the length of the sides of the regular pentagon, calculate the apothem of the pentagon using the formula (side/2*tan(π/5)), and use this value to calculate the perimeter of the pentagon using the formula perimeter = 5 * side.",
        "instruction 2": "Return the calculated perimeter as the result"
    },
    {
        "task_id": 172,
        "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "instruction 1": "Define the function to take a string input and initialize a variable to count the occurrences of the substring 'std'.",
        "instruction 2": "Use Python's `count()` method and iterate over the input string to find the occurrences of 'std' and update the count variable, then return the count."
    },
    {
        "task_id": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "instruction 1": "Identify the input parameter as a tuple and check its initial state to determine whether it contains heterogeneous data types.",
        "instruction 2": "Use the built-in `set()` function to extract unique data types in the tuple, then compare its length with 1, returning `True` if all elements have the same data type or `False` otherwise."
    },
    {
        "task_id": 223,
        "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "instruction 1": "Identify the input parameters as a sorted list, its length (n) as an integer, and the element to check for majority as a single value.",
        "instruction 2": "Use a variable to track the count of the given element, initialize it to 0, and iterate through the sorted list from start to end, incrementing the count when the element matches and checking if it surpasses n/2, returning True if it is the majority element and False otherwise."
    },
    {
        "task_id": 224,
        "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "instruction 1": "Write a function that takes an integer as an input parameter and convert it to binary form using the built-in `bin()` function, then initialize a counter variable to zero.",
        "instruction 2": "Iterate over the binary representation of the input number and increment the counter by one for each binary digit equal to 1, then return the total count of set bits."
    },
    {
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "instruction 1": "Identify the input parameter as a string and initialize an empty string to store the result, then iterate over the characters of the input string using string slicing to access the characters with odd index values.",
        "instruction 2": "Use conditional statements to check if the current character index is odd, if true, skip it by not appending to the result string, otherwise, append the character to the result string"
    },
    {
        "task_id": 227,
        "prompt": "Write a function to find minimum of three numbers.",
        "instruction 1": "Identify the input parameters as three distinct numbers and initialize a variable to store the minimum value.",
        "instruction 2": "Use a conditional statement to compare the three input numbers and assign the smallest value to the variable, then return the minimum value."
    },
    {
        "task_id": 230,
        "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "instruction 1": "Identify the input parameters as a string and a character, then initialize an empty string to store the processed string.",
        "instruction 2": "Use Python's string.replace() method to replace all occurrences of blank spaces in the input string with the specified character, and return the processed string."
    },
    {
        "task_id": 232,
        "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer n that specifies the number of largest items to return, then sort the list in descending order using the built-in sort() function.",
        "instruction 2": "Use slicing and list comprehension to extract the first n items from the sorted list and return the resulting list."
    },
    {
        "task_id": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "instruction 1": "Specify the input parameters as the radius and the height of the cylinder, and identify the mathematical formula to calculate the lateral surface area (2πr*h), where r is the radius and h is the height.",
        "instruction 2": "Use Python's math module to calculate the lateral surface area by multiplying the coefficient 2π by the provided radius and the height, and return the result as a floating point value."
    },
    {
        "task_id": 234,
        "prompt": "Write a function to find the volume of a cube given its side length.",
        "instruction 1": "Identify the input parameter as the side length of the cube and define a function named 'calculate_cubic_volume' to calculate the volume.",
        "instruction 2": "Return the calculated volume by cubing the side length using the ** operator."
    },
    {
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.",
        "instruction 1": "Identify the input parameter as an integer and initialize a variable to represent the result, then use bitwise AND and XOR operations to set all even bits to 1",
        "instruction 2": "Use a loop to iterate through each bit of the integer from left to right, and if the bit is even (0), set it to 1 using the bitwise XOR operation (^= 1), else leave it unchanged"
    },
    {
        "task_id": 237,
        "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "instruction 1": "Write a function to iterate over the input list of tuples, and use a dictionary to store the frequency of each tuple by updating the value in the dictionary for each occurrence.",
        "instruction 2": "Use the `dict.get()` method to set the default value for non-existent keys as 0, and then add the tuple as a key and increment its count using the `update()` method, finally returning the resulting dictionary."
    },
    {
        "task_id": 238,
        "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
        "instruction 1": "Identify the input parameter as a string and initialize a variable to count the number of non-empty substrings, then iterate over the string to find all possible substrings.",
        "instruction 2": "Check if each substring has a length greater than 0 and increment the count variable if it is, then return the total count of non-empty substrings."
    },
    {
        "task_id": 239,
        "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "instruction 1": "Identify the input parameters m and n as positive integers, and initialize a variable to count the number of possible sequences.",
        "instruction 2": "Use a loop to iterate over the range of numbers from 2 to m, and for each number, use recursion to generate sequences of length n by adding the current number and the previous number plus 1, and then update the count accordingly."
    },
    {
        "task_id": 240,
        "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "instruction 1": "Identify the input parameters as two lists and the last element index in the first list.",
        "instruction 2": "Replace the last element of the first list with the elements of the second list using list slicing and concatenation, and return the modified list."
    },
    {
        "task_id": 242,
        "prompt": "Write a function to count the total number of characters in a string.",
        "instruction 1": "Identify the input parameter as a string and initialize a variable to store the total count of characters, set it to 0.",
        "instruction 2": "Use the `len()` function to get the length of the input string and add it to the total count, then return the total count."
    },
    {
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.",
        "instruction 1": "Identify the input parameter as an integer number and initialize a variable to store the next perfect square greater than the given number. Use the `math.sqrt()` function to find the square root of the number and increment the variable until it finds the next perfect square.",
        "instruction 2": "Once the next perfect square is found, return the square itself, or use the `round()` function to round the square to the nearest integer, depending on the desired output format."
    },
    {
        "task_id": 245,
        "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "instruction 1": "Initialize a variable to store the maximum sum and two pointers, one for the increasing and one for the decreasing part of the bitonic subsequence, and iterate through the array to find the maximum sum.",
        "instruction 2": "Compare the values at the current positions of the two pointers, increment the increasing pointer if the current value is greater and increment the decreasing pointer if the current value is smaller, and update the maximum sum whenever a new maximum is found."
    },
    {
        "task_id": 247,
        "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "instruction 1": "Identify the input parameter as a string and initialize a variable to store the longest palindromic subsequence length.",
        "instruction 2": "Use a loop to iterate through the string, checking for palindromic subsequences of increasing length, and update the longest palindromic subsequence length variable accordingly."
    },
    {
        "task_id": 250,
        "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "instruction 1": "Create a variable to store the input tuple and the element to be searched. Use the `count()` method of the tuple to determine the occurrences of the element and initialize a `count` variable.",
        "instruction 2": "Return the calculated `count` variable, which represents the number of occurrences of the element in the tuple."
    },
    {
        "task_id": 251,
        "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "instruction 1": "Identify the input parameters as a list of elements and the element to be inserted, and initialize an empty list to build the result.",
        "instruction 2": "Use a loop through the input list, and for each element, insert the specified element before it and extend the result list with the modified copy of the original list."
    },
    {
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "instruction 1": "Identify the input as a complex number, and import the `cmath` module to access its functions for complex number operations, such as calculating the magnitude (abs) and phase angle (math.atan2) of the complex number.",
        "instruction 2": "Use the calculated magnitude and phase angle to return the polar coordinates as a tuple or list in the format (r, theta), where r is the magnitude and theta is the phase angle in radians."
    },
    {
        "task_id": 253,
        "prompt": "Write a python function that returns the number of integer elements in a given list.",
        "instruction 1": "Use a list comprehension to iterate over the input list and check if each element is an integer using the built-in `isinstance()` function with the argument `int`. Count the number of elements that are integers and return the count.",
        "instruction 2": "Use the `len()` function to count the total number of elements in the list, and then compare this count to the count of integer elements obtained in step 1 to calculate the percentage of integer elements."
    },
    {
        "task_id": 255,
        "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "instruction 1": "Use the `itertools` module to generate all combinations with repetition of the input list, using the `ComboBox` function with the input list and length n as arguments.",
        "instruction 2": "Convert each combination into a tuple and store it in a list, then return the list containing all combinations as tuples."
    },
    {
        "task_id": 256,
        "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "instruction 1": "Identify the input parameter as a non-negative integer and define an auxiliary function to check if a number is prime.",
        "instruction 2": "Use a loop to iterate through all numbers less than the given number, call the auxiliary function to check primality, and maintain a count of prime numbers; finally, return the count of prime numbers found."
    },
    {
        "task_id": 257,
        "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "instruction 1": "Identify the input parameters as two numbers and define a function that takes these two numbers as arguments.",
        "instruction 2": "Use Python's tuple syntax to return a tuple with the second number as the first element and the first number as the second element."
    },
    {
        "task_id": 259,
        "prompt": "Write a function to maximize the given two tuples.",
        "instruction 1": "Identify the input parameters as two tuples, and determine that the task is to find the maximum of the two tuples, likely using the built-in `max()` function.",
        "instruction 2": "Compare the two tuples using the `max()` function, which returns the largest item in an iterable or the largest of two or more arguments, and return the result as the output of the function."
    },
    {
        "task_id": 260,
        "prompt": "Write a function to find the nth newman–shanks–williams prime number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the nth number in the sequence, and initialize a variable to keep track of the current prime number.",
        "instruction 2": "Use a loop to generate and check prime numbers starting from 2, incrementing the current prime number each time a new one is found, stopping when the current prime number is equal to the nth newman–shanks–williams prime number, and return this number."
    },
    {
        "task_id": 261,
        "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "instruction 1": "Split the two input tuples into separate lists, then define a list comprehension to iterate over the indices and elements of the tuples using the zip() function, performing element-wise division and returning the resulting list of results.",
        "instruction 2": "Use Python's built-in zip() function to pair up elements from both tuples and divide them, and then return the resulting divided tuple as a new one."
    },
    {
        "task_id": 262,
        "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer L that represents the length of the first part of the list.",
        "instruction 2": "Use list slicing to split the given list into two parts, taking the part up to the length L and the remaining part, and return the resulting lists as a tuple using the `return` statement."
    },
    {
        "task_id": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "instruction 1": "Define a function with a single input parameter, the dog's age in human years, and calculate the corresponding age in dog years considering the first two years as 24 human years, and each subsequent year as 4 human years.",
        "instruction 2": "Use a conditional statement to check if the human age is less than or equal to 2, and if so, return the human age times 24; otherwise, return the human age times 4 plus 2 times 12"
    },
    {
        "task_id": 265,
        "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer n that represents the splitting interval, then initialize an empty list to store the split lists.",
        "instruction 2": "Use a loop to iterate over the list, splitting it into sublists of length n, and append each sublist to the resulting list, returning it once the iteration is complete."
    },
    {
        "task_id": 266,
        "prompt": "Write a function to find the lateral surface area of a cube given its side length.",
        "instruction 1": "Identify the input parameter as the side length of the cube and initialize a variable to store the lateral surface area.",
        "instruction 2": "Calculate the lateral surface area using the formula 4 * side_length^2 and return the result."
    },
    {
        "task_id": 267,
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n and initialize an empty variable to store the sum of the squares.",
        "instruction 2": "Use a loop to iterate from 1 to n, calculate the square of each odd number, add it to the sum variable, and return the sum."
    },
    {
        "task_id": 268,
        "prompt": "Write a function to find the n'th star number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the star number, and initialize a counter i to 0, a star number counter s to 0, and an odd number count o to 0.",
        "instruction 2": "Increment the counter i by 1, and check if i is a star number. If it is, increment the star number counter s and the odd number count o by 1. Continue this process until the star number counter s reaches n, then return the product of the star number counter s and 3."
    },
    {
        "task_id": 269,
        "prompt": "Write a function to find the ascii value of a character.",
        "instruction 1": "Identify the input parameter as a character and convert it to an integer using the built-in `ord()` function, which returns the ASCII value of a single character.",
        "instruction 2": "Return the result of the `ord()` function, which represents the ASCII value of the character."
    },
    {
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
        "instruction 1": "Define a function takes a list of integers as input and uses a loop to iterate through the list, checking the index and value of each element to determine if it is an even number at an even position and adding it to a running total.",
        "instruction 2": "Return the total sum of the even numbers at even positions."
    },
    {
        "task_id": 271,
        "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "instruction 1": "Calculate the first 'n' even natural numbers by initializing a variable 'Sum' to 0, then iterating from 2 to 2*n using a for loop, and adding each even number raised to the fifth power to 'Sum'.",
        "instruction 2": "Return the calculated sum"
    },
    {
        "task_id": 272,
        "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "instruction 1": "Identify the input parameter as a list of tuples and determine the length of each tuple to identify the index of the last element in each tuple.",
        "instruction 2": "Use a list comprehension or a loop to iterate through the list of tuples, extract the last element of each tuple using indexing, and add it to a new list."
    },
    {
        "task_id": 273,
        "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "instruction 1": "Identify the input parameters as two tuples and extract the elements from each tuple to compare indices and perform the subtraction.",
        "instruction 2": "Use a zip() function to pair up corresponding elements from the two tuples, subtract each pair of elements, and return the resulting list of differences."
    },
    {
        "task_id": 274,
        "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "instruction 1": "Identify the input parameter as a positive integer n, and initialize an empty sum variable to store the sum of even index binomial coefficients.",
        "instruction 2": "Use Python's binomial coefficient formula and list comprehension to generate the binomial coefficients, select every other coefficient starting from 0 (even indices), and add them to the sum variable using the operator '+'."
    },
    {
        "task_id": 276,
        "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "instruction 1": "Use the input parameters radius and height to identify the formula for the volume of a cylinder, V = πr^2h, and define variables for these inputs, and calculate the result using the formula.",
        "instruction 2": "Return the calculated volume result as the output of the function."
    },
    {
        "task_id": 277,
        "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "instruction 1": "Identify the input parameters as a dictionary and an integer n, and initialize an empty dictionary to store the filtered key-value pairs.",
        "instruction 2": "Use a loop to iterate over the key-value pairs in the input dictionary and check if the value is greater than or equal to n, then add the key-value pair to the filtered dictionary if the condition is met, and return the filtered dictionary."
    },
    {
        "task_id": 278,
        "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "instruction 1": "Identify the input parameter as a tuple and the element to be searched, and create a variable to store the count of elements appearing before the target element in the tuple.",
        "instruction 2": "Use a for loop to iterate over the tuple, and increment the count if the current element is smaller than the target element; finally, return the count."
    },
    {
        "task_id": 279,
        "prompt": "Write a function to find the nth decagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the index of the decagonal number to find, and use a variable to calculate the total number of sides of the regular polygon (n+3) to determine the number of elements in the decagonal pattern.",
        "instruction 2": "Use a loop to generate the decagonal pattern by summing the elements in each row and column, using the sum of the first 'n-1' triangular numbers formula to calculate each element, and then return the nth decagonal number."
    },
    {
        "task_id": 280,
        "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "instruction 1": " Define a Python function that takes two input parameters: an array and an element, and initializes a variable to store the result as a tuple.",
        "instruction 2": "Use a loop to iterate through the array, and for each element, check if it matches the target element. If found, return a tuple with a boolean True and the index position of the element. If not found, return a tuple with a boolean False and -1 as the index position."
    },
    {
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "instruction 1": "Identify the input parameter as a list of elements, and convert the list to a set to remove any duplicate elements.",
        "instruction 2": "Compare the length of the original list to the length of the set; if they are equal, return True as the elements are unique, otherwise return False."
    },
    {
        "task_id": 282,
        "prompt": "Write a function to subtract two lists element-wise.",
        "instruction 1": "Identify the input parameters as two lists of numbers, and implement a loop to compare corresponding elements and subtract them element-wise, storing the results in a new list.",
        "instruction 2": "Return the list of differences as the result of the subtraction operation, ensuring that the output list has the same length as the input lists."
    },
    {
        "task_id": 283,
        "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "instruction 1": "Identify the input parameter as an integer and calculate the frequency of each digit by converting it to a string, then iterate over each character in the string to count the occurrences, and store these frequencies in a dictionary.",
        "instruction 2": "Compare the frequency of each digit with the digit itself, and return True if all frequencies are less than or equal to their corresponding digits, otherwise return False."
    },
    {
        "task_id": 284,
        "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "instruction 1": "Identify the input parameters as a list of elements and an element to be checked for equality, then initialize a variable to track whether the list contains the target element.",
        "instruction 2": "Use a loop to iterate over the list, comparing each element to the given element using a conditional statement, and return a boolean value indicating whether all elements in the list are equal to the target element."
    },
    {
        "task_id": 285,
        "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "instruction 1": "\"instruction 1\": \"Identify the input parameter as a string and use regular expressions to check if the string contains the pattern 'ab{2,3}' where 'ab' is literally 'a' followed by any number of 'b's (2 or 3 as specified)\"",
        "instruction 2": "\"instruction 2\": \"Use Python's `re.search()` function to search for the pattern in the string and return a boolean value indicating whether the pattern was found or not\""
    },
    {
        "task_id": 286,
        "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer k that specifies the number of times to repeat the array, and create a new list by repeating the original array k times.",
        "instruction 2": "Use Python's built-in functions to find the maximum sum of a contiguous array in the modified list using the `max` function with a generator expression that sums up the elements in each contiguous subarray."
    },
    {
        "task_id": 287,
        "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n and initialize an empty variable to calculate the sum of squares of first n even natural numbers.",
        "instruction 2": "Use a loop to iterate from 2 to 2*n, calculate the square of each even number, add the result to the sum variable, and return the final sum."
    },
    {
        "task_id": 290,
        "prompt": "Write a function to find the list of maximum length in a list of lists.",
        "instruction 1": "Identify the input parameter as a list of lists and iterate through each nested list to get the length of each inner list.",
        "instruction 2": "Use the built-in `max()` function with a generator expression to find the maximum length among the inner lists and return the result."
    },
    {
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "instruction 1": "Identify the input parameters as two integers representing the dividend and divisor, and use the built-in `math.floor()` function from the Python math module to divide the dividend by the divisor and return the result as an integer.",
        "instruction 2": "Without using any built-in division functions, implement the division using a while loop, continuously subtracting the divisor from the dividend and counting the number of times the subtraction is performed, then return the count as the quotient."
    },
    {
        "task_id": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "instruction 1": "Identify the input parameters as two sides (a and b) of the right-angled triangle and calculate the square of both sides",
        "instruction 2": "Use the Pythagorean theorem to calculate the square of the third side (c) as the difference between the sum of the squares of the given sides and the square of half the sum of the given sides, and return the square root of c as the length of the third side"
    },
    {
        "task_id": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "instruction 1": "Identify the input as a list of mixed data types, then convert it into a list of numbers by applying a function like int() or float() to convert non-numeric values to numbers, assuming numeric conversions are possible.",
        "instruction 2": "Use Python's built-in max() function to find the maximum value in the list of numbers and return the result."
    },
    {
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.",
        "instruction 1": "Identify the input parameter as a list of integers and implement a merge sort algorithm to partition the array into two halves, counting the number of inversions during the merge process.",
        "instruction 2": "Return the total count of inversions found during the merge sort, where an inversion is defined as a pair of elements in the wrong order after the sorted array is expected."
    },
    {
        "task_id": 297,
        "prompt": "Write a function to flatten a given nested list structure.",
        "instruction 1": "Identify the input parameter as a list that might contain nested lists, and define a recursive function that checks if each element in the list is also a list.",
        "instruction 2": "Use a loop to iterate over the list, checking if each element is a list and recursively flattening it if necessary, before returning the flattened list."
    },
    {
        "task_id": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "instruction 1": "Identify the input parameter as a list of tuples and define the function to calculate the aggregate (max value of the first tuple element if all have same value, max value of the second tuple element if all have same first element value, and so on) from these tuples.",
        "instruction 2": "Iterate over the list of tuples, keeping track of the maximum value for each tuple index up to the current index, and return the maximum of these values using a function like `max()` with a generator expression."
    },
    {
        "task_id": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "instruction 1": "Identify the input parameter as an integer n that represents the length of the binary sequences and initialize a counter variable to zero. Then use a loop to generate binary sequences of length 2n, calculate the sum of the first n bits and the sum of the last n bits, and check if they are equal. If they are equal, increment the counter.",
        "instruction 2": "Return the counter as the total count of binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits, using the calculated count."
    },
    {
        "task_id": 301,
        "prompt": "Write a function to find the depth of a dictionary.",
        "instruction 1": "Identify the input parameter as a dictionary and initialize a variable to keep track of the current depth, starting at 0. Then, recursively iterate through each value in the dictionary, incrementing the depth variable for each nested dictionary and returning the maximum depth found.",
        "instruction 2": "During the recursive iteration, check if each value is a dictionary or not. If it's a dictionary, recursively call the same function with incremented depth, otherwise, update the depth variable if it is less than the current maximum depth."
    },
    {
        "task_id": 305,
        "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
        "instruction 1": "Identify the input parameter as a list of words and use a loop to iterate over the list to find the words starting with the letter 'p' and store them in a new list.",
        "instruction 2": "Return the new list containing the two words found, or return an empty list if less than two words starting with 'p' are found."
    },
    {
        "task_id": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "instruction 1": " Define the function with parameters, including a list of numbers, an integer i as the index, and an integer k for the kth element, and initialize variables to store the maximum sum and the current sum.",
        "instruction 2": " Iterate over the list from index i to k with a for loop, adding each number to the current sum and updating the maximum sum if needed, and return the maximum sum found."
    },
    {
        "task_id": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "instruction 1": "Identify the input parameters as two lists of numbers and an integer that specifies the number of largest products to find, and initialize an empty list to store the results.",
        "instruction 2": "Use a combination of list comprehensions and the built-in max function to generate pairs of numbers from the two lists, calculate their products, and return the specified number of largest products."
    },
    {
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.",
        "instruction 1": "Identify the input parameters as two numbers a and b, and define a function that takes these parameters.",
        "instruction 2": "Return the maximum value between a and b using the built-in `max()` function or a conditional statement comparing the values."
    },
    {
        "task_id": 310,
        "prompt": "Write a function to convert a given string to a tuple of characters.",
        "instruction 1": "Convert the given string to a list of characters using the `list()` function, and return it.",
        "instruction 2": "Use the `tuple()` function to convert the list of characters to a tuple, and return the resulting tuple."
    },
    {
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.",
        "instruction 1": "Define a function that takes an integer as input and uses bitwise operations to determine the leftmost unset bit by shifting the input number right and counting the number of trailing zeros.",
        "instruction 2": "Use the count obtained in the previous step to left-shift the binary representation of the input number and return the resulting value as the leftmost unset bit has been set."
    },
    {
        "task_id": 312,
        "prompt": "Write a function to find the volume of a cone.",
        "instruction 1": "Identify the input parameters as the radius and height of the cone, and define the mathematical formula for the volume of a cone (πr^2h/3) to determine the output.",
        "instruction 2": "Use the input values and the formula to calculate the volume of the cone using Python's math library for mathematical operations and mathematical pi constant, and return the result."
    },
    {
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "instruction 1": "Identify the input parameter as an integer n and use bitwise operators to find the highest power of 2 that is less than or equal to n.",
        "instruction 2": "Use a loop to iterate from the highest power of 2 (2^n) down to 1, checking if it is less than or equal to n, and return the highest such power of 2."
    },
    {
        "task_id": 389,
        "prompt": "Write a function to find the n'th lucas number.",
        "instruction 1": "Define a function with a single parameter `n` to represent the position of the Lucas number to be found, and initialize two variables `P1` and `P2` to 2 and 1, respectively, to store the previous two Lucas numbers.",
        "instruction 2": "Use a loop to calculate the `n`-th Lucas number by updating `P1` and `P2` based on the recurrence relation P(n) = P(n-1) + P(n-2), returning the calculated `P(n)`."
    },
    {
        "task_id": 390,
        "prompt": "Write a function to apply a given format string to all of the elements in a list.",
        "instruction 1": "Identify the input parameters as a list of elements and a format string, and assume the list contains elements that can be formatted using the given format string.",
        "instruction 2": "Use Python's built-in `format()` function to apply the format string to each element in the list, iterating over the list to apply formatting to each element, or use the `str.format()` method if necessary."
    },
    {
        "task_id": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "instruction 1": "Identify the input parameters as two or more lists representing the keys and values for the nested dictionary, and use a loop to iterate over the inputs to create dictionaries from each key-value pair list, and then store these dictionaries in a list.",
        "instruction 2": "Use the `dict()` function to convert each dictionary in the list to a nested dictionary, and then return the resulting list of nested dictionaries."
    },
    {
        "task_id": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "instruction 1": "Identify the input parameter as an integer n that satisfies the given equation and define a base case for n <= 1, where the maximum sum is n itself.",
        "instruction 2": "Use a recursive function to calculate the maximum sum by applying the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n), with the base case handling the edge case n <= 1, and return the calculated maximum sum."
    },
    {
        "task_id": 394,
        "prompt": "Write a function to check if given tuple contains no duplicates.",
        "instruction 1": "Check if the input parameter is of tuple type and contains only unique elements by converting the tuple to a set, then compare the length of the set with the length of the tuple if they are equal, the tuple has no duplicates.",
        "instruction 2": "Use a conditional statement to return True if the lengths match, indicating the tuple has no duplicates, otherwise return False."
    },
    {
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.",
        "instruction 1": "Create a dictionary to count the frequency of each character in the input string and initialize a variable to store the first non-repeated character, assuming it does not exist.",
        "instruction 2": "Iterate through the input string, updating the count dictionary and checking for the first character with a count of 1, returning it as the result if found, or return a default value if no non-repeated character is found."
    },
    {
        "task_id": 397,
        "prompt": "Write a function to find the median of three numbers.",
        "instruction 1": "Identify the input parameters as three numbers a, b, and c and assume that a, b, and c are already sorted in ascending order.",
        "instruction 2": "Return the middle value of the sorted numbers if their count is odd, otherwise, return the average of the two middle values."
    },
    {
        "task_id": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize an empty sum variable to 0. Then, iterate through the list and for each number, calculate the sum of its digits by converting the number to a string, iterating over each character, and adding the integer value of each character to the sum variable.",
        "instruction 2": "Return the total sum obtained after processing all the numbers in the list using the sum variable."
    },
    {
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.",
        "instruction 1": "Identify the input parameters as two numbers and define a variable to store the minimum value, assuming it to be the first input number initially.",
        "instruction 2": "Use a conditional statement to compare the first and second input numbers and update the minimum variable with the smaller value if necessary, then return the minimum value."
    },
    {
        "task_id": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "instruction 1": "Define a function with a tuple as an input parameter, which will be used to search for a specific element.",
        "instruction 2": "Use a Python in operator to check if the element exists in the tuple and return a boolean value indicating its presence or absence."
    },
    {
        "task_id": 406,
        "prompt": "Write a python function to find whether the parity of a given number is odd.",
        "instruction 1": "Define a function that takes an integer as input and use the modulo operator to determine its remainder when divided by 2. The remainder will be 1 for odd numbers and 0 for even numbers.",
        "instruction 2": "Return True for odd parity by checking if the remainder is 1, and False for even parity by checking if the remainder is 0."
    },
    {
        "task_id": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "instruction 1": "Identify the input parameter as a list of tuples, iterate over the list to extract each tuple, and split each tuple into two separate values.",
        "instruction 2": "Use the `math.prod` function or manually multiply the two values in each tuple to find the product, store the minimum product found so far, and return it at the end."
    },
    {
        "task_id": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "instruction 1": "Identify the input parameter as a list of potentially different data types and initialize a variable to store the minimum value, setting it to the first element of the list.",
        "instruction 2": "Iterate through the list using a loop, comparing each element to the current minimum value, and update the minimum value if a smaller one is found, finally returning the minimum value."
    },
    {
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.",
        "instruction 1": "Create a new empty list and loop through the input list; for each element, check if it's an odd number and if not, append it to the new list.",
        "instruction 2": "Return the new list of even numbers by returning the list."
    },
    {
        "task_id": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "instruction 1": "Identify the input parameter as a list of tuples and the integer n that represents the position of the element to be extracted, starting from 1.",
        "instruction 2": "Use a loop to iterate through the list and return the nth element from the start, using zero-based indexing for list indices and one-based indexing for the input parameter."
    },
    {
        "task_id": 414,
        "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "instruction 1": " Identify the input parameters as a sequence and a target sequence, then iterate over the target sequence to compare each element with the elements in the given sequence.",
        "instruction 2": "Use the `in` operator to check if any element in the target sequence exists in the given sequence, returning a boolean value indicating whether a match is found or not."
    },
    {
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize two variables to store the pair with the highest product and the product itself, with an initial maximum value of 1.",
        "instruction 2": "Iterate through the input list, comparing each pair of numbers and updating the variables if a higher product is found, then return the pair with the highest product."
    },
    {
        "task_id": 418,
        "prompt": "Write a python function to find the element of a list having maximum length.",
        "instruction 1": "Identify the input parameter as a list of lists, and iterate through the list to find the sublist with the maximum length.",
        "instruction 2": "Return the sublist having the maximum length"
    },
    {
        "task_id": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "instruction 1": "Identify the input parameter as a list of numbers and define a function to round every number in the list to the nearest integer.",
        "instruction 2": "Use the map() function to apply the rounding operation to the list and calculate the sum of the rounded numbers, then multiply the sum by the length of the list and print the result."
    },
    {
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of even natural numbers, and initialize a variable to store the sum of the cubes, then initialize another variable to keep track of the current even number.",
        "instruction 2": "Use a loop to iterate from 2 to 2n (inclusive), cube each even number, add the result to the sum, and increment the sum after each iteration, finally return the sum"
    },
    {
        "task_id": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "instruction 1": "Specify the input parameter as a tuple and the delimiter, then identify the elements in the tuple as a list of strings.",
        "instruction 2": "Use the `join()` function with the delimiter to concatenate the elements in the tuple, converting them to strings if necessary, and return the result as a single string."
    },
    {
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of natural numbers, and initialize a variable to calculate the total sum of the cubes of the first n natural numbers.",
        "instruction 2": "Use a loop to iterate from 1 to n, cube each number, add the cube to the total sum, and then return the average by dividing the total sum by n."
    },
    {
        "task_id": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "instruction 1": "Define a function that takes a tuple of strings as input, and iterate through each string using a loop or list comprehension, splitting each string into substrings at the 'rear' index (assuming the 'rear' index is the last index of the string) and return the last substring.",
        "instruction 2": "Use the `index()` method or len() function to find the 'rear' index of each string, and then use list slicing or indexing to extract the last character or substring, returning a list of the rear index elements."
    },
    {
        "task_id": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "instruction 1": "Create a function that accepts a main list and a target element as input parameters, then initialize a counter variable to zero to keep track of the number of occurrences",
        "instruction 2": "Use a loop to iterate over the sublists within the main list, checking each sublist for the presence of the target element, and increment the counter whenever the target element is found, then return the final count"
    },
    {
        "task_id": 426,
        "prompt": "Write a function to filter odd numbers.",
        "instruction 1": "Create a function that takes a list of integers as input and initialize an empty list to store the filtered odd numbers.",
        "instruction 2": "Loop through the input list, check each number to see if it is odd by using the modulus operator (%), and if it is, append it to the empty list, then return the list of filtered odd numbers."
    },
    {
        "task_id": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "instruction 1": "Split the input date string into year, month, and day components using the '-' character as a delimiter, and store them in separate variables.",
        "instruction 2": "Use f-string formatting or the format function to concatenate the day, month, and year in the required format, 'dd-mm-yyyy', and return the resulting string."
    },
    {
        "task_id": 428,
        "prompt": "Write a function to sort the given array by using shell sort.",
        "instruction 1": "Implement the shell sort algorithm by first identifying the input parameter as a list of numbers, then defining the gap size as a power of 2 and decrementing it by a step size until it stops at 1, and subsequently, using inner loops to divide the list into sublists and iterate from the start and end to swap adjacent elements in case they are in the wrong order.",
        "instruction 2": "Finally, use the same gap size to fill back the whole list by comparing each element with its left neighbor, and if necessary, swap them to maintain the sorted order, and repeat this process until the gap size becomes 1, resulting in a sorted list."
    },
    {
        "task_id": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "instruction 1": "Identify the input parameter as two tuples, and assume that elementwise operation is meant as an addition.",
        "instruction 2": "Use Python'sZip function to iterate over the two tuples simultaneously, applying element-wise addition and returning a new tuple resulting from this operation."
    },
    {
        "task_id": 430,
        "prompt": "Write a function to find the directrix of a parabola.",
        "instruction 1": "Identify the input parameters as a list of coefficients a, b, and c representing the quadratic equation, and calculate the directrix from the coefficient 'a' and the vertex point.",
        "instruction 2": "Use mathematical formulas to calculate the directrix and return it as a decimal value, using the formula y = a/4 as the directrix equations in the standard form of a parabola equation."
    },
    {
        "task_id": 432,
        "prompt": "Write a function to find the median length of a trapezium.",
        "instruction 1": "Identify the input parameters as a trapezium with the initial and final points, and extract the vertices to calculate the length of each side.",
        "instruction 2": "Calculate the median length by finding the median of the lengths of all sides using the `statistics` module's `median()` function."
    },
    {
        "task_id": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "instruction 1": "Identify the input parameters as a single number and a list of numbers, and check whether the given number is greater than all the elements in the array.",
        "instruction 2": "Use a loop to iterate through the array and compare the given number with each element, using the greater than operator (>) to check if the condition is met, and return a boolean value indicating whether all elements are less than the given number."
    },
    {
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.",
        "instruction 1": "Identify the input parameter as the given number and extract the last digit by converting the number into a string and slicing the last character.",
        "instruction 2": "Return the last digit as an integer value by converting the string character to an integer using the int() function."
    },
    {
        "task_id": 436,
        "prompt": "Write a python function to return the negative numbers in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize an empty list to store the negative numbers.",
        "instruction 2": "Use a loop or list comprehension to iterate through the input list, and for each number, check if it is negative, if so, append it to the output list, then return the list of negative numbers."
    },
    {
        "task_id": 437,
        "prompt": "Write a function to remove odd characters in a string.",
        "instruction 1": "Identify the input parameter as a string and initialize an empty string to store the result.",
        "instruction 2": "Iterate over each character in the input string, and if the character is even, add it to the result string; otherwise, skip it."
    },
    {
        "task_id": 439,
        "prompt": "Write a function to join a list of multiple integers into a single integer.",
        "instruction 1": "Recognize the input as a list of integers and identify the goal is to combine these integers into a single integer.",
        "instruction 2": "Use Python's built-in `int()` function to convert each integer in the list to a string, join these strings together using the `join()` function, and then convert the resulting string back to an integer using the `int()` function."
    },
    {
        "task_id": 440,
        "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
        "instruction 1": "Identify the input as a string sentence and parse it into a list of individual words, and separate adjectives from adverbs using a dictionary or list comprehension.",
        "instruction 2": "Use a loop to iterate over the list of words and identify the first adverb, then extract its position by returning the index of the first word that meets the adverb definition, and its position as a list of indices separated by commas."
    },
    {
        "task_id": 441,
        "prompt": "Write a function to find the surface area of a cube of a given size.",
        "instruction 1": "Identify the input parameter as an integer representing the side length of the cube and create a variable to store the surface area, calculated as 6 times the square of the side length.",
        "instruction 2": "Return the calculated surface area as the output of the function."
    },
    {
        "task_id": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "instruction 1": "Identify the input parameters as two tuples of equal lengths and unpack them into separate variables using tuple unpacking. Ensure that the types of elements in the tuples are numeric or convertible to numeric.",
        "instruction 2": "Use the `zip()` function to transpose the tuples and then use a list comprehension with the `*` operator to perform element-wise multiplication of the corresponding elements, returning the resulting tuple."
    },
    {
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "instruction 1": "Identify the input parameters as a list and a tuple, and convert the tuple to a list to count the elements.",
        "instruction 2": "Use a dictionary to count the occurrences of each element in the list by iterating over the list and incrementing the corresponding count, then return the dictionary."
    },
    {
        "task_id": 447,
        "prompt": "Write a function to find cubes of individual elements in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers and define a new list to store the cube of each element.",
        "instruction 2": "Use a list comprehension to map each element in the input list to its cube and return the resulting list of cubes."
    },
    {
        "task_id": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "instruction 1": "Create a function to calculate Perrin numbers, initializing a list to store the Perrin sequence and a distinct loop to generate the sequence up to a specified nth term, calculating each term as the sum of the previous two terms.",
        "instruction 2": "Use a loop to iterate over the generated Perrin sequence, summing the elements up to the nth term and returning the result as the sum of Perrin numbers."
    },
    {
        "task_id": 450,
        "prompt": "Write a function to extract specified size of strings from a given list of string values.",
        "instruction 1": "Identify the input parameters as a list of strings and an integer size, and initialize an empty list to store the extracted strings.",
        "instruction 2": "Use a loop to iterate through the list of strings and extract the specified size of strings, append them to the result list and return it."
    },
    {
        "task_id": 451,
        "prompt": "Write a function to remove all whitespaces from the given string.",
        "instruction 1": "Define a function with a string parameter and initialize an empty string to store the result.",
        "instruction 2": "Use a loop to iterate over each character in the input string, using a conditional statement to check if the character is a whitespace, and if so, ignore it; otherwise, add the character to the result string, then return the string with whitespaces removed."
    },
    {
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.",
        "instruction 1": "Identify the input parameter as an integer n, then initialize an empty variable to store the sum of even factors and iterate from 1 to n using a for loop to find the factors of n.",
        "instruction 2": "Check if each factor is even, and if so, add it to the sum, using the modulo operator to determine if the factor is even, and finally return the calculated sum."
    },
    {
        "task_id": 454,
        "prompt": "Write a function that matches a word containing 'z'.",
        "instruction 1": "Identify the input as a list of strings (words) and use a for loop to iterate through each word in the list, checking if the word contains the character 'z' using the 'in' operator.",
        "instruction 2": "If a word contains 'z', add it to an output list or tuple, and return the list or tuple at the end."
    },
    {
        "task_id": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "instruction 1": "Identify the input parameter as an integer representing the month number (1-12) and define a list of months that have 31 days.",
        "instruction 2": "Use a conditional statement to check if the input month number is in the list of months with 31 days, and return True if it is, False otherwise."
    },
    {
        "task_id": 456,
        "prompt": "Write a function to reverse each string in a given list of string values.",
        "instruction 1": "Define a function that takes a list of strings as input and initialize an empty list to store the reversed strings.",
        "instruction 2": "Iterate through each string in the input list, use Python's slicing feature to reverse the string, and append the reversed string to the output list, then return the list of reversed strings."
    },
    {
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.",
        "instruction 1": "Initialize an empty list to store the lengths of sublists and identify the input as a list of integers.",
        "instruction 2": "Iterate through the list using a loop, calculate the length of each sublist, and find the minimum length; return the sublist with this minimum length using the `index()` method."
    },
    {
        "task_id": 458,
        "prompt": "Write a function to find the area of a rectangle.",
        "instruction 1": "Identify the input parameters as the length and width of the rectangle, and calculate the area using the formula area = length * width.",
        "instruction 2": "Return the calculated area as the output of the function."
    },
    {
        "task_id": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string.",
        "instruction 1": "Identify the input parameter as a string and initialize an empty string to store the result. Then, split the input string into substrings using the built-in split() function with no arguments to separate substrings at whitespace characters, then iterate through the resulting list of substrings.",
        "instruction 2": "Use a if-else condition to check if each substring contains any uppercase letters, and if it does, then do not include it in the result string, otherwise, append it to the result string, finally return the resulting string."
    },
    {
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.",
        "instruction 1": "Convert the input to a list of sublists and initialize an empty list to store the first element of each sublist.",
        "instruction 2": "Use a loop to iterate over the input list and append the first element of each sublist to the output list using indexing (0) and return the resulting list."
    },
    {
        "task_id": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "instruction 1": "Use a library such as `itertools` and the `combinations` function to generate all possible combinations of elements from the given list",
        "instruction 2": "Use a loop to iterate over the generated combinations and return the result as a list of lists, where each inner list represents a combination of the original list's elements"
    },
    {
        "task_id": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "instruction 1": "Identify the input parameter as an array of numbers and initialize variables to track the maximum product, the current product, and the minimum product, starting with the first element of the array.",
        "instruction 2": "Iterate through the array, updating the current product by multiplying the current element with the previous product, updating the maximum product if the current product is greater, and updating the minimum product if it is negative and greater than -1, then return the maximum product found."
    },
    {
        "task_id": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "instruction 1": "Identify the input parameter as a dictionary and initialize an empty dictionary to store the non-empty items.",
        "instruction 2": "Use a loop to iterate over the items in the original dictionary, check if each value is not empty, and if so, add the key-value pair to the new dictionary using the dictionary's `update()` method, then return the new dictionary with no empty items."
    },
    {
        "task_id": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize an empty dynamic programming table to store the maximum product for each subsequence end with each element.",
        "instruction 2": "Use a loop to iterate through the list and update the dynamic programming table by multiplying the maximum product of the previous elements and the current element, and keep track of the maximum product found so far using a variable, then return the maximum product found in the table."
    },
    {
        "task_id": 470,
        "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "instruction 1": "Identify the input parameter as a tuple of numbers and initialize an empty list to store the pairwise additions of neighboring elements.",
        "instruction 2": "Use a loop to iterate over the tuple, adding the current element with its adjacent elements (if they exist) to the list and returning the list of pairwise additions."
    },
    {
        "task_id": 471,
        "prompt": "Write a python function to find the product of the array multiplication modulo n.",
        "instruction 1": "Identify the input parameters as an array of integers and an integer n that represents the modulus, and initialize the product to 1.",
        "instruction 2": "Use a loop to iterate through each element in the array, multiply the current product by each element modulo n, and finally return the product modulo n."
    },
    {
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "instruction 1": "Identify the input parameter as a list of numbers and consider each number to be a potential starting point for a possible sequence of consecutive numbers.",
        "instruction 2": "Use a loop to iterate through the list, starting from each number, and check if the subsequent numbers in the list are consecutive by subtracting the previous number from the current number; if all numbers are consecutive, return True, else return False."
    },
    {
        "task_id": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "instruction 1": "From the given tuple list, extract each tuple into a set, then convert all sets into a single set, and finally convert the resulting set back into a tuple list to remove duplicate elements regardless of order.",
        "instruction 2": "Define the function that takes a list of tuples as input, apply the proposed steps, and return the resulting tuple intersection."
    },
    {
        "task_id": 474,
        "prompt": "Write a function to replace characters in a string.",
        "instruction 1": "Identify the function's parameters as a string and a dictionary where the keys are the old characters and the values are the new characters to replace with, then initialize an empty string to store the result.",
        "instruction 2": "Use a loop to iterate over each character in the input string, replacing old characters with new characters using the dictionary, and concatenate the result to the result string using the `join()` function."
    },
    {
        "task_id": 475,
        "prompt": "Write a function to sort a dictionary by value.",
        "instruction 1": "Write a Python function that takes a dictionary as input and converts its items into a list of tuples, where each tuple contains the key-value pair.",
        "instruction 2": "Use Python's built-in `sorted()` function to sort the list of tuples based on the values, and then return a new dictionary with the same keys but sorted values."
    },
    {
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "instruction 1": "Identify the input parameter as an array of numbers and sort it in ascending order to get the smallest and largest values.",
        "instruction 2": "Return the sum of the smallest and largest values in the array using indexing to get the first and last elements of the sorted array."
    },
    {
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.",
        "instruction 1": "Define a function with one input parameter as a string, and initialize an empty string variable to store the converted result.",
        "instruction 2": "Use the `lower()` method to convert the input string to lowercase and assign it to the variable, then return the converted result."
    },
    {
        "task_id": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "instruction 1": "Identify the input parameter as a string and initialize an empty variable to store the output string, then iterate over each character in the input string to check if the character is lowercase.",
        "instruction 2": "Use an if-statement to check if the character is lowercase, and if so, use string slicing to extract the substring and concatenate the rest of the string without the lowercase substring, otherwise, add the character to the output string."
    },
    {
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.",
        "instruction 1": " Identify the input parameter as an integer and convert the integer into a string to easily access the digits.",
        "instruction 2": " Use a while loop to extract the first digit from the string and return the integer value of that digit."
    },
    {
        "task_id": 554,
        "prompt": "Write a python function which takes a list of integers and only returns the odd ones.",
        "instruction 1": "Identify the input parameter as a list of integers and use a loop to iterate through the list, checking if each integer is odd and storing the odd numbers in a new list.",
        "instruction 2": "Return the new list of odd integers using the `return` statement."
    },
    {
        "task_id": 555,
        "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of natural numbers, and define two variables to store the sum of cubes and the sum of numbers.",
        "instruction 2": "Use arithmetic formulas to calculate the sum of cubes and the sum of numbers, and return the difference between the two sums."
    },
    {
        "task_id": 556,
        "prompt": "Write a python function to count the number of pairs whose xor value is odd.",
        "instruction 1": "Identify the input as a list of integers and initialize a counter variable to zero. Determine the length of the list.",
        "instruction 2": "Use a for loop to iterate over the list, check if the XOR operation of the current element with all remaining elements is odd, and increment the counter if true. Return the total count of such pairs."
    },
    {
        "task_id": 557,
        "prompt": "Write a function to toggle the case of all characters in a string.",
        "instruction 1": "Identify the input parameter as a string to be processed, and initialize an empty string to store the resulting string with toggled case.",
        "instruction 2": "Use Python's built-in `str.lower()` and `str.upper()` methods along with a loop or list comprehension to iterate over the characters in the input string, toggling the case of each character and concatenating the result in the output string."
    },
    {
        "task_id": 558,
        "prompt": "Write a python function to find the sum of the per-digit difference between two integers.",
        "instruction 1": "Identify the input parameters as two integers and convert each integer into a list of digits using the `str()` function and the `list()` function.",
        "instruction 2": "Use a loop to calculate the absolute difference between corresponding digits in the two lists of digits, sum up these differences using the `sum()` function, and return the result."
    },
    {
        "task_id": 559,
        "prompt": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "instruction 1": "Identify the input parameter as a list of numbers, and initialize variables to store the maximum sum and the current sum, as well as the start and end indices of the current sum.",
        "instruction 2": "Use a loop to iterate over the list, updating the current sum and start indices as you add or remove elements from the current sublist, and update the maximum sum and end indices if the current sum is greater, then return the maximum sum."
    },
    {
        "task_id": 560,
        "prompt": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "instruction 1": "Combine the two input tuples into one and convert it to a set to remove duplicates, then convert the set back to a list and sort it.",
        "instruction 2": "Return the sorted list from the previous step, ensuring the order of the elements corresponds to the union operation."
    },
    {
        "task_id": 562,
        "prompt": "Write a python function to find the length of the longest sublists.",
        "instruction 1": "Identify the input parameter as a list of lists and iterate through each sublist to calculate its length. Store the length in a variable.",
        "instruction 2": "Use a conditional statement or a built-in function like `max()` to find the maximum value among the lengths of the sublists and return it."
    },
    {
        "task_id": 563,
        "prompt": "Write a function to extract values between quotation marks from a string.",
        "instruction 1": "Split the input string into a list of substrings using the split() function with a delimiter of '\"' to extract substrings surrounded by quotation marks, and then iterate through the resulting list.",
        "instruction 2": "Use a loop to concatenate each substring and its preceding/unending space, and the preceding substring, if any, to reconstruct the intended extracted values as strings, and return a list of the extracted values."
    },
    {
        "task_id": 564,
        "prompt": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize two variables to store the count of pairs and a temporary variable for tracking the current element.",
        "instruction 2": "Use a loop to iterate over the list, and for each element, calculate the number of remaining elements that are unequal and add this count to the total pair count, then return the total pair count."
    },
    {
        "task_id": 565,
        "prompt": "Write a python function to split a string into characters.",
        "instruction 1": "Identify the input parameter as a string that needs to be split into individual characters.",
        "instruction 2": "Use Python's slicing technique or the `list()` function to split the string into a list of characters, and return the resulting list."
    },
    {
        "task_id": 566,
        "prompt": "Write a function to get the sum of the digits of a non-negative integer.",
        "instruction 1": "Identify the input parameter as a non-negative integer and convert it to a string to easily access each digit, then initialize a variable to store the sum.",
        "instruction 2": "Use a loop to iterate through each character (digit) in the string representation of the integer, convert the character back to an integer, add the digit to the sum, and return the total sum."
    },
    {
        "task_id": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.",
        "instruction 1": "Identify the input parameter as the list to be checked and compare each element with its adjacent elements to determine if it is in ascending order.",
        "instruction 2": "Use a loop to iterate through the list and return True if all adjacent elements are in ascending order, and False otherwise."
    },
    {
        "task_id": 568,
        "prompt": "Write a function to create a list of N empty dictionaries.",
        "instruction 1": "Identify the input parameter as an integer N that represents the number of empty dictionaries needed and initialize an empty list.",
        "instruction 2": "Use a loop to iterate N times, creating an empty dictionary within the loop and appending it to the list."
    },
    {
        "task_id": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
        "instruction 1": "Identify the input parameter as a list of lists containing strings and use a loop to iterate over each sublist, converting each sublist to a list of sorted strings using the built-in sorted() function",
        "instruction 2": "Use a list comprehension to create a new list of lists where each sublist is the sorted equivalent of the corresponding input sublist"
    },
    {
        "task_id": 572,
        "prompt": "Write a python function to remove duplicate numbers from a given number of lists.",
        "instruction 1": "Identify the input parameter as a list of lists containing numbers and convert each inner list into a set to remove duplicates within each list, then convert the set back to a list.",
        "instruction 2": "Use a list comprehension to create a new list that flattens the list of lists and removes duplicates by converting the resulting list to a set and back to a list, and return the resulting list."
    },
    {
        "task_id": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers in a given list.",
        "instruction 1": "Identify the input parameter as a list and use the `set` data structure to remove duplicates and get the unique numbers in the list.",
        "instruction 2": "Use the `math.prod` function (or the `functools.reduce` function with the `operator.mul` function) to calculate the product of the unique numbers in the list."
    },
    {
        "task_id": 576,
        "prompt": "Write a python function to check whether a list is sublist of another or not.",
        "instruction 1": "Identify the input parameters as two lists, the main list and the potential sublist, and implement a control structure (e.g., for loop) to iterate over the main list and check if each element is present in the potential sublist.",
        "instruction 2": "Use Python's built-in set operations to convert the potential sublist into a set and then check if each element in the main list is present in the set, returning True if all elements are found and False otherwise."
    },
    {
        "task_id": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the given number and compute its factorial using the `math.factorial()` function.",
        "instruction 2": "Use the `math.mod()` function to find the remainder of the factorial divided by 10, which will give the last digit of the factorial."
    },
    {
        "task_id": 578,
        "prompt": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "instruction 1": "Identify the input parameters as three lists of the same length and define a variable to store the result list, initially set to an empty list.",
        "instruction 2": "Use a for loop to iterate through the index range of the lists, and in each iteration, append the elements from each list to the result list in sequence, i.e., the first element from the first list, the first element from the second list, the first element from the third list, and so on."
    },
    {
        "task_id": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.",
        "instruction 1": "Identify the input parameters as two tuples and initialize sets to store unique elements from both tuples, then find the set difference between the two sets to identify dissimilar elements.",
        "instruction 2": "Use the `set.difference()` method to obtain the set of dissimilar elements and convert it back to a list or tuple, then return it as the output."
    },
    {
        "task_id": 580,
        "prompt": "Write a function to remove uneven elements in the nested mixed tuple.",
        "instruction 1": "Identify the input parameter as a nested mixed tuple and initialize an empty list to store the even elements.",
        "instruction 2": "Use a loop to iterate over each element in the tuple, check if the element is even, and if it is, append it to the list; return the list of even elements."
    },
    {
        "task_id": 581,
        "prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "instruction 1": "Identify the input parameter as the base edge length and height of the square pyramid and calculate the slant height using the Pythagorean theorem.",
        "instruction 2": "Use the formula for the surface area of a square pyramid, which is 4 * base_area + 4 * (1/2) * base * slant_height, to calculate the surface area and return the result."
    },
    {
        "task_id": 583,
        "prompt": "Write a function which returns nth catalan number.",
        "instruction 1": "Identify the input parameter as an integer n, and define the Catalan number function as a recursive function that calculates and returns the nth Catalan number using the formula 2n choose n / (n + 1).",
        "instruction 2": "Use recursion to calculate the nth Catalan number by calling the function itself with n - 1 and n - 2, and then return the result divided by (2n + 1).ategory [Python]"
    },
    {
        "task_id": 585,
        "prompt": "Write a function to find the n most expensive items in a given dataset.",
        "instruction 1": "Identify the input parameter as a list of dictionaries representing the dataset, where each dictionary contains the item name and its corresponding price, and sort the list in descending order based on the price.",
        "instruction 2": "Use Python's built-in `rsort()` function to sort the list, and return a new list or a slice of the original list containing the n most expensive items."
    },
    {
        "task_id": 586,
        "prompt": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "instruction 1": "Identify the input parameter as a list and an integer n that specifies the splitting position, then check if the input list is empty or if n is out of range.",
        "instruction 2": "Use list slicing to divide the list into two parts at the specified position, then concatenate the second part with the end of the list and return the modified list."
    },
    {
        "task_id": 587,
        "prompt": "Write a function to convert a list to a tuple.",
        "instruction 1": "Define a function with a single input parameter as a list, convert it to a set, and then convert the set back to a tuple",
        "instruction 2": "Return the tuple as the result of the function"
    },
    {
        "task_id": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers and find the smallest and largest values using the built-in `min()` and `max()` functions.",
        "instruction 2": "Subtract the smallest value from the largest value using the `-` operator and return the result as the difference between the largest and smallest values."
    },
    {
        "task_id": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.",
        "instruction 1": "Identify the input parameters as two integers, the lower and upper bounds, and use nested loops to generate numbers within the bounds, checking if each number is a perfect square using the `math.sqrt()` function and converting the result to an integer.",
        "instruction 2": "Use a list comprehension to filter the generated numbers, adding the perfect squares to a new list, which is then returned."
    },
    {
        "task_id": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.",
        "instruction 1": "Identify the input parameters as a tuple of polar coordinates containing the radius and angle, and extract these values for further use.",
        "instruction 2": "Use trigonometric functions sin() and cos() to convert the polar coordinates into rectangular coordinates (x, y), then return them as a tuple."
    },
    {
        "task_id": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.",
        "instruction 1": "Identify the input parameter as a list and check if it has at least one element, and if not return or handle the exception according to the required logic.",
        "instruction 2": "Use straightforward list indexing and assignment to swap the first and last elements of the list."
    },
    {
        "task_id": 592,
        "prompt": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
        "instruction 1": "Identify the input parameter as an integer n that represents the level of the binomial coefficients, and define a variable to store the result sum and calculate the binomial coefficients using the math.comb function.",
        "instruction 2": "Use a loop to calculate the product of consecutive binomial coefficients and add them to the result sum, considering the range from 0 to n, then return the final sum."
    },
    {
        "task_id": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.",
        "instruction 1": "Split the input IP address into its four octets using the '.' as a delimiter, and store them in a list.",
        "instruction 2": "Use a loop to iterate through the list of octets, converting each octet to an integer and removing leading zeroes using Python's string manipulation functions, then return the modified IP address as a string."
    },
    {
        "task_id": 594,
        "prompt": "Write a function to find the difference of the first even and first odd number of a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers, and iterate through the list to find the first even and first odd numbers.",
        "instruction 2": "Calculate the difference between the first even and first odd numbers, and return the result as the output of the function"
    },
    {
        "task_id": 596,
        "prompt": "Write a function to find the size in bytes of the given tuple.",
        "instruction 1": "Identify the input parameter as a tuple and import the `sys` module for the `getsizeof` function.",
        "instruction 2": "Use the `getsizeof` function to find the size in bytes of the tuple and return the result."
    },
    {
        "task_id": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.",
        "instruction 1": "Identify the input parameters as two lists of sorted numbers and an integer k that represents the index of the desired element, initialize two pointers at the beginning of each list, and compare the elements at the front of each list.",
        "instruction 2": "Move the pointer of the shorter list toward the end until the desired element is found, moving the pointer of the other list one step forward when a new element is compared, and return the kth element."
    },
    {
        "task_id": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.",
        "instruction 1": "Identify the input parameter as an integer number, digits, and store the original number, calculate the power of each digit raised to the power of its position, and sum up these powers.",
        "instruction 2": "Compare the sum with the original number, if it's equal, then the number is an Armstrong number, and return True, otherwise, return False"
    },
    {
        "task_id": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of natural numbers to calculate the sum and average for, and initialize variables to hold the sum and count.",
        "instruction 2": "Use a loop to iterate from 1 to n, calculate the sum of the natural numbers using the formula sum = sum + i, and increment the count by 1, then calculate the average by dividing the sum by the count."
    },
    {
        "task_id": 600,
        "prompt": "Write a python function to check whether the given number is even or not.",
        "instruction 1": "Define a function with an integer as the input parameter and initialize a variable to store the result.",
        "instruction 2": "Use a conditional statement to check if the remainder of the input number divided by 2 is 0, and return 'even' if true, or 'odd' if false."
    },
    {
        "task_id": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.",
        "instruction 1": "Identify the input parameter as the given string and create a variable to store the first repeated character, initialized with None.",
        "instruction 2": "Use a loop to iterate through the characters in the string, checking if the current character is in a separate dictionary; if it is, update the variable with the first repeated character and break the loop, otherwise, add the character to the dictionary."
    },
    {
        "task_id": 603,
        "prompt": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "instruction 1": "Identify the input parameter as an integer num and initialize an empty list to store lucid numbers. Define a helper function to check whether a number is lucid.",
        "instruction 2": "Use a loop to iterate from 1 to num, check each number for lucidity using the helper function, and if lucid, append it to the list. Return the list of lucid numbers."
    },
    {
        "task_id": 604,
        "prompt": "Write a function to reverse words seperated by spaces in a given string.",
        "instruction 1": "Split the input string into a list of words separated by spaces using the `split()` function and then reverse the list of words.",
        "instruction 2": "Join the reversed list of words back into a string using the `join()` function with a space character as the separator."
    },
    {
        "task_id": 605,
        "prompt": "Write a function to check if the given integer is a prime number.",
        "instruction 1": "Identify the input parameter as an integer and check if it is divisible by any number up to the square root of the integer, returning False for any divisor found and True otherwise.",
        "instruction 2": "Use a loop to iterate from 2 to the square root of the integer, checking if the integer is divisible by each number and returning the result of the check."
    },
    {
        "task_id": 606,
        "prompt": "Write a function to convert degrees to radians.",
        "instruction 1": "Identify the input parameter as an angle in degrees and import the necessary module math to access the constant pi and the function sin.",
        "instruction 2": "Use the formula to convert degrees to radians by multiplying the input angle by pi divided by 180, and return the result."
    },
    {
        "task_id": 607,
        "prompt": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "instruction 1": "Identify the input parameters as a string and a regex pattern, and use Python's `re` module to search for matches of the regex pattern in the string.",
        "instruction 2": "Use the `re.search()` function to find the first occurrence of the regex pattern in the string, then return the matched substring, start index, and end index using the `group()`, `start()` and `end()` methods of the `match` object respectively."
    },
    {
        "task_id": 608,
        "prompt": "Write a python function to find nth bell number.",
        "instruction 1": "Define a recursive function to calculate the nth Bell number using the formula B(n) = sum(C(n-1, k) * B(n-1-k)) for 0 <= k <= n-1, where C(n-1, k) is the number of combinations of k items from n-1 items.",
        "instruction 2": "Implement the recursive function in Python, providing a base case for when n is 0, and use binary recursive adding to combine the results for the current and previous Bell numbers."
    },
    {
        "task_id": 610,
        "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "instruction 1": "Identify the input parameter as a list and the integer k that specifies the index of the element to be removed.",
        "instruction 2": "Use Python's list slicing to create a new list that includes all elements from the input list except for the k'th element, then return this new list."
    },
    {
        "task_id": 611,
        "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "instruction 1": "Identify the input parameter as a list of lists representing the matrix and an integer n representing the column index, then extract the nth column from the matrix.",
        "instruction 2": "Use a list comprehension to generate a new list containing the n'th column, and return the maximum value from this list using the built-in max() function."
    },
    {
        "task_id": 612,
        "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "instruction 1": "Identify the input parameter as a list of lists, where each sublist contains exactly two elements, and unpack the sublists into two separate lists, one for the first elements and one for the second.",
        "instruction 2": "Return the unpacked lists using list slicing and the `zip()` function, or by iterating over the input list with list comprehensions."
    },
    {
        "task_id": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "instruction 1": "Identify the input parameter as a list of tuples and extract each tuple to access its individual values. Use the built-in sum function with the accumulate function from the itertools module to calculate the cumulative sum",
        "instruction 2": "Combine the cumulative sum of each tuple's values and return the final result by applying the sum function on the list of running totals"
    },
    {
        "task_id": 615,
        "prompt": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
        "instruction 1": "Identify the input parameter as a tuple of tuples, and iterate through each inner tuple to sum its elements.",
        "instruction 2": "Calculate the average value for each inner tuple by dividing the sum of the elements by the length of the tuple, and store the results in a list."
    },
    {
        "task_id": 616,
        "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "instruction 1": "Identify the input parameters as two tuples with the same length and assign them to variables.",
        "instruction 2": "Iterate over the indices and elements of the tuples using a loop, and for eachpair of corresponding elements, use the modulo operator to calculate the result and store it in a new tuple or list."
    },
    {
        "task_id": 618,
        "prompt": "Write a function to divide two lists element wise.",
        "instruction 1": "Identify the input parameters as two lists of numbers, then initialize an empty list to store the result, and create a loop to iterate through the corresponding elements of the input lists.",
        "instruction 2": " Inside the loop, calculate the element-wise division of the corresponding elements from the input lists, using the `/` operator, and append the results to the result list."
    },
    {
        "task_id": 619,
        "prompt": "Write a function to move all the numbers to the end of the given string.",
        "instruction 1": "Write a Python function that takes a string as input and separates the string into two lists, one for non-numeric characters and another for numeric characters.",  
        "instruction 2": "Combine the non-numeric characters and numeric characters lists into a single string, starting with the non-numeric characters and then the numeric characters, and return the result."
    },
    {
        "task_id": 620,
        "prompt": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "instruction 1": "Identify the input as a list of numbers and initialize an empty set to store the indices of the considered numbers, then iterate through the list to find the indices of perfect squares, marking them in the set.",
        "instruction 2": "Use the set to find the maximum contiguous subset, excluding non-perfect square numbers, by summing the powers of the marked indices and returning the maximum sum."
    },
    {
        "task_id": 622,
        "prompt": "Write a function to find the median of two sorted lists of same size.",
        "instruction 1": "Identify the input parameters as two sorted lists of integers with the same size, and initialize two pointers, one at the beginning of each list.",
        "instruction 2": "Use a loop to iterate through the lists, comparing elements at each pointer position and incrementing the pointer of the smaller element; after each iteration, return the middle element between the two lists as the median."
    },
    {
        "task_id": 623,
        "prompt": "Write a function to compute the n-th power of each number in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers, and define a variable or function parameter to represent the index n for calculating the power.",
        "instruction 2": "Use a loop or list comprehension to iterate over the input list, raising each element to the power of n using the built-in power operator (** or pow() function), and return the resulting list of powered elements."
    },
    {
        "task_id": 624,
        "prompt": "Write a python function to convert a given string to uppercase.",
        "instruction 1": "Identify the input parameter as a string and use the built-in `isupper()` method to check if the string is already uppercase, and assign it to a new variable if it is.",
        "instruction 2": "Use the built-in `upper()` method to convert the string to uppercase and return the result."
    },
    {
        "task_id": 626,
        "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "instruction 1": "Identify the input parameter as the radius of the semicircle and calculate the diagonal of the triangle using Pythagorean theorem, as the diagonal will be equal to the radius of the semicircle.",
        "instruction 2": "Use the calculated diagonal and the radius to calculate the shorter legs of the triangle, then find the area of the triangle using the formula 0.5 * base * height and return the maximum area."
    },
    {
        "task_id": 628,
        "prompt": "Write a function to replace all spaces in the given string with '%20'.",
        "instruction 1": "Identify the input parameter as a string and develop a function to replace all spaces with '%20'.",
        "instruction 2": "Use the replace() method of the string class to replace all spaces with '%20' and return the resulting string."
    },
    {
        "task_id": 629,
        "prompt": "Write a python function to find even numbers from a list of numbers.",
        "instruction 1": "Use a for loop to iterate over the list of numbers and check each number to see if it is even, storing the even numbers in a new list.",
        "instruction 2": "Return the list of even numbers."
    },
    {
        "task_id": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "instruction 1": "Identify the input parameter as a tuple of three integers representing the coordinates (x, y, z), and determine the possible adjacent coordinates by considering the coordinates directly above, below, to the left, to the right, and diagonally from the given coordinates.",
        "instruction 2": "Use Python's conditional statements to generate the possible adjacent coordinates based on the given boundaries and the differences between the corresponding coordinates, placing them in a list of tuples."
    },
    {
        "task_id": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "instruction 1": "Identify the input parameter as a string and create a new empty string to store the result. Use Python's built-in string methods to traverse each character in the string and replace spaces with underscores for characters that are spaces and underscores with spaces for characters that are underscores.",
        "instruction 2": "Return the modified string as the result, using the new string that was created in the previous step."
    },
    {
        "task_id": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.",
        "instruction 1": "Identify the input parameter as a list and initialize two pointers, one at the start and one at the end of the list.",
        "instruction 2": "Iterate through the list until the pointers meet, moving all non-zero elements to the front and non-zero elements to the rear using list slicing and the `append()` and `insert()` methods."
    },
    {
        "task_id": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize a variable to store the sum of the XOR of all pairs.",
        "instruction 2": "Use a loop to iterate through the list, iterate through the list again, calculating the XOR of each pair of numbers in the outer loop and inner loop, and add the result to the sum variable, then return the sum."
    },
    {
        "task_id": 635,
        "prompt": "Write a function to sort the given list.",
        "instruction 1": "Identify the input parameter as a list of elements to be sorted, and specify the sorting method, such as ascending or descending, and assume the default is ascending.",
        "instruction 2": "Use Python's built-in `sorted()` function or list comprehension to sort the input list and return the sorted list, taking into account the specified sorting method."
    },
    {
        "task_id": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss",
        "instruction 1": "Identify the input parameters as a list of stock prices on consecutive days, and initialize variables to track the minimum price and maximum profit>()",  
        "instruction 2": "Iterate through the list of stock prices, and for each day, if the current price is less than the minimum price, update the minimum price; if the current profit is greater than the maximum profit, update the maximum profit; if the maximum profit is greater than 0, return True; otherwise, return False"
    },
    {
        "task_id": 638,
        "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "instruction 1": "Define the formula for calculating the wind chill temperature as TC = 13.12 + 0.6215*T - 11.37*(V^0.16) + 0.3965*T*(V^0.16) and the rounding function as math.ceil or math.floor to round the result to the next integer.",
        "instruction 2": "Use the wind velocity and temperature as input parameters, calculate the wind chill temperature using the formula and the rounding function, and return the result as an integer."
    },
    {
        "task_id": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "instruction 1": "Identify the input parameter as a list of names and use a loop to iterate over the list, applying a conditional statement to exclude names that start with a lowercase letter and store the remaining names in a new list.",
        "instruction 2": "Use a loop to iterate over the new list of names, calculate the length of each name using the `len()` function, and sum up the lengths of the names using the `sum()` function, returning the total sum as the result."
    },
    {
        "task_id": 641,
        "prompt": "Write a function to find the nth nonagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the nonagonal number to find, and implement a formula to calculate the nth term of the nonagonal numbers sequence.",
        "instruction 2": "Use the calculated formula to determine the nth nonagonal number and return the result."
    },
    {
        "task_id": 643,
        "prompt": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "instruction 1": "Identify the input parameter as a string and use the `str` function to convert it to lowercase, then check if the string starts and ends with the character 'z'.",
        "instruction 2": "Use a conditional statement and the `str` function to check if the characters between the start and end of the string contain any 'z' and return a boolean value accordingly."
    },
    {
        "task_id": 644,
        "prompt": "Write a python function to reverse an array upto a given position.",
        "instruction 1": "Define a Python function with two parameters: a list of numbers and a position integer to specify where the reversal should stop.",
        "instruction 2": "Use list slicing to extract the portion of the list up to the specified position and then use slicing with negative indices to reverse the extracted portion, and concatenate the two parts to return the modified list."
    },
    {
        "task_id": 720,
        "prompt": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "instruction 1": "Identify the input parameters as a tuple and a dictionary, and create a new tuple by adding the dictionary to the existing tuple.",
        "instruction 2": "Use the '+' operator to concatenate the tuple and dictionary, then return the resulting tuple."
    },
    {
        "task_id": 721,
        "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "instruction 1": "Identify the input parameter as a square matrix and define a function to traverse all possible paths from the top-left to the bottom-right cell, calculating the total cost and number of cells visited for each path.",
        "instruction 2": "Among all paths calculated in the previous step, find the path with the highest total cost and divide it by the number of cells visited to calculate the maximum average, and return it as the output."
    },
    {
        "task_id": 722,
        "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "instruction 1": "Identify the input parameters as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, and separate the minimal height and weight from the input.",
        "instruction 2": "Use a loop to iterate over the dictionary, and check if the student's height and weight are greater than or equal to the minimum height and weight, if true, return a new dictionary with the student's name as the key and their height and weight as the value, returning an empty dictionary if no students meet the criteria."
    },
    {
        "task_id": 723,
        "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "instruction 1": "Create a function that accepts two lists of the same length as input parameters and initialize an empty counter.",
        "instruction 2": "Use a loop to iterate over the elements of the lists, comparing corresponding elements at each index, and increment the counter when the elements are equal; finally, return the count of matched indices."
    },
    {
        "task_id": 724,
        "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "instruction 1": "Identify the input parameters as an integer base and an integer power, and use the built-in pow() function to calculate the result of raising the base to the power.",
        "instruction 2": "Convert the result to a string, then use a loop to iterate through each character (digit) of the string, convert each character back to an integer using the int() function, and sum all the digits using a running total variable."
    },
    {
        "task_id": 725,
        "prompt": "Write a function to extract values between quotation marks \" \" of the given string.",
        "instruction 1": "\"instruction 1\": \"Split the input string into substrings using the regular expression pattern r'\"",
        "instruction 2": "\"instruction 2\": \"Return the list of extracted substrings that are inside quotation marks.\""
    },
    {
        "task_id": 726,
        "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "instruction 1": "Identify the input parameter as a tuple of numbers and its length N+1, then initialize an empty tuple of length N.",
        "instruction 2": "Use a loop to iterate from 1 to N, multiply the i-th and (i+1)-th elements of the input tuple, and append the result to the new tuple."
    },
    {
        "task_id": 728,
        "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "instruction 1": "Identify the input parameters as two lists of numbers with the same length, and initialize an empty list to store the results.",
        "instruction 2": "Use a loop to iterate through each pair of corresponding elements in the input lists, add the elements together using the '+' operator, and append the result to the output list."
    },
    {
        "task_id": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.",
        "instruction 1": "Identify the input parameter as a list and initialize an empty list to store the result; then iterate through the input list and check if the current element is different from the previous element.",
        "instruction 2": "If the current element is different from the previous element, append it to the result list; otherwise, do nothing; return the result list."
    },
    {
        "task_id": 731,
        "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "instruction 1": "Identify the input parameters as the radius r and height h, and calculate the slant height l of the cone using the formula l = sqrt(r^2 + h^2), then calculate the lateral surface area using the formula πr(l + r).",
        "instruction 2": "Return the lateral surface area as the result, formatted as a floating-point number with two decimal places."
    },
    {
        "task_id": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "instruction 1": " Define a Python function that takes a string input parameter and uses a loop to iterate through each character in the string, replacing spaces, commas, and dots with a colon using the replace() method.",
        "instruction 2": "Return the modified string from the function, ensuring that the replacement is done correctly for all occurrences of spaces, commas, or dots throughout the input string."
    },
    {
        "task_id": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "instruction 1": "Write a function that takes an input parameter as a sorted list of numbers and another input parameter as the target number. Use binary search algorithm to find the index of the first occurrence of the target number in the sorted list.",
        "instruction 2": "Implement binary search by comparing the target number to the middle element of the subarray, and recursively searching either the left or right half of the subarray based on the comparison, until the target number is found or the subarray is empty."
    },
    {
        "task_id": 734,
        "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "instruction 1": "Implement a helper function to generate all possible sublists of the input list and use nested loops to iterate over the list, and recursively generate all sublists.",
        "instruction 2": "Use the helper function to calculate the product of each sublist and sum them up, returning the total sum as the final result."
    },
    {
        "task_id": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "instruction 1": "Identify the input parameter as an integer representing the number to toggle the bits in, and initialize an integer to store the result.",
        "instruction 2": "Use bitwise operations and logical operations to toggle the bits within the number, excluding the first and last bit, and return the resulting number."
    },
    {
        "task_id": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
        "instruction 1": "Identify the input parameter as a sorted list of numbers and the target value to locate the left insertion point for, then iterate through the list using a binary search algorithm to find the index of the first element that is greater than the target value, or the length of the list if the target value is greater than all elements.",
        "instruction 2": "Return the index found in the binary search as the left insertion point for the target value in the sorted list."
    },
    {
        "task_id": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "instruction 1": "Use the `re` module and import regular expression patterns to identify the set of vowels and then check if the given string starts with any of these vowels using the `match()` or `search()` function.",
        "instruction 2": "Define a boolean flag to store the result of the check, and return the flag based on the condition, with a breakdown of 'True' for strings starting with a vowel and 'False' for strings not starting with a vowel."
    },
    {
        "task_id": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of digits, and initialize the smallest triangular number to 1.",
        "instruction 2": "Use a loop to generate triangular numbers incrementally and check if their number of digits is greater than or equal to n, returning the index of the smallest triangular number that meets this condition."
    },
    {
        "task_id": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
        "instruction 1": "Identify the input parameter as a tuple of adjacent elements and separate them into keys and values by slicing the tuple into pairs, considering the first element of each pair as the key and the second element as the value.",
        "instruction 2": "Use a dictionary comprehension to create a dictionary from the key-value pairs by iterating over the slice of pairs, and return the resulting dictionary."
    },
    {
        "task_id": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.",
        "instruction 1": "Identify the input parameter as a string and store it in a variable. Then, use the set data structure to find the unique characters in the input string.",
        "instruction 2": "Check if the length of the set is 1, meaning all characters in the string are the same; otherwise, return False as the function."
    },
    {
        "task_id": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.",
        "instruction 1": "Identify the input parameters as the sides of the tetrahedron expressed as a list of four numbers, and calculate the side length using the Heron's formula and then calculate the area using the formula (sqrt(24*side1*side2*side3) / sqrt(6*side1*side2*side3*1)).",
        "instruction 2": "Calculate the area using the above formula and return the result."
    },
    {
        "task_id": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
        "instruction 1": "Identify the input parameters as a list and an integer that represents the number of items to rotate to the right, and initialize a variable to store the rotated list.",
        "instruction 2": "Use Python's list slicing and concatenation to split the list into two parts, shift the first part by the specified number of items, and combine the parts in the correct order, then return the rotated list."
    },
    {
        "task_id": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.",
        "instruction 1": "Identify the input parameter as a tuple and initialize a variable to track whether the tuple contains a non-None value.",
        "instruction 2": "Use a loop to iterate over each element in the tuple and check if the element is None; if a None value is found, set the tracking variable to True; otherwise, set it to False and return the boolean value."
    },
    {
        "task_id": 745,
        "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
        "instruction 1": "Define a function that takes two integers startnum and endnum as input parameters and uses a function to check if a number is divisible by every digit it contains, before filtering the range of numbers between startnum and endnum (inclusive) and returning a list of such numbers.",
        "instruction 2": "Implement the function to check divisibility using a for loop to iterate through each digit of the number and use the modulus operator to check if the number is divisible by the digit, returning a boolean value if the number meets the condition."
    },
    {
        "task_id": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string.",
        "instruction 1": "Split the input string into words and identify the words starting with capital letters, noting their positions and the characters following the capital letters.",
        "instruction 2": "Replace the space following each capital letter with the desired number of spaces (based on the problem description) using Python's string manipulation functions, and then join the words back into a single string to return the modified string."
    },
    {
        "task_id": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
        "instruction 1": "Use Python's built-in sort function with the key argument set to the lambda function that converts the string to an integer and returns the result.",
        "instruction 2": "Apply the sort function to the list of strings, thereby sorting them numerically."
    },
    {
        "task_id": 750,
        "prompt": "Write a function to add the given tuple to the given list.",
        "instruction 1": "Identify the input parameters as the list to be modified and the tuple to be added, and confirm if the list is of a mutable data type (such as list or array)",
        "instruction 2": "Use the '+=' operator to extend the list by appending the tuple, and return the modified list"
    },
    {
        "task_id": 751,
        "prompt": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "instruction 1": "Identify the input parameter as an array of integers and compare the left child of every non-leaf node with its parent node, ensuring that the parent node's value is either equal to or smaller than the left child's value, to verify if the given array represents a min heap.",
        "instruction 2": "Using a loop iterate through each element in the array starting from the root of the heap (first element), compare the left child and right child of each node and their parent node, and check if the condition mentioned in step 1 is satisfied, if not, return False; otherwise, return True indicating the array represents a min heap."
    },
    {
        "task_id": 752,
        "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "instruction 1": "Define the Jacobsthal sequence using a recursive formula and initialize the function with base cases for n = 0 and n = 1, then use the recursive formula to calculate the nth Jacobsthal number.",
        "instruction 2": "Create a loop to iterate from 2 to the given number n, each time calculating the Jacobsthal number using the recursive formula, and return the calculated nth Jacobsthal number."
    },
    {
        "task_id": 753,
        "prompt": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
        "instruction 1": "Define the function to accept a list of tuples as input, sort the list based on the third element of each tuple in ascending order, and store the sorted list.",
        "instruction 2": "Use Python's list slicing to extract the first k elements from the sorted list, and return the result."
    },
    {
        "task_id": 754,
        "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "instruction 1": "Identify the input parameters as three lists of numbers l1, l2, l3, and initialize two empty lists to store the elements that are common to all three lists and the elements that are unique to each list.",
        "instruction 2": "Use Python's list comprehension to iterate over the indexes of the lists, check if each element at that index is present in all three lists, and if so, add it to the list of common elements, and then return the list of common elements."
    },
    {
        "task_id": 755,
        "prompt": "Write a function to find the second smallest number in a list.",
        "instruction 1": "Read the input list and identify the smallest number to know that the second smallest number should be greater than it, and sort the list in ascending order to find the second smallest number.",
        "instruction 2": "Use the sorted list to identify the second smallest number, which is at the index next to the smallest number in the sorted list, and return this value using the correct indexing syntax."
    },
    {
        "task_id": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
        "instruction 1": "Split the input list of strings into individual strings, and then iterate through each string to check if it is a reverse of any other string in the list.",
        "instruction 2": "Use a dictionary to keep track of the count of reverse pairs, iterate through each string and check if its reverse is present in the dictionary, if so, increment the count and add the string and its reverse to the dictionary, finally return the total count of reverse pairs."
    },
    {
        "task_id": 758,
        "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
        "instruction 1": "Identify the input parameter as a list containing other lists and initialize an empty dictionary to store the count of each list.",
        "instruction 2": "Use a loop to iterate over the input list, convert each list to a tuple, and update the count in the dictionary using dictionary's set default if absent method"
    },
    {
        "task_id": 759,
        "prompt": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "instruction 1": "Identify the input parameter as a string, split it into parts to separate the integer part, fractional part, and precision (if present), and validate if the number is a decimal number with a precision of 2 (i.e., one integer part and one decimal part with exactly 2 decimal places).",
        "instruction 2": "Use Python's `str.isdigit()` method to check the integer part, and use a regular expression to check the fractional part for 1 decimal place followed by 2 digits"
    },
    {
        "task_id": 760,
        "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "instruction 1": "Identify the input parameter as a list of numbers and iterate through the list to create a set to store unique elements, then check if the length of the set is equal to 1.",
        "instruction 2": "Return True if the length of the set is 1, indicating that the list contains only one distinct element, and False otherwise."
    },
    {
        "task_id": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "instruction 1": "Identify the input parameter as an integer between 1 and 12, representing the month number, and create an if-else statement to check whether the month has 30 or fewer days.",
        "instruction 2": "Use a dictionary to map month numbers to their corresponding number of days, and check if the input month has 30 or fewer days, then return True, otherwise return False."
    },
    {
        "task_id": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "instruction 1": "Sort the input array in ascending order using the sorted() function, facilitating efficient comparison and difference calculation.",
        "instruction 2": "Initiate a variable to store the minimum difference and iterate through the sorted array comparing adjacent elements, updating the minimum difference as needed, and finally return the minimum difference found."
    },
    {
        "task_id": 764,
        "prompt": "Write a python function to count number of digits in a given string.",
        "instruction 1": "Split the input string into individual characters and iterate through the characters to count the total number of digits using a counter variable.",
        "instruction 2": "Use a conditional statement to check if a character is a digit, and if so, increment the counter by 1; finally, return the total count of digits."
    },
    {
        "task_id": 765,
        "prompt": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "instruction 1": "Calculate the sum of the first n integers and the sum of the first n natural numbers and then return the nth polite number by subtracting the first sum from the second sum.",
        "instruction 2": "Implement Sum of n natural numbers using formula and calculate polite number using the formula provided."
    },
    {
        "task_id": 766,
        "prompt": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "instruction 1": "Identify the input parameter as a list of elements and initialize an empty list to store the pairs of consecutive items, then iterate through the list to create pairs of consecutive items, adding them to the output list.",
        "instruction 2": "Use Python's list comprehension to create pairs of consecutive items and return the output list of pairs."
    },
    {
        "task_id": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer representing the target sum, and initialize a counter variable to zero.",
        "instruction 2": "Use a loop to iterate over the list, and for each number in the list, iterate over the remaining numbers in the list, and increment the counter whenever the sum of the two numbers equals the target sum, then return the counter value."
    },
    {
        "task_id": 769,
        "prompt": "Write a python function to get the difference between two lists.",
        "instruction 1": "Identify the input parameters as two lists containing elements of any data type and use list comprehension to create a new list by subtracting corresponding elements from the two input lists, while handling cases where the lists are of different lengths by truncating the shorter list.",
        "instruction 2": "Use the `set` data structure to compare the two lists for any remaining elements not present in the other list, and return the resulting difference as a list."
    },
    {
        "task_id": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of odd natural numbers, and initialize an empty variable to store the sum of fourth power of these numbers.",
        "instruction 2": "Use a loop to generate the odd numbers from 1 to 2n-1, calculate the fourth power of each number, and add them to the variable; then return the calculated sum."
    },
    {
        "task_id": 771,
        "prompt": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "instruction 1": "Identify the input parameter as an expression containing parentheses and initialize an empty stack, then iterate through the expression from left to right, pushing opening parentheses to the stack and popping corresponding closing parentheses to simulate a stack-based approach.",
        "instruction 2": "Check if the stack is empty at the end of the iteration, and return True if the stack is empty, indicating a balanced expression, or False otherwise, indicating an unbalanced expression."
    },
    {
        "task_id": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.",
        "instruction 1": "Split the input string into individual words, then create an empty list to store the words to be returned; loop through each word in the string, checking its length, and if its length is not equal to the specified k, add it to the result list.",
        "instruction 2": "Return the result list, which now contains all the words except those with the specified length k."
    },
    {
        "task_id": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "instruction 1": "Identify the input parameters: the input string and the target substring, and use regular expressions to find matches of the target substring in the input string",
        "instruction 2": "Use the `finditer()` method to iterate over the matches and return a list of tuples containing the start and end positions of each match, or return None if there is no match"
    },
    {
        "task_id": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "instruction 1": "Define the function with a list as an input parameter and initialize a flag variable to track the condition.",
        "instruction 2": "Use a loop to iterate over the odd indices of the list and check if the value at each index is odd, updating the flag if the condition does not hold. Finally, return the flag's value."
    },
    {
        "task_id": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given list.",
        "instruction 1": "Identify the input parameter as a list and use a dictionary to keep track of the elements and their frequencies, then iterate over the list to populate the dictionary with element frequencies.",
        "instruction 2": "Use list comprehension to create a new list containing the elements with a frequency of 1 and return the sum of the elements in this new list using the `sum()` function."
    },
    {
        "task_id": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "instruction 1": "Identify the input parameter as a list of elements and initialize an empty list to store the sublists. Iterate through the input list, and for each element, check if it is the same as the previous element. If not, create a new sublist with the current element and add it to the result list.",  
        "instruction 2": "Use a while loop to iterate through the input list, and for each element, check if the current element is the same as the last element in the current sublist. If not, append the current element to the current sublist; otherwise, append the current sublist to the result list and start a new sublist with the current element."
    },
    {
        "task_id": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
        "instruction 1": "Read the given list of tuples and initialize an empty list to store the combinations of sums with tuples.",
        "instruction 2": "Use the itertools.combinations function to generate all possible combinations of tuples in the given list, calculate the sums of each combination, and add the sums as new elements to the empty list, then return the list of sums."
    },
    {
        "task_id": 781,
        "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
        "instruction 1": "Define a function that takes an integer as input, then calculate the count of divisors for the input number using a loop that iterates from 1 to the half of the input number, and checks if each number is a divisor, incrementing a counter when it is.",
        "instruction 2": "Return True if the count of divisors is even, and False otherwise."
    },
    {
        "task_id": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "instruction 1": "Identify the input parameter as a list of integers, and initialize a variable to keep track of the total sum.",
        "instruction 2": "Use nested loops to iterate through all possible subarrays, check if the length of each subarray is odd, and if so, add the sum of the subarray elements to the total sum before returning the result."

    },
    {
        "task_id": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers, separate the list into two lists, one containing only the even numbers and one containing only the odd numbers, and initialize variables to store the first even and odd numbers.",
        "instruction 2": "Use if-else condition to check if the lists are not empty, return the product of the first even and odd numbers, otherwise return a default value or message."
    },
    {
        "task_id": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.",
        "instruction 1": "Split the input string into a tuple using the built-in `eval()` function and convert the resulting tuple to an integer tuple.",
        "instruction 2": "Use a list comprehension to convert the elements of the tuple to integers and return the resulting tuple."
    },
    {
        "task_id": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "instruction 1": "Identify the input parameters as a sorted list and a target value to be inserted, and initialize a variable to track the rightmost index of the leftmost value less than the target value or its position if the target value is not found in the list.",
        "instruction 2": "Use a loop to iterate through the sorted list, comparing the target value with the current element, and update the rightmost index or insert the target value at the determined position using Python's list indexing, and return the insertion point or the index where the target value is inserted."
    },
    {
        "task_id": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.",
        "instruction 1": "Identify the input parameter as a string and implement a conditional statement to check if the first character is 'a' and the next four characters are 'bbbb'.",
        "instruction 2": "Return a boolean value indicating whether the match is true or not using the conditional statement to check the input string."
    },
    {
        "task_id": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.",
        "instruction 1": "Identify the input parameters as a string and a list, and use the `split()` function to convert the string into a list of substrings, if necessary.",
        "instruction 2": "Concatenate the converted string (if necessary) and the given list, and create a tuple by using the `tuple()` function with the resulting combined iterable."
    },
    {
        "task_id": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers and iterate over it with an index using the `enumerate()` function, filtering even indices and checking if the corresponding value is even using a conditional statement.",
        "instruction 2": "Use a boolean variable to track whether every even index contains an even number, initializing it to `True`, and then updating it accordingly, and finally return the boolean value as the result."
    },
    {
        "task_id": 791,
        "prompt": "Write a function to remove tuples from the given tuple.",
        "instruction 1": "Identify the input parameter as a tuple, and specify the indices of the elements to be removed, possibly using a list of indices.",
        "instruction 2": "Use the tuple's index slicing and deleting method to remove the specified elements, and return the modified tuple."
    },
    {
        "task_id": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.",
        "instruction 1": "Identify the input parameter as a variable that contains a number of lists and use a loop to iterate over the variable, counting the number of lists using a counter variable.",
        "instruction 2": "Return the counter variable as the output, which represents the total number of lists in the given number of lists."
    },
    {
        "task_id": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.",
        "instruction 1": "Identify the input parameter as a list of numbers in sorted order and the element to be searched, and check if the input list is empty.",
        "instruction 2": "Use a binary search algorithm to find the last occurrence of the element in the sorted list, starting from the end of the list, and return the index of the last occurrence."
    },
    {
        "task_id": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "instruction 1": "Use the `re` module's `fullmatch()` function and regular expression pattern '^a.*b' to check if the input string matches the specified pattern.",
        "instruction 2": "Return a boolean value indicating whether the input string matches the pattern, or raise an exception if a match is not found, or a specific error message if required."
    },
    {
        "task_id": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.",
        "instruction 1": "Identify the input parameter as a dictionary, iterate over its key-value pairs using the .items() method, and sum up all values in the dictionary.",
        "instruction 2": "Use the built-in sum() function to calculate the total sum of the dictionary values, and return the calculated sum."
    },
    {
        "task_id": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "instruction 1": "Identify the input parameters as two integers l and r that specify the range, and calculate the start and end indices for the odd numbers within that range.",
        "instruction 2": "Use a loop to iterate over the range from l to r, check if each number is odd by using the modulus operator, and if it is, add it to a running total, then return the total sum."
    },
    {
        "task_id": 798,
        "prompt": "Write a python function to find the sum of an array.",
        "instruction 1": "Identify the input parameter as a list of numbers and name it 'nums'.",
        "instruction 2": "Return the sum of the elements in the list using the built-in `sum()` function."
    },
    {
        "task_id": 799,
        "prompt": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "instruction 1": "Identify the input parameters as an integer number and an integer d that represents the number of bits to shift, and define a mask to extract the 32-bit unsigned integer representation of the number.",
        "instruction 2": "Use bitwise left shift operation (`<<`) and bitwise AND operation (`&`) to rotate the bits of the number by d bits, and return the result using the `int()` function to ensure the result is an integer."
    },
    {
        "task_id": 800,
        "prompt": "Write a function to remove all whitespaces from a string.",
        "instruction 1": "Identify the input parameter as a string and initialize an empty string to store the result, then iterate through the input string to remove all whitespaces by using the `strip()` function or by replacing spaces with an empty string `replace()`",
        "instruction 2": "Return the resulting string without whitespaces using the `return` statement"
    },
    {
        "task_id": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.",
        "instruction 1": "Identify the input parameters as three integers and create a set to store the given numbers, then convert the set to a list.",
        "instruction 2": "Compare the lengths of the list and each of its elements to count the frequency of each number, return the maximum frequency as the count of equal numbers."
    },
    {
        "task_id": 803,
        "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "instruction 1": "Identify the input parameter as an integer and generate the square root of the number using the `math.sqrt()` function, then store it in a variable.",
        "instruction 2": "Check if the square of the integer part of the square root is equal to the given number, if true, then the number is a perfect square, otherwise not."
    },
    {
        "task_id": 804,
        "prompt": "Write a function to check whether the product of numbers in a list is even or not.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize a variable to store the product of the numbers.",
        "instruction 2": "Use a loop to iterate over the list, multiply the current product with each number, and return a boolean indicating whether the product is even or not."
    },
    {
        "task_id": 805,
        "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "instruction 1": "Identify the input parameter as a list of lists of numbers and initialize an empty variable to store the maximum sum and the corresponding list.",
        "instruction 2": "Use a loop to iterate through the list of lists, calculate the sum of elements in each sublist, and if the sum is greater than the current maximum sum, update the maximum sum and the corresponding list, finally return the list with the maximum sum."
    },
    {
        "task_id": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.",
        "instruction 1": "Identify the input parameter as a string, iterate through the string, and keep track of the current run of uppercase characters by counting the number of consecutive uppercase letters and remembering the start index of the run.",
        "instruction 2": "Check each run of uppercase characters against the maximum run found so far and update the maximum run size and its starting index as needed."
    },
    {
        "task_id": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize a variable to store the first odd number, then iterate through the list using a for loop to check each element.",
        "instruction 2": "Within the loop, check each number to see if it is odd by using the modulo operator and update the variable if an odd number is found, then return the stored odd number."
    },
    {
        "task_id": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.",
        "instruction 1": "Identify the input parameters as a list of tuples and the integer k that should be checked, then iterate through each tuple in the list.",
        "instruction 2": "Check if the integer k is present in each tuple and return True if found, otherwise, return False."
    },
    {
        "task_id": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "instruction 1": "Identify the input parameters as two tuples that represent the tuples to be compared.",
        "instruction 2": "Use a Python's built-in `zip` function to pair up corresponding elements from both tuples, then iterate over these pairs and check if each element in the second tuple is smaller than its corresponding element in the first tuple, returning a boolean value indicating the comparison result."
    }
]