[
    {
        "task_id": 2,
        "prompt": "Write a function to find the shared elements from the given two lists.",
        "instruction 1": "Identify the input parameters as two lists from which shared elements need to be found.",
        "instruction 2": "Use Python's set intersection to determine and return the elements that are present in both lists.",
        "new_prompt": "Write a function that accepts two lists as input parameters and finds the shared elements between them by utilizing Python's set intersection to determine and return the common elements present in both lists."
    },
    {
        "task_id": 3,
        "prompt": "Write a python function to identify non-prime numbers.",
        "instruction 1": "Identify the input parameter as an integer n, which represents the upper limit for identifying non-prime numbers.",
        "instruction 2": "Implement a loop to check each number from 2 to n for primality, and collect non-prime numbers in a list. Return the list of non-prime numbers.",
        "new_prompt": "Write a python function to identify non-prime numbers, using an integer n as the input parameter to represent the upper limit for identifying non-prime numbers. Implement a loop to check each number from 2 to n for primality, collecting non-prime numbers in a list, which will be returned at the end of the function."
    },
    {
        "task_id": 4,
        "prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "instruction 1": "Identify the input parameter as a list of numbers and an integer n that specifies how many largest integers to find.",
        "instruction 2": "Use Python's `heapq.nlargest()` function to obtain the n largest integers from the list and sort the result in descending order before returning it.",
        "new_prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order. The function should accept a list of numbers as its input parameter, alongside an integer n that specifies how many largest integers to find. Utilize Python's `heapq.nlargest()` function to obtain these n largest integers from the list and ensure the result is sorted in descending order before returning it."
    },
    {
        "task_id": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "instruction 1": "Identify the input parameters as two integers that you want to compare.",
        "instruction 2": "Use the XOR operator to compare the two numbers, check if the result has exactly one bit set by using a bitwise AND operation with the value one less than the result, and return a boolean indicating whether the two numbers differ at one bit position only.",
        "new_prompt": "Write a python function to check whether the two numbers differ at one bit position only or not. The input parameters are two integers that you want to compare. Use the XOR operator to compare the two numbers, then check if the result has exactly one bit set by performing a bitwise AND operation with the value one less than the result, and return a boolean indicating whether the two numbers differ at one bit position only."
    },
    {
        "task_id": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string.",
        "instruction 1": "Identify the input parameter as a string from which to extract words, and split the string into individual words using the `split()` method.",
        "instruction 2": "Filter the list of words to include only those that have a length of 4 or more characters, then return the filtered list.",
        "new_prompt": "Write a function to find all words which are at least 4 characters long in a string. # Identify the input parameter as a string from which to extract words, splitting the string into individual words using the `split()` method. Then, filter the list of words to include only those that have a length of 4 or more characters, and return the filtered list."
    },
    {
        "task_id": 8,
        "prompt": "Write a function to find squares of individual elements in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers for which the squares need to be calculated.",
        "instruction 2": "Use a list comprehension to iterate over the input list and return a new list containing the squares of the individual elements.",
        "new_prompt": "Write a function to find squares of individual elements in a list, where the input parameter is a list of numbers for which the squares need to be calculated. Use a list comprehension to iterate over the input list and return a new list containing the squares of the individual elements."
    },
    {
        "task_id": 9,
        "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "instruction 1": "Identify the input parameter as a string s whose minimum rotations need to be calculated.",
        "instruction 2": "Implement a loop that continuously rotates the string and checks after each rotation if it matches the original string, counting the number of rotations until you find the first match greater than 0.",
        "new_prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string. This function should accept a string parameter, named `s`, for which the minimum rotations need to be calculated. Implement a loop that continuously rotates the string and, after each rotation, checks if it matches the original string, counting the number of rotations until the first match greater than 0 is found."
    },
    {
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "instruction 1": "Identify the input parameters as a string and the character whose first and last occurrences need to be removed.",
        "instruction 2": "Use string methods to find the indices of the first and last occurrences of the character, then create a new string by slicing it and excluding those occurrences, returning the modified string.",
        "new_prompt": "Write a python function to remove the first and last occurrence of a given character from the string. Identify the input parameters as a string and the character whose first and last occurrences need to be removed. Use string methods to find the indices of the first and last occurrences of the character, then create a new string by slicing it and excluding those occurrences, returning the modified string."
    },
    {
        "task_id": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "instruction 1": "Identify the input parameter as a 2D list (matrix) and calculate the sum of each row using a loop or list comprehension.",
        "instruction 2": "Sort the matrix based on the row sums using Python's built-in `sorted()` function with a custom key, and return the sorted matrix.",
        "new_prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows. The input parameter should be recognized as a 2D list (matrix) and the sum of each row must be calculated using a loop or list comprehension. The matrix should then be sorted based on these row sums using Python's built-in `sorted()` function with a custom key, and the sorted matrix should be returned."
    },
    {
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.",
        "instruction 1": "Identify the input parameters as the base area of the triangular base and the height of the prism.",
        "instruction 2": "Use the formula for the volume of a triangular prism, which is volume = base_area * height, and return the calculated volume.",
        "new_prompt": "Write a python function to find the volume of a triangular prism, where the input parameters are the base area of the triangular base and the height of the prism. Use the formula for the volume of a triangular prism, which is volume = base_area * height, to calculate and return the volume."
    },
    {
        "task_id": 16,
        "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "instruction 1": "Identify the input parameter as a string that will be checked for sequences of lowercase letters joined with an underscore.",
        "instruction 2": "Use a regular expression to check if the string matches the pattern of lowercase letters separated by underscores, returning true if it does and false otherwise.",
        "new_prompt": "Write a function that takes a string as an input parameter and returns true if it contains sequences of lowercase letters joined with an underscore, and false otherwise. Use a regular expression to verify if the string matches the pattern of lowercase letters separated by underscores."
    },
    {
        "task_id": 17,
        "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
        "instruction 1": "Identify the input parameter as a numeric value representing the side length of the square.",
        "instruction 2": "Calculate the perimeter using the formula `perimeter = 4 * side_length` and return the result.",
        "new_prompt": "Write a function that returns the perimeter of a square given its side length as input, where the input parameter is identified as a numeric value representing the side length of the square. Calculate the perimeter using the formula `perimeter = 4 * side_length` and return the result."
    },
    {
        "task_id": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "instruction 1": "Identify the input parameters as two strings, the first string from which characters will be removed, and the second string containing the characters to be removed.",
        "instruction 2": "Use a list comprehension to create a new string that includes characters from the first string that are not present in the second string, and return this new string.",
        "new_prompt": "Write a function to remove characters from the first string, identified as the input parameter from which characters will be removed, using the second string, which contains the characters to be removed. Utilize a list comprehension to generate a new string that comprises characters from the first string that do not appear in the second string, and return this new string."
    },
    {
        "task_id": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "instruction 1": "Identify the input parameter as a list of integers, which will be checked for duplicate values.",
        "instruction 2": "Use a set to track unique elements and iterate through the list; if an element is found in the set, return True for a duplicate, otherwise return False after checking all elements.",
        "new_prompt": "Write a function to find whether a given list of integers contains any duplicate element. Identify the input parameter as a list of integers, which will be checked for duplicate values. Use a set to track unique elements and iterate through the list; if an element is found in the set, return True for a duplicate, otherwise return False after checking all elements."
    },
    {
        "task_id": 20,
        "prompt": "Write a function to check if the given number is woodball or not.",
        "instruction 1": "Identify the input parameter as a single integer that represents the number to be checked.",
        "instruction 2": "Determine if the number is woodball by applying the specific conditions that define a woodball number, and return a boolean result.",
        "new_prompt": "Write a function to check if the given number, which is a single integer representing the number to be checked, is woodball or not by applying the specific conditions that define a woodball number, and return a boolean result."
    },
    {
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "instruction 1": "Identify the input parameter as an integer num, and create a function that computes the reverse of the number by converting it to a string and reversing it.",
        "instruction 2": "Check if the original number equals one less than twice its reversed value and return the boolean result of this comparison.",
        "new_prompt": "Write a python function that takes an integer parameter num and checks if it is one less than twice the reverse of the number, which is computed by converting the integer to a string and reversing it. The function should return the boolean result of this comparison."
    },
    {
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "instruction 1": "Identify the input parameter as a list of single-digit integers and convert them to strings to facilitate concatenation.",
        "instruction 2": "Sort the list of string digits in a custom order that prioritizes larger concatenated values, then join the sorted list and return the resulting string as the largest number.",
        "new_prompt": "Write a python function to find the largest number that can be formed with the given list of digits. The input parameter should be identified as a list of single-digit integers, which should be converted to strings to facilitate concatenation. Additionally, the list of string digits must be sorted in a custom order that prioritizes larger concatenated values, after which the sorted list should be joined together to return the resulting string as the largest number."
    },
    {
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "instruction 1": "Identify the input parameters as two integers and check if their product is less than zero to determine if they have opposite signs.",
        "instruction 2": "Return True if the integers have opposite signs and False otherwise.",
        "new_prompt": "Write a python function that takes two integers as input parameters and checks whether they have opposite signs by determining if their product is less than zero. Return True if the integers have opposite signs and False otherwise."
    },
    {
        "task_id": 59,
        "prompt": "Write a function to find the nth octagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the octagonal number to be calculated.",
        "instruction 2": "Use the formula for the nth octagonal number, which is given by n * (3 * n - 2), and return the computed value.",
        "new_prompt": "Write a function to find the nth octagonal number, where the input parameter is an integer n that represents the position of the octagonal number to be calculated. Utilize the formula for the nth octagonal number, which is given by n * (3 * n - 2), and return the computed value."
    },
    {
        "task_id": 61,
        "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "instruction 1": "Identify the input parameter as a string containing the digits from which substrings will be generated.",
        "instruction 2": "Use nested loops to generate all possible substrings, calculate the sum of their digits, and compare it to their length, counting how many substrings meet the criteria.",
        "new_prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length. The input parameter should be identified as a string containing the digits from which substrings will be generated. Use nested loops to generate all possible substrings, calculate the sum of their digits, and compare it to their length, counting how many substrings meet the criteria."
    },
    {
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers from which the smallest value needs to be found.",
        "instruction 2": "Use Python's built-in `min()` function to determine and return the smallest number from the list.",
        "new_prompt": "Write a python function to find the smallest number in a list of numbers from which the smallest value needs to be determined. Use Python's built-in `min()` function to identify and return this smallest number from the list."
    },
    {
        "task_id": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "instruction 1": "Identify the input parameter as a list of tuples containing pairs of numbers.",
        "instruction 2": "Iterate through the list of tuples, calculate the difference for each pair, and return the maximum difference found.",
        "new_prompt": "Write a function to find the maximum difference between available pairs in the given list of tuples containing pairs of numbers. Iterate through the list, calculate the difference for each pair, and return the maximum difference found."
    },
    {
        "task_id": 64,
        "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
        "instruction 1": "Identify the input parameter as a list of tuples where each tuple contains at least two elements.",
        "instruction 2": "Use Python's built-in `sorted()` function with a custom key that accesses the second element of each tuple to sort the list and return the sorted list.",
        "new_prompt": "Write a function to sort a list of tuples, where each tuple contains at least two elements, using the second value of each tuple. Use Python's built-in `sorted()` function with a custom key that accesses the second element of each tuple to sort the list and return the sorted list."
    },
    {
        "task_id": 65,
        "prompt": "Write a function to flatten a list and sum all of its elements.",
        "instruction 1": "Identify the input parameter as a nested list that may contain other lists and elements.",
        "instruction 2": "Use a recursive approach or a loop to extract all elements from the nested lists, then return the sum of the flattened list using the `sum()` function.",
        "new_prompt": "Write a function to flatten a nested list, which may contain other lists and elements, and sum all of its elements. Use a recursive approach or a loop to extract all elements from the nested lists, then return the sum of the flattened list using the `sum()` function."
    },
    {
        "task_id": 66,
        "prompt": "Write a python function to count the number of positive numbers in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers.",
        "instruction 2": "Iterate through the list, using a counter to count how many numbers are greater than zero, and return the counter value.",
        "new_prompt": "Write a python function to count the number of positive numbers in a list of numbers. Iterate through the list, using a counter to tally how many numbers exceed zero, and return the value of the counter."
    },
    {
        "task_id": 67,
        "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the index of the Bell number to be partitioned.",
        "instruction 2": "Use a recursive or dynamic programming approach to calculate the Bell number for the given n and count the number of ways to partition the set based on its Bell number.",
        "new_prompt": "Write a function to find the number of ways to partition a set of Bell numbers. The input parameter should be an integer n representing the index of the Bell number to be partitioned. You should utilize either a recursive or dynamic programming approach to compute the Bell number for the specified n and determine the number of ways to partition the set according to its Bell number."
    },
    {
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.",
        "instruction 1": "Identify the input parameter as an array of numbers and initialize two boolean flags to track if the array is increasing or decreasing.",
        "instruction 2": "Iterate through the array to compare adjacent elements and update the flags accordingly; return True if the array is either completely increasing or decreasing, otherwise return False.",
        "new_prompt": "Write a python function to check whether the given array is monotonic or not. The function should take an array of numbers as its input parameter and initialize two boolean flags to determine if the array is increasing or decreasing. It should iterate through the array to compare adjacent elements, updating the flags as needed; return True if the array is entirely increasing or decreasing, otherwise return False."
    },
    {
        "task_id": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "instruction 1": "Identify the input parameters as a list and the sublist that needs to be checked for its presence within the list.",
        "instruction 2": "Use Python's 'in' keyword or the 'index()' method to check if the sublist is present in the list, and return a boolean value indicating the result.",
        "new_prompt": "Write a function to check whether a list contains the given sublist or not. Ensure to identify the input parameters as a list and the sublist that needs to be checked for its presence within the list. Use Python's 'in' keyword or the 'index()' method to verify if the sublist is present in the list, and return a boolean value indicating the result."
    },
    {
        "task_id": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "instruction 1": "Identify the input parameter as a list of tuples and initialize a variable to store the length of the first tuple.",
        "instruction 2": "Iterate through the list and compare the length of each tuple with the stored length; return True if all lengths are equal, otherwise return False.",
        "new_prompt": "Write a function to determine if all the provided tuples have the same length. The function should accept a list of tuples as an input parameter and initialize a variable to hold the length of the first tuple. Then, iterate through the list to compare the length of each tuple with the stored length; the function should return True if all lengths are equal and False otherwise."
    },
    {
        "task_id": 71,
        "prompt": "Write a function to sort a list of elements.",
        "instruction 1": "Identify the input parameter as a list of elements that need to be sorted.",
        "instruction 2": "Use Python's built-in `sorted()` function or the list method `sort()` to arrange the elements in ascending order and return the sorted list.",
        "new_prompt": "Write a function to sort a list of elements. # The input parameter should be identified as a list of elements that require sorting. # Utilize Python's built-in `sorted()` function or the list method `sort()` to arrange the elements in ascending order and return the sorted list."
    },
    {
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "instruction 1": "Identify the input parameter as an integer that represents the number to check for representation as the difference of two squares.",
        "instruction 2": "Determine if the number can be represented as the difference of two squares using the mathematical property that a number can be expressed as such if it is not of the form 4k + 2 for some integer k.",
        "new_prompt": "Write a python function that takes an integer input parameter representing the number to check for its ability to be expressed as the difference of two squares, and determine if the number can indeed be represented in this way, utilizing the mathematical principle that a number can be represented as the difference of two squares unless it is in the form of 4k + 2 for some integer k."
    },
    {
        "task_id": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "instruction 1": "Identify the input parameters as a list of patterns and a sequence string that needs to be checked against the patterns.",
        "instruction 2": "Iterate through the patterns array to determine if the sequence follows the specified patterns, returning True if it matches and False otherwise.",
        "new_prompt": "Write a function to check whether a given sequence string adheres to a list of patterns provided in the patterns array. The function should iterate through the patterns array to verify if the sequence aligns with the specified patterns, returning True for a match and False if it does not."
    },
    {
        "task_id": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "instruction 1": "Identify the input parameters as a list of tuples and an integer k that represents the divisor.",
        "instruction 2": "Use a list comprehension to filter the tuples, checking if all elements in each tuple are divisible by k, and return the filtered list of tuples.",
        "new_prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples. The input parameters should include a list of tuples and an integer k representing the divisor. Utilize a list comprehension to filter the tuples by verifying if all elements in each tuple are divisible by k, and return the filtered list of tuples."
    },
    {
        "task_id": 77,
        "prompt": "Write a python function to find whether a number is divisible by 11.",
        "instruction 1": "Identify the input parameter as an integer number that needs to be checked for divisibility by 11.",
        "instruction 2": "Use the modulus operator to determine if the number modulo 11 is equal to zero, returning True if it is, and False otherwise.",
        "new_prompt": "Write a python function to find whether a number is divisible by 11. # The function should accept an input parameter, which is an integer that needs to be checked for divisibility by 11. Utilize the modulus operator to check if the number modulo 11 equals zero, returning True if it does and False otherwise."
    },
    {
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.",
        "instruction 1": "Identify the input parameter as a string representing the word to be checked.",
        "instruction 2": "Use the `len()` function to calculate the length of the word and return a boolean indicating whether the length is odd by checking if it is not evenly divisible by 2.",
        "new_prompt": "Write a python function to check whether the length of the word is odd or not. The input parameter should be a string representing the word to be checked. Utilize the `len()` function to determine the length of the word and return a boolean that indicates whether the length is odd by verifying if it is not evenly divisible by 2."
    },
    {
        "task_id": 80,
        "prompt": "Write a function to find the nth tetrahedral number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the tetrahedral number to be calculated.",
        "instruction 2": "Use the formula T(n) = n * (n + 1) * (n + 2) / 6 to compute the nth tetrahedral number and return the result.",
        "new_prompt": "Write a function to find the nth tetrahedral number, where the input parameter is an integer n that indicates the position of the tetrahedral number to be calculated. Use the formula T(n) = n * (n + 1) * (n + 2) / 6 to compute the nth tetrahedral number and return the result."
    },
    {
        "task_id": 82,
        "prompt": "Write a function to find the volume of a sphere.",
        "instruction 1": "Identify the input parameter as a single float or integer value representing the radius of the sphere.",
        "instruction 2": "Use the formula for the volume of a sphere, V = (4/3) * π * r^3, to calculate and return the volume using Python's math module for π.",
        "new_prompt": "Write a function to find the volume of a sphere. The function should identify the input parameter as a single float or integer value representing the radius of the sphere. To calculate and return the volume, use the formula for the volume of a sphere, V = (4/3) * π * r^3, utilizing Python's math module for π."
    },
    {
        "task_id": 84,
        "prompt": "Write a function to find the nth number in the newman conway sequence.",
        "instruction 1": "Identify the input parameter as an integer n that specifies the position in the Newman Conway sequence.",
        "instruction 2": "Create a list to store the sequence values, initialize the first three values as per the sequence definition, and use a loop to calculate further values based on the formula P(n) = P(P(n-1)) + P(n-1) until the nth value is computed, then return the nth number.",
        "new_prompt": "Write a function to find the nth number in the Newman Conway sequence. The input parameter should be defined as an integer n that specifies the position in the sequence. Additionally, create a list to store the sequence values, initializing the first three values according to the sequence definition. Use a loop to calculate further values based on the formula P(n) = P(P(n-1)) + P(n-1) until the nth value is computed, and then return the nth number."
    },
    {
        "task_id": 85,
        "prompt": "Write a function to find the surface area of a sphere.",
        "instruction 1": "Identify the input parameter as a float or integer representing the radius of the sphere.",
        "instruction 2": "Use the formula for the surface area of a sphere, which is 4 * pi * radius^2, and return the calculated surface area.",
        "new_prompt": "Write a function to find the surface area of a sphere. The input parameter should be identified as a float or integer representing the radius of the sphere. Utilize the formula for the surface area of a sphere, which is 4 * pi * radius^2, to return the calculated surface area."
    },
    {
        "task_id": 86,
        "prompt": "Write a function to find nth centered hexagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the nth centered hexagonal number.",
        "instruction 2": "Use the formula H(n) = 3n(n - 1) + 1 to calculate the nth centered hexagonal number and return the result.",
        "new_prompt": "Write a function to find the nth centered hexagonal number. The input parameter should be an integer n that represents the nth centered hexagonal number. Use the formula H(n) = 3n(n - 1) + 1 to calculate the nth centered hexagonal number and return the result."
    },
    {
        "task_id": 87,
        "prompt": "Write a function to merge three dictionaries into a single dictionary.",
        "instruction 1": "Identify the input parameters as three dictionaries that need to be merged.",
        "instruction 2": "Use Python's built-in dictionary unpacking feature to merge the dictionaries into a single dictionary and return the merged result.",
        "new_prompt": "Write a function to merge three dictionaries into a single dictionary, identifying the input parameters as the three dictionaries that need to be merged. Use Python's built-in dictionary unpacking feature to merge the dictionaries into a single dictionary and return the merged result."
    },
    {
        "task_id": 88,
        "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "instruction 1": "Identify the input parameter as a list containing the elements whose frequency needs to be counted.",
        "instruction 2": "Use Python's collections.Counter to count the frequency of each element in the list and return the result as a dictionary.",
        "new_prompt": "Write a function that takes a list as an input parameter, containing the elements whose frequency needs to be counted, and returns a dictionary with the frequency of all the elements in the list, utilizing Python's collections.Counter to count the frequency of each element."
    },
    {
        "task_id": 89,
        "prompt": "Write a function to find the closest smaller number than n.",
        "instruction 1": "Identify the input parameter as an integer n for which you need to find the closest smaller number.",
        "instruction 2": "Create a loop or use a mathematical approach to find the largest integer less than n and return it.",
        "new_prompt": "Write a function to find the closest smaller number than the given integer n. Implement a loop or a mathematical approach to identify and return the largest integer that is less than n."
    },
    {
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.",
        "instruction 1": "Identify the input parameter as a string containing the sentence from which the longest word will be found.",
        "instruction 2": "Split the string into words, iterate through the list of words to determine the length of each, and return the maximum length found.",
        "new_prompt": "Write a python function to find the length of the longest word. The function should take a single input parameter, which is a string containing the sentence from which the longest word will be extracted. It should split the string into individual words, iterate through the list of words to calculate the length of each, and return the maximum length encountered."
    },
    {
        "task_id": 91,
        "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
        "instruction 1": "Identify the input parameters as a string to search for and a list of string values to search within.",
        "instruction 2": "Use a loop to iterate through the list of strings and check if the specified substring is present in each string using the `in` keyword, then return True if found, otherwise return False.",
        "new_prompt": "Write a function to check if a string is present as a substring in a given list of string values. The input parameters should consist of a string to search for and a list of string values to search within. Utilize a loop to iterate through the list of strings and verify if the specified substring exists in each string using the `in` keyword; return True if found, otherwise return False."
    },
    {
        "task_id": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "instruction 1": "Identify the input parameter as an integer number to check its undulating property, and convert the number to a string for easier digit comparison.",
        "instruction 2": "Implement a loop to check if the digits of the number alternate between increasing and decreasing values, returning True if they do and False if they do not.",
        "new_prompt": "Write a function to check whether the given number is undulating or not. # The function should take an integer input to evaluate its undulating property, converting the number to a string for straightforward digit comparisons. # It should include a loop to verify if the digits of the number alternate between increasing and decreasing values, returning True if they do and False otherwise."
    },
    {
        "task_id": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "instruction 1": "Identify the input parameters as two numbers, 'a' and 'b', where 'a' is the base and 'b' is the exponent.",
        "instruction 2": "Use Python's exponentiation operator '**' to calculate 'a' raised to the power of 'b' and return the result.",
        "new_prompt": "Write a function to calculate the value of 'a' to the power 'b'. # Identify the input parameters as two numbers, 'a' (the base) and 'b' (the exponent). Use Python's exponentiation operator '**' to compute 'a' raised to the power of 'b' and return the result."
    },
    {
        "task_id": 94,
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "instruction 1": "Identify the input parameter as a list of tuples where each tuple contains at least two elements, focusing on the second value for comparison.",
        "instruction 2": "Utilize the `min()` function with a key argument to find the tuple with the smallest second value, then return the first value of that tuple.",
        "new_prompt": "Given a list of tuples, where each tuple consists of at least two elements, write a function that returns the first value of the tuple that has the smallest second value, utilizing the `min()` function with a key argument for comparison."
    },
    {
        "task_id": 95,
        "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
        "instruction 1": "Identify the input parameter as a list of lists and ensure it is not empty.",
        "instruction 2": "Use Python's built-in `min()` function with a key parameter set to `len` to find and return the length of the smallest list within the list of lists.",
        "new_prompt": "Write a python function to find the length of the smallest list in a list of lists. Ensure that the input parameter is recognized as a non-empty list of lists. Utilize Python's built-in `min()` function with a key parameter assigned to `len` in order to identify and return the length of the smallest list within the list of lists."
    },
    {
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.",
        "instruction 1": "Identify the input parameter as an integer n for which the number of divisors needs to be calculated.",
        "instruction 2": "Implement a loop to iterate through the range from 1 to n, counting how many times n is divisible without a remainder, and return this count.",
        "new_prompt": "Write a python function that takes an integer n as the input parameter to determine the number of divisors for that integer. Implement a loop to iterate through the range from 1 to n, counting how many times n can be divided without a remainder, and return this count."
    },
    {
        "task_id": 97,
        "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "instruction 1": "Identify the input parameter as a list of lists and flatten it into a single list.",
        "instruction 2": "Use Python's collections.Counter to count the frequency of each element in the flattened list and return the result as a dictionary.",
        "new_prompt": "Write a function to find the frequency of each element in a flattened list of lists, returned in a dictionary. First, identify the input parameter as a list of lists and flatten it into a single list. Then, use Python's collections.Counter to count the frequency of each element in the flattened list and return the result as a dictionary."
    },
    {
        "task_id": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "instruction 1": "Identify the input parameter as a list of numbers and calculate the product of all elements in the list.",
        "instruction 2": "Divide the product by the length of the list using the `len()` function and return the result.",
        "new_prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list. Identify the input parameter as a list of numbers and calculate the product of all elements in the list. Then, divide the product by the length of the list using the `len()` function and return the result."
    },
    {
        "task_id": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "instruction 1": "Identify the input parameter as an integer decimal number that needs to be converted to binary.",
        "instruction 2": "Use Python's built-in `bin()` function to convert the decimal number to binary, then slice the string to remove the '0b' prefix and return the resulting binary string.",
        "new_prompt": "Write a function to convert the given decimal number, identified as an integer input parameter, to its binary equivalent, represented as a string with no leading zeros. Use Python's built-in `bin()` function to convert the decimal number to binary, then slice the resulting string to remove the '0b' prefix and return the binary string."
    },
    {
        "task_id": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "instruction 1": "Identify the input parameter as an integer n that represents the specified integer for which the next smallest palindrome is to be found.",
        "instruction 2": "Implement a loop that increments n and checks if the incremented value is a palindrome by converting it to a string and comparing it to its reverse; return the first found palindrome greater than n.",
        "new_prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer. The input parameter is an integer \\( n \\) that represents the specified integer for which the next smallest palindrome is to be found. Implement a loop that increments \\( n \\) and checks if the incremented value is a palindrome by converting it to a string and comparing it to its reverse; return the first found palindrome greater than \\( n \\)."
    },
    {
        "task_id": 101,
        "prompt": "Write a function to find the kth element in the given array using 1-based indexing.",
        "instruction 1": "Identify the input parameters as an array and an integer k that specifies the position of the element to find using 1-based indexing.",
        "instruction 2": "Access the element at the index k-1 in the array (to convert from 1-based to 0-based indexing) and return that element.",
        "new_prompt": "Write a function to find the kth element in the given array using 1-based indexing. Ensure that the input parameters are specified as an array and an integer k that indicates the position of the element to locate using 1-based indexing. Within the function, access the element at the index k-1 in the array (to convert from 1-based to 0-based indexing) and return that element."
    },
    {
        "task_id": 102,
        "prompt": "Write a function to convert a snake case string to camel case string.",
        "instruction 1": "Identify the input parameter as a snake case string where words are separated by underscores.",
        "instruction 2": "Split the string by underscores, capitalize the first letter of each word except the first one, and join them together without spaces to form a camel case string.",
        "new_prompt": "Write a function to convert a snake case string to camel case string, identifying the input parameter as a snake case string where words are separated by underscores. The function should split the string by underscores, capitalize the first letter of each word except for the first one, and join them together without spaces to form a camel case string."
    },
    {
        "task_id": 103,
        "prompt": "Write a function to find the Eulerian number a(n, m).",
        "instruction 1": "Identify the input parameters as two integers n and m that represent the indices for calculating the Eulerian number a(n, m).",
        "instruction 2": "Implement a recursive or dynamic programming approach to calculate the Eulerian number using the formula a(n, m) = (n - m) * a(n - 1, m - 1) + (m + 1) * a(n - 1, m), with base cases for a(n, 0) and a(n, n-1).",
        "new_prompt": "Write a function to find the Eulerian number a(n, m), where the input parameters are two integers n and m that represent the indices for calculating the Eulerian number. Implement a recursive or dynamic programming approach to calculate the Eulerian number using the formula a(n, m) = (n - m) * a(n - 1, m - 1) + (m + 1) * a(n - 1, m), ensuring to include base cases for a(n, 0) and a(n, n-1)."
    },
    {
        "task_id": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
        "instruction 1": "Identify the input parameter as a list of lists, where each sublist contains strings.",
        "instruction 2": "Use a loop to iterate through each sublist and apply the `sorted()` function to sort the strings in each sublist, then return the modified list of lists.",
        "new_prompt": "Write a function to sort each sublist of strings in a given list of lists, where the input parameter is specifically identified as a list of lists with each sublist containing strings. Use a loop to iterate through each sublist and apply the `sorted()` function to sort the strings, then return the modified list of lists."
    },
    {
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.",
        "instruction 1": "Identify the input parameter as a list of boolean values.",
        "instruction 2": "Use the `count()` method on the list to count and return the number of True values.",
        "new_prompt": "Write a python function to count true booleans in the given list, which should be identified as a list of boolean values, and use the `count()` method on the list to count and return the number of True values."
    },
    {
        "task_id": 106,
        "prompt": "Write a function to append the given list to the given tuples.",
        "instruction 1": "Identify the input parameters as a list and a tuple that you want to append the list to.",
        "instruction 2": "Convert the tuple to a list, extend it with the given list, and return the new tuple created from the updated list.",
        "new_prompt": "Write a function to append the given list to the specified tuple. Identify the input parameters as a list and a tuple that you want to append the list to. Convert the tuple to a list, extend it with the given list, and return the new tuple created from the updated list."
    },
    {
        "task_id": 108,
        "prompt": "Write a function to merge three lists into a single sorted list.",
        "instruction 1": "Identify the input parameters as three lists that need to be merged and sort them into a single list.",
        "instruction 2": "Use Python's built-in `sorted()` function and the `+` operator to concatenate the three lists before sorting and returning the final merged list.",
        "new_prompt": "Write a function to merge three lists into a single sorted list. Identify the input parameters as three lists that need to be combined and sorted into one list. Use Python's built-in `sorted()` function along with the `+` operator to concatenate the three lists prior to sorting and returning the final merged list."
    },
    {
        "task_id": 109,
        "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "instruction 1": "Identify the input parameters as a binary string and an integer representing the number of rotations.",
        "instruction 2": "Create a set to store unique rotated binary strings, count the odd values in each rotation, and return the total count of numbers with odd values.",
        "new_prompt": "Write a python function that takes as input a binary string and an integer representing the number of rotations, to find the total count of numbers with an odd value when rotating the binary string the specified number of times. The function should create a set to store unique rotated binary strings, count the odd values in each rotation, and return the final total."
    },
    {
        "task_id": 111,
        "prompt": "Write a function to find the common elements in given nested lists.",
        "instruction 1": "Identify the input parameter as a list of nested lists containing elements that may have common values.",
        "instruction 2": "Use Python's set intersection to find the common elements across all nested lists and return a list of these common elements.",
        "new_prompt": "Write a function to find the common elements in given nested lists, where the input parameter is a list of nested lists containing elements that may have common values. Utilize Python's set intersection to identify and return a list of the common elements across all nested lists."
    },
    {
        "task_id": 113,
        "prompt": "Write a function to check if a string represents an integer or not.",
        "instruction 1": "Identify the input parameter as a string and use the `str.isdigit()` method to check if all characters in the string are digits.",
        "instruction 2": "Return True if the string represents an integer, otherwise return False.",
        "new_prompt": "Write a function that takes a string input parameter and utilizes the `str.isdigit()` method to determine if all characters in the string are digits, thereby checking if the string represents an integer. Return True if it does, and False otherwise."
    },
    {
        "task_id": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into a single integer.",
        "instruction 1": "Identify the input parameter as a tuple of positive integers.",
        "instruction 2": "Use Python's `join()` method to concatenate the string representation of each integer in the tuple, then convert the final string into an integer before returning it.",
        "new_prompt": "Write a function that identifies the input parameter as a tuple of positive integers and converts it into a single integer by using Python's `join()` method to concatenate the string representation of each integer within the tuple before converting the final string into an integer and returning it."
    },
    {
        "task_id": 118,
        "prompt": "Write a function to convert a string to a list of strings split on the space character.",
        "instruction 1": "Identify the input parameter as a string that needs to be split.",
        "instruction 2": "Use the `split()` method on the string with the space character as the delimiter to convert it into a list of substrings.",
        "new_prompt": "Write a function to convert a string, identified as the input parameter, to a list of strings split on the space character by using the `split()` method on the string with the space character as the delimiter to create a list of substrings."
    },
    {
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "instruction 1": "Identify the input parameter as a sorted array of integers where each element appears twice except for one element that appears once.",
        "instruction 2": "Use a binary search algorithm to efficiently find the element that appears only once by checking the mid-point and adjusting the search range based on the properties of the sorted array.",
        "new_prompt": "Write a python function to find the element that appears only once in a sorted array, which is defined as a sorted array of integers where each element appears twice except for one element that appears once. Use a binary search algorithm to efficiently locate this unique element by examining the mid-point and adjusting the search range according to the characteristics of the sorted array."
    },
    {
        "task_id": 120,
        "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "instruction 1": "Identify the input parameter as a list of tuples, each containing two numbers, and initialize a variable to keep track of the maximum absolute product.",
        "instruction 2": "Iterate through each tuple in the list, compute the absolute product of the two numbers, and update the maximum variable if the current product is greater, then return the maximum absolute product.",
        "new_prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list. The input parameter should be a list of tuples, each containing two numbers, and you should initialize a variable to track the maximum absolute product. As you iterate through each tuple in the list, compute the absolute product of the two numbers, updating the maximum variable if the current product exceeds it. Finally, return the maximum absolute product."
    },
    {
        "task_id": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "instruction 1": "Identify the input parameter as an integer n that specifies the upper limit for summing amicable numbers.",
        "instruction 2": "Implement a function to find all amicable pairs up to n using the sum of divisors formula, check for amicability, and return the total sum of the identified amicable numbers.",
        "new_prompt": "Write a function to sum all amicable numbers from 1 to a specified number. The input parameter should be defined as an integer n, which indicates the upper limit for summing amicable numbers. Additionally, implement the functionality to find all amicable pairs up to n utilizing the sum of divisors formula, ensuring to check for amicability, and return the total sum of the identified amicable numbers."
    },
    {
        "task_id": 124,
        "prompt": "Write a function to get the angle of a complex number.",
        "instruction 1": "Identify the input parameter as a complex number, which can be represented using Python's complex type.",
        "instruction 2": "Use the `cmath` module to calculate the angle (also known as the phase) of the complex number using the `phase()` function and return that value.",
        "new_prompt": "Write a function to get the angle of a complex number, identified as an input parameter using Python's complex type. Utilize the `cmath` module to calculate the angle (also known as the phase) of the complex number with the `phase()` function and return that value."
    },
    {
        "task_id": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "instruction 1": "Identify the input parameter as a binary string and initialize variables to track the maximum difference, current count of 0s, and current count of 1s.",
        "instruction 2": "Iterate through the string, updating counts for each character, calculate the difference between the counts, and update the maximum difference accordingly.",
        "new_prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. The input parameter should be identified as a binary string, and variables must be initialized to track the maximum difference, as well as the current count of 0s and 1s. Then, iterate through the string to update the counts for each character, compute the difference between the counts, and update the maximum difference as needed."
    },
    {
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "instruction 1": "Identify the input parameters as two integers for which the common divisors will be found.",
        "instruction 2": "Determine the common divisors by using a loop to iterate through potential divisor values, checking divisibility for both numbers, and summing the valid common divisors to return the result.",
        "new_prompt": "Write a python function to find the sum of common divisors of two given numbers. The input parameters should be specified as two integers for which the common divisors will be identified. To determine the common divisors, utilize a loop to iterate through potential divisor values, verify divisibility for both numbers, and calculate the sum of the valid common divisors to return the result."
    },
    {
        "task_id": 127,
        "prompt": "Write a function to multiply two integers.",
        "instruction 1": "Identify the input parameters as two integers that need to be multiplied.",
        "instruction 2": "Use the multiplication operator (*) to multiply the two integers and return the result.",
        "new_prompt": "Write a function to multiply two integers, identifying the input parameters as the two integers that need to be multiplied, and using the multiplication operator (*) to perform the operation and return the result."
    },
    {
        "task_id": 128,
        "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
        "instruction 1": "Identify the input parameters as a list of words and an integer n that specifies the minimum length of words to be found.",
        "instruction 2": "Use a list comprehension to filter and return the words from the list that have a length greater than n.",
        "new_prompt": "Write a function to find words that are longer than n characters from a given list of words. The function should take a list of words and an integer n as input parameters, where n specifies the minimum length of words to be found. Utilize a list comprehension to filter and return the words from the list that exceed this length."
    },
    {
        "task_id": 129,
        "prompt": "Write a function to calculate whether the matrix is a magic square.",
        "instruction 1": "Identify the input parameter as a 2D list (matrix) and check if it is square by comparing the number of rows and columns.",
        "instruction 2": "Calculate the sum of the first row and compare it to the sums of all other rows, columns, and diagonals, returning True if all sums match, otherwise return False.",
        "new_prompt": "Write a function to calculate whether the matrix is a magic square. The input parameter should be identified as a 2D list (matrix), and you must check if it is square by comparing the number of rows and columns. Then, calculate the sum of the first row and compare it to the sums of all other rows, columns, and diagonals, returning True if all sums match; otherwise, return False."
    },
    {
        "task_id": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "instruction 1": "Identify the input parameter as a list of elements and initialize a dictionary to count the frequency of each element in the list.",
        "instruction 2": "Iterate through the frequency dictionary to find the key with the highest value, which represents the item with maximum frequency, and return that item.",
        "new_prompt": "Write a function to find the item with maximum frequency in a given list. # Identify the input parameter as a list of elements and initialize a dictionary to count the frequency of each element. Then, iterate through the frequency dictionary to find the key with the highest value, which represents the item with maximum frequency, and return that item."
    },
    {
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "instruction 1": "Identify the input parameter as a string and create a list to store the vowels found in the string.",
        "instruction 2": "Iterate through the string, reverse the list of vowels, and reconstruct the string by replacing the original vowels with the reversed ones, then return the modified string.",
        "new_prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel). The function should identify the input parameter as a string and create a list to store the vowels found in that string. Next, iterate through the string, reverse the list of vowels, and reconstruct the string by replacing the original vowels with the reversed ones, then return the modified string."
    },
    {
        "task_id": 132,
        "prompt": "Write a function to convert a tuple to a string.",
        "instruction 1": "Identify the input parameter as a tuple that contains elements to be converted into a string.",
        "instruction 2": "Use the `join()` method along with `map()` to convert each element of the tuple to a string and concatenate them into a single string, then return the resulting string.",
        "new_prompt": "Write a function to convert a tuple to a string. Identify the input parameter as a tuple that contains elements to be converted into a string. Use the `join()` method along with `map()` to convert each element of the tuple to a string and concatenate them into a single string, then return the resulting string."
    },
    {
        "task_id": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "instruction 1": "Identify the input parameter as a list of numbers.",
        "instruction 2": "Iterate through the list, filter out the negative numbers, and return the sum of these negative numbers using the `sum()` function.",
        "new_prompt": "Write a function that takes a list of numbers as an input parameter and calculates the sum of the negative numbers from this list. Iterate through the list to filter out the negative numbers and return their sum using the `sum()` function."
    },
    {
        "task_id": 135,
        "prompt": "Write a function to find the nth hexagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the hexagonal number to be calculated.",
        "instruction 2": "Use the formula for the nth hexagonal number, which is n * (2n - 1), and return the calculated value.",
        "new_prompt": "Write a function to find the nth hexagonal number, where the input parameter is an integer n that represents the position of the hexagonal number to be calculated. Use the formula for the nth hexagonal number, which is n * (2n - 1), and return the calculated value."
    },
    {
        "task_id": 137,
        "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize counters for zeroes and non-zeroes.",
        "instruction 2": "Iterate through the list to count the number of zeroes and non-zeroes, then calculate and return the ratio of zeroes to non-zeroes, ensuring to handle division by zero.",
        "new_prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers. The function should take a list of integers as an input parameter and initialize counters for the counts of zeroes and non-zeroes. Then, iterate through the list to count the number of zeroes and non-zeroes, ensuring to manage cases where division by zero might occur, before calculating and returning the ratio of zeroes to non-zeroes."
    },
    {
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "instruction 1": "Identify the input parameter as an integer representing the number to be checked.",
        "instruction 2": "Use a loop to determine if the number can be expressed as a sum of distinct powers of 2 by iteratively subtracting the largest power of 2 less than or equal to the number until the number becomes zero or negative.",
        "new_prompt": "Write a python function to check whether the given integer can be represented as a sum of non-zero powers of 2 or not. Use a loop to determine if the number can be expressed as a sum of distinct powers of 2 by iteratively subtracting the largest power of 2 less than or equal to the number until the number becomes zero or negative."
    },
    {
        "task_id": 139,
        "prompt": "Write a function to find the circumference of a circle.",
        "instruction 1": "Identify the input parameter as the radius of the circle, a numerical value.",
        "instruction 2": "Calculate the circumference using the formula circumference = 2 * pi * radius, and return the result.",
        "new_prompt": "Write a function to find the circumference of a circle, where the input parameter is the radius of the circle, a numerical value. Calculate the circumference using the formula circumference = 2 * pi * radius, and return the result."
    },
    {
        "task_id": 140,
        "prompt": "Write a function to flatten the list of lists into a single set of numbers.",
        "instruction 1": "Identify the input parameter as a list of lists that contains numbers.",
        "instruction 2": "Use a combination of list comprehension or the `itertools.chain` method to iterate over the nested lists and return a flattened list of numbers.",
        "new_prompt": "Write a function to flatten the input parameter, which is a list of lists containing numbers, into a single set of numbers using a combination of list comprehension or the `itertools.chain` method to iterate over the nested lists and return the flattened list."
    },
    {
        "task_id": 141,
        "prompt": "Write a function to sort a list of elements.",
        "instruction 1": "Identify the input parameter as a list of elements that need to be sorted.",
        "instruction 2": "Use Python's built-in `sorted()` function or the list's `.sort()` method to sort the elements in ascending order and return the sorted list.",
        "new_prompt": "Write a function to sort a list of elements. # The input parameter should be identified as a list of elements that need to be sorted. # Utilize Python's built-in `sorted()` function or the list's `.sort()` method to arrange the elements in ascending order and return the sorted list."
    },
    {
        "task_id": 142,
        "prompt": "Write a function to count number items that are identical in the same position of three given lists.",
        "instruction 1": "Identify the input parameters as three lists that need to be compared for identical items at the same positions.",
        "instruction 2": "Use a loop to iterate through the indices of the lists, comparing items at each index and counting how many items are identical across all three lists.",
        "new_prompt": "Write a function to count the number of items that are identical in the same position of three given lists. The input parameters are three lists that need to be compared for identical items at the same positions. Use a loop to iterate through the indices of the lists, comparing items at each index and counting how many items are identical across all three lists."
    },
    {
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "instruction 1": "Identify the input parameter as an array of numbers.",
        "instruction 2": "Iterate through the array to find the minimum and maximum values, then calculate and return the difference between the maximum and minimum values.",
        "new_prompt": "Write a python function to find the maximum difference between any two elements in a given array of numbers. The function should iterate through the array to identify the minimum and maximum values, then calculate and return the difference between these maximum and minimum values."
    },
    {
        "task_id": 160,
        "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "instruction 1": "Identify the input parameters as integers a, b, and n that represent the coefficients and the target value in the equation ax + by = n.",
        "instruction 2": "Use the Extended Euclidean Algorithm to find integers x and y that satisfy the equation, checking the feasibility of the solution based on the gcd of a and b. Return (x, y) as a tuple or None if no solution exists.",
        "new_prompt": "Write a function that takes three integer parameters a, b, and n, representing the coefficients and the target value in the equation ax + by = n. Utilize the Extended Euclidean Algorithm to determine integers x and y that meet the equation, ensuring to verify the feasibility of the solution based on the greatest common divisor (gcd) of a and b. Return (x, y) as a tuple if a solution exists, or None if no solution can be found."
    },
    {
        "task_id": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "instruction 1": "Identify the input parameters as two lists; the first list contains elements to be filtered, and the second list contains elements to be removed.",
        "instruction 2": "Use a list comprehension to create a new list that includes only the elements from the first list that are not present in the second list, then return this new list.",
        "new_prompt": "Write a function to remove all elements from a given list present in another list. The input will consist of two lists; the first list contains elements to be filtered, while the second list contains elements to be removed. Utilize a list comprehension to generate a new list that consists solely of elements from the first list that are absent in the second list, and then return this new list."
    },
    {
        "task_id": 162,
        "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "instruction 1": "Identify the input parameter as an integer n and initialize a variable to hold the sum, starting at 0.",
        "instruction 2": "Use a for loop to iterate from i=0 to n // 2, in each iteration calculate (n - 2*i) and add it to the sum, then return the final sum.",
        "new_prompt": "```python\n# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n# Ensure the input parameter is an integer n and initialize a variable to hold the sum, starting at 0. Use a for loop to iterate from i=0 to n // 2, calculating (n - 2*i) in each iteration and adding it to the sum, then return the final sum.\n```"
    },
    {
        "task_id": 165,
        "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "instruction 1": "Identify the input parameter as a string and convert it to lowercase to ensure case insensitivity.",
        "instruction 2": "Use a loop to iterate through each character in the string and compare its position in the alphabet (1 for 'a', 2 for 'b', etc.) with its index in the string, counting the matches.",
        "new_prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive). Identify the input parameter as a string and convert it to lowercase to ensure case insensitivity. Use a loop to iterate through each character in the string and compare its position in the alphabet (1 for 'a', 2 for 'b', etc.) with its index in the string, counting the matches."
    },
    {
        "task_id": 166,
        "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize a counter to keep track of the number of pairs with an even XOR result.",
        "instruction 2": "Use nested loops to iterate through all unique pairs of integers in the list, checking if their XOR result is even using the modulus operator, and increment the counter accordingly, then return the counter.",
        "new_prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number. The input parameter should be identified as a list of integers, and a counter should be initialized to keep track of the number of pairs with an even XOR result. Utilize nested loops to iterate through all unique pairs of integers in the list, checking if their XOR result is even using the modulus operator, and increment the counter accordingly before returning the final count."
    },
    {
        "task_id": 167,
        "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "instruction 1": "Identify the input parameter as an integer n for which the smallest power of 2 is to be found.",
        "instruction 2": "Use a loop or bit manipulation to calculate the smallest power of 2 that is greater than or equal to n and return that value.",
        "new_prompt": "Write a python function to find the smallest power of 2 greater than or equal to n. The input parameter n should be identified as an integer for which the smallest power of 2 is to be calculated. Utilize a loop or bit manipulation to determine the smallest power of 2 that meets or exceeds this integer, and return that computed value."
    },
    {
        "task_id": 168,
        "prompt": "Write a function to count the number of occurrences of a number in a given list.",
        "instruction 1": "Identify the input parameters as a list of numbers and the specific number whose occurrences need to be counted.",
        "instruction 2": "Use the `count()` method on the list to return the total number of occurrences of the specified number.",
        "new_prompt": "```python\n# Write a function to count the number of occurrences of a specific number in a given list of numbers by using the count() method on the list to return the total occurrences.\n```"
    },
    {
        "task_id": 170,
        "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "instruction 1": "Identify the input parameters as a list of numbers and two indices that define the start and end of the range.",
        "instruction 2": "Use list slicing to select the sublist from the start index to the end index and return the sum of that sublist using the `sum()` function.",
        "new_prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices, where the input parameters are a list of numbers and two indices that define the start and end of the range. Utilize list slicing to select the sublist from the start index to the end index and return the sum of that sublist using the `sum()` function."
    },
    {
        "task_id": 171,
        "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "instruction 1": "Identify the input parameter as a float or integer representing the length of one side of the regular pentagon.",
        "instruction 2": "Calculate the perimeter by multiplying the side length by 5, then return the calculated perimeter.",
        "new_prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides. The input parameter should be identified as a float or integer representing the length of one side of the regular pentagon. To calculate the perimeter, multiply the side length by 5, and return the calculated perimeter."
    },
    {
        "task_id": 172,
        "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "instruction 1": "Identify the input parameter as a string in which the occurrences of 'std' need to be counted.",
        "instruction 2": "Use the `count()` method of the string class to find and return the number of non-overlapping occurrences of 'std' in the given string.",
        "new_prompt": "Write a function to count the number of occurrences of the string 'std' in a given string, which should be identified as the input parameter. Use the `count()` method of the string class to find and return the number of non-overlapping occurrences of 'std' in the specified string."
    },
    {
        "task_id": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "instruction 1": "Identify the input parameter as a tuple containing elements of various data types.",
        "instruction 2": "Use Python's built-in `type()` function to check the data type of the first element and compare it with the types of all other elements in the tuple, returning True if all types match and False otherwise.",
        "new_prompt": "Write a function to check if all the elements in a tuple, which contains elements of various data types, have the same data type or not. Use Python's built-in `type()` function to check the data type of the first element and compare it with the types of all other elements in the tuple, returning True if all types match and False otherwise."
    },
    {
        "task_id": 223,
        "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "instruction 1": "Identify the input parameters as a sorted array, an integer n representing its length, and the element to check for the majority condition.",
        "instruction 2": "Calculate the occurrence of the element in the array and compare it to n/2; return True if its count exceeds n/2, otherwise return False.",
        "new_prompt": "Write a function that takes in a sorted array, an integer n representing its length, and an element to check for the majority condition, then returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.) Calculate the occurrence of the element in the array and compare it to n/2; return True if its count exceeds n/2, otherwise return False."
    },
    {
        "task_id": 224,
        "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "instruction 1": "Identify the input parameter as an integer number for which the set bits need to be counted.",
        "instruction 2": "Use Python's built-in `bin()` function to convert the number to its binary representation, then count the occurrences of '1' using the `count()` method.",
        "new_prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given integer number for which the set bits need to be counted. Use Python's built-in `bin()` function to convert this number to its binary representation, then count the occurrences of '1' using the `count()` method."
    },
    {
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "instruction 1": "Identify the input parameter as a string and initialize an empty string to hold the result.",
        "instruction 2": "Use a loop to iterate through the string, appending characters with even index values to the result string, and then return the result string.",
        "new_prompt": "Write a python function that receives a string as an input parameter, initializes an empty string to hold the result, and removes the characters that have odd index values. Use a loop to iterate through the string, appending characters with even index values to the result string, and then return the result string."
    },
    {
        "task_id": 227,
        "prompt": "Write a function to find minimum of three numbers.",
        "instruction 1": "Identify the input parameters as three numbers that need to be compared.",
        "instruction 2": "Use Python's built-in `min()` function to return the smallest of the three numbers.",
        "new_prompt": "Write a function to find the minimum of three numbers, where the input parameters are the three numbers that need to be compared. Use Python's built-in `min()` function to return the smallest of these three numbers."
    },
    {
        "task_id": 230,
        "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "instruction 1": "Identify the input parameters as a string and a character that will replace the blank spaces.",
        "instruction 2": "Use Python's string method `replace()` to replace blank spaces with the specified character and return the modified string.",
        "new_prompt": "Write a function that takes in a string and a character, which will be used to replace blank spaces in the string. Use Python's string method `replace()` to accomplish this task, ensuring that the function returns the modified string."
    },
    {
        "task_id": 232,
        "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "instruction 1": "Identify the input parameters as a list of items and an integer n that specifies the number of largest items to retrieve.",
        "instruction 2": "Use Python's `heapq.nlargest()` function to obtain the n largest items from the list and return them.",
        "new_prompt": "Write a function that takes in a list of items and an integer n that specifies the number of largest items to retrieve, and returns a list containing the n largest items from the list using Python's `heapq.nlargest()` function to obtain them."
    },
    {
        "task_id": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "instruction 1": "Identify the input parameters as the radius and height of the cylinder.",
        "instruction 2": "Use the formula for the lateral surface area of a cylinder, which is 2 * pi * radius * height, and return the computed area.",
        "new_prompt": "Write a function to find the lateral surface area of a cylinder, where the input parameters are the radius and height of the cylinder. Use the formula for the lateral surface area of a cylinder, which is 2 * pi * radius * height, and return the computed area."
    },
    {
        "task_id": 234,
        "prompt": "Write a function to find the volume of a cube given its side length.",
        "instruction 1": "Identify the input parameter as a numeric value representing the side length of the cube.",
        "instruction 2": "Calculate the volume of the cube using the formula volume = side_length ** 3 and return the result.",
        "new_prompt": "Write a function to find the volume of a cube given its side length, where the input parameter is a numeric value representing the side length of the cube. Calculate the volume of the cube using the formula volume = side_length ** 3 and return the result."
    },
    {
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.",
        "instruction 1": "Identify the input parameter as an integer number whose even bits need to be set.",
        "instruction 2": "Use bitwise operations to iterate through the bits of the number, setting all even-indexed bits to 1, and return the modified number.",
        "new_prompt": "Write a python function to set all even bits of a given integer number whose even bits need to be set. Use bitwise operations to iterate through the bits of the number, setting all even-indexed bits to 1, and return the modified number."
    },
    {
        "task_id": 237,
        "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "instruction 1": "Identify the input parameter as a list of tuples that contains the data to be processed.",
        "instruction 2": "Use a dictionary to count the occurrences of each unique tuple in the list by iterating through the list and incrementing the count for each tuple in the dictionary.",
        "new_prompt": "Write a function that takes in a list of tuples, which serves as the data to be processed, and returns a dictionary that counts the occurrences of each unique tuple by iterating through the list and incrementing the count for each tuple in the dictionary."
    },
    {
        "task_id": 238,
        "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
        "instruction 1": "Identify the input parameter as a string and create a variable to store the count of non-empty substrings.",
        "instruction 2": "Use a nested loop to generate all possible substrings of the string and increment the count for each non-empty substring found, then return the final count.",
        "new_prompt": "Write a python function to count the number of non-empty substrings of a given string. The function should accept a string as an input parameter and include a variable to keep track of the count of non-empty substrings. Additionally, utilize a nested loop to generate all possible substrings of the input string, incrementing the count for each non-empty substring discovered, and ultimately return the total count."
    },
    {
        "task_id": 239,
        "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "instruction 1": "Identify the input parameters as two positive integers m and n, where m defines the upper limit for elements in the sequence, and n defines the length of the sequence.",
        "instruction 2": "Implement a recursive function or dynamic programming approach to count valid sequences of length n, ensuring each successive element meets the criteria of being at least twice the previous element and at most m.",
        "new_prompt": "Write a function that takes in two positive integers, m and n—where m establishes the upper limit for the elements in the sequence and n specifies the length of the sequence—and finds the number of possible sequences of length n, such that each element is a positive integer, greater than or equal to twice the previous element, but less than or equal to m. Implement this using either a recursive function or a dynamic programming approach to count the valid sequences, ensuring that each successive element adheres to the criteria of being at least twice the previous element and at most m."
    },
    {
        "task_id": 240,
        "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "instruction 1": "Identify the input parameters as two lists, where the first list is to be modified and the second list contains the elements to replace the last element of the first list.",
        "instruction 2": "Use Python's list slicing to replace the last element of the first list by concatenating it with the second list, then return the modified first list.",
        "new_prompt": "Write a function that takes in two lists, where the first list is to be modified by replacing its last element with the elements from the second list. Use Python's list slicing to achieve this replacement by concatenating the first list (without its last element) with the second list, then return the modified first list."
    },
    {
        "task_id": 242,
        "prompt": "Write a function to count the total number of characters in a string.",
        "instruction 1": "Identify the input parameter as a string from which the total number of characters will be counted.",
        "instruction 2": "Use the built-in Python function `len()` to return the number of characters in the string.",
        "new_prompt": "Write a function to count the total number of characters in a string, identifying the input parameter as a string from which the total number of characters will be counted, and using the built-in Python function `len()` to return the number of characters in the string."
    },
    {
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.",
        "instruction 1": "Identify the input parameter as an integer that represents the given number for which the next perfect square needs to be found.",
        "instruction 2": "Calculate the next integer greater than the square root of the given number, square that integer, and return the result as the next perfect square.",
        "new_prompt": "Write a python function to find the next perfect square greater than a given number. The input parameter should be an integer representing the given number for which the next perfect square needs to be found. The function should calculate the next integer greater than the square root of the given number, square that integer, and return the result as the next perfect square."
    },
    {
        "task_id": 245,
        "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "instruction 1": "Identify the input parameter as an array of integers and initialize an array to store the maximum sum of increasing subsequences ending at each index.",
        "instruction 2": "Implement a two-pass process: first, calculate the maximum sum of increasing subsequences, then calculate the maximum sum of decreasing subsequences, and finally combine these results to find the maximum sum of a bitonic subsequence.",
        "new_prompt": "Write a function that takes an array of integers and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing. Begin by initializing an array to store the maximum sum of increasing subsequences that end at each index. Implement a two-pass process: first, compute the maximum sum of increasing subsequences, then calculate the maximum sum of decreasing subsequences, and finally combine these results to determine the maximum sum of a bitonic subsequence."
    },
    {
        "task_id": 247,
        "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "instruction 1": "Identify the input parameter as a string and initialize a 2D array to store lengths of palindromic subsequences for different substrings.",
        "instruction 2": "Implement a dynamic programming approach to fill the array based on character matches and lengths of palindromic subsequences, then return the value for the full string from the array.",
        "new_prompt": "Write a function to find the length of the longest palindromic subsequence in the given string. Ensure that the input parameter is identified as a string, and initialize a 2D array to store the lengths of palindromic subsequences for various substrings. Utilize a dynamic programming approach to populate this array, considering character matches and the lengths of palindromic subsequences, and then return the value corresponding to the full string from the array."
    },
    {
        "task_id": 250,
        "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "instruction 1": "Identify the input parameters as a tuple and the element to be counted within that tuple.",
        "instruction 2": "Use the tuple's `count()` method to count the occurrences of the specified element and return that count.",
        "new_prompt": "Write a python function that takes in a tuple and an element, where the input parameters consist of the tuple and the element to be counted within that tuple, and counts the occurrences of the element in the tuple using the tuple's `count()` method to return that count."
    },
    {
        "task_id": 251,
        "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "instruction 1": "Identify the input parameters as a list and an element to be inserted before each element in the list.",
        "instruction 2": "Use a list comprehension to create a new list by iterating through the original list and inserting the specified element before each existing element, then return the resulting list.",
        "new_prompt": "Write a function that takes in a list and an element, where the element is the one to be inserted before each element in the list, and returns the resulting list. Use a list comprehension to create a new list by iterating through the original list and inserting the specified element before each existing element."
    },
    {
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "instruction 1": "Identify the input parameter as a complex number and ensure to import the `cmath` module for complex number operations.",
        "instruction 2": "Use the `cmath.polar()` function to convert the complex number to its polar coordinates and return the result as a tuple representing the magnitude and phase angle.",
        "new_prompt": "Write a python function to convert complex numbers to polar coordinates. The function should identify the input parameter as a complex number and ensure to import the `cmath` module for complex number operations. Additionally, use the `cmath.polar()` function to convert the complex number to its polar coordinates and return the result as a tuple representing the magnitude and phase angle."
    },
    {
        "task_id": 253,
        "prompt": "Write a python function that returns the number of integer elements in a given list.",
        "instruction 1": "Identify the input parameter as a list that can contain elements of various types.",
        "instruction 2": "Use a list comprehension or a loop to iterate through the list and count the number of elements that are instances of the integer type, then return the count.",
        "new_prompt": "Write a python function that returns the number of integer elements in a given list, which can contain elements of various types. Use a list comprehension or a loop to iterate through the list, counting the instances of the integer type, and then return the total count."
    },
    {
        "task_id": 255,
        "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "instruction 1": "Identify the input parameters as a list of elements and an integer n that specifies the length of the combinations.",
        "instruction 2": "Use the itertools module's `combinations_with_replacement` function to generate all possible combinations of the elements of the list with repetition allowed, then return a list of tuples for each combination.",
        "new_prompt": "Write a function that takes in a list of elements and an integer n that specifies the length of the combinations, then generates all combinations (with repetition) of the elements of the list using the itertools module's `combinations_with_replacement` function and returns a list with a tuple for each combination."
    },
    {
        "task_id": 256,
        "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "instruction 1": "Identify the input parameter as a non-negative integer and initialize a variable to count prime numbers.",
        "instruction 2": "Implement a loop to check each number less than the input for primality, using a helper function, and increment the count for each prime found, then return the count.",
        "new_prompt": "Write a python function that takes in a non-negative integer and initializes a variable to count prime numbers, then returns the number of prime numbers less than the given non-negative integer. Implement a loop to check each number less than the input for primality using a helper function, incrementing the count for each prime found before returning the final count."
    },
    {
        "task_id": 257,
        "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "instruction 1": "Identify the input parameters as two numbers that will be passed to the function.",
        "instruction 2": "Return a tuple containing the second number followed by the first number.",
        "new_prompt": "Write a function that takes in two numbers as input parameters and returns a tuple containing the second number followed by the first number."
    },
    {
        "task_id": 259,
        "prompt": "Write a function to maximize the given two tuples.",
        "instruction 1": "Identify the input parameters as two tuples of numbers and determine the operation required to maximize each corresponding element from the tuples.",
        "instruction 2": "Use the `zip` function to pair elements from both tuples and apply the `max` function to each pair, collecting the results into a new tuple which is then returned.",
        "new_prompt": "Write a function to maximize the given two tuples. Identify the input parameters as two tuples of numbers and determine the operation required to maximize each corresponding element from the tuples. Utilize the `zip` function to pair elements from both tuples and apply the `max` function to each pair, collecting the results into a new tuple that is subsequently returned."
    },
    {
        "task_id": 260,
        "prompt": "Write a function to find the nth newman–shanks–williams prime number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the Newman–Shanks–Williams prime number to find.",
        "instruction 2": "Implement an algorithm that generates prime numbers and checks for the Newman–Shanks–Williams condition, returning the nth prime found.",
        "new_prompt": "Write a function to find the nth newman–shanks–williams prime number. The input parameter should be an integer n, which indicates the position of the Newman–Shanks–Williams prime number to locate. Additionally, implement an algorithm that creates prime numbers and verifies the Newman–Shanks–Williams condition, ultimately returning the nth prime identified."
    },
    {
        "task_id": 261,
        "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "instruction 1": "Identify the input parameters as two tuples containing numerical values to be divided element-wise.",
        "instruction 2": "Use a loop or a list comprehension to iterate through both tuples simultaneously, performing the division for each pair of corresponding elements, and return the results as a new tuple.",
        "new_prompt": "Write a function that takes in two tuples containing numerical values and performs a mathematical division operation element-wise across the given tuples. Identify the input parameters as the two tuples and use a loop or a list comprehension to iterate through both tuples simultaneously, performing the division for each pair of corresponding elements, and return the results as a new tuple."
    },
    {
        "task_id": 262,
        "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "instruction 1": "Identify the input parameters as a list and an integer L that indicates the length of the first part of the list.",
        "instruction 2": "Use list slicing to separate the list into two parts: the first part containing the first L elements and the second part containing the remainder, then return these two parts as a tuple.",
        "new_prompt": "Write a function that takes in a list and an integer L, which indicates the length of the first part of the list, and splits the given list into two parts where the length of the first part is L. Use list slicing to separate the list into two parts: the first part containing the first L elements and the second part containing the remainder, then return these resulting lists in a tuple."
    },
    {
        "task_id": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "instruction 1": "Identify the input parameter as an integer representing the dog's age in human years.",
        "instruction 2": "Calculate the dog's age in dog years by multiplying the human age by 7 and return the result.",
        "new_prompt": "Write a function to calculate a dog's age in dog's years. The input parameter should be an integer representing the dog's age in human years. To determine the dog's age in dog years, multiply the human age by 7 and return the result."
    },
    {
        "task_id": 265,
        "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "instruction 1": "Identify the input parameters as a list and an integer n that represents the split interval.",
        "instruction 2": "Use a loop or list comprehension to iterate through the list in steps of n, creating sublists containing every nth element and return the list of these sublists.",
        "new_prompt": "Write a function that takes in a list and an integer n, which signifies the split interval, and splits the list for every nth element, returning a list of the resulting sublists. Use a loop or list comprehension to iterate through the list in steps of n, creating sublists that contain every nth element."
    },
    {
        "task_id": 266,
        "prompt": "Write a function to find the lateral surface area of a cube given its side length.",
        "instruction 1": "Identify the input parameter as a float or integer that represents the side length of the cube.",
        "instruction 2": "Calculate the lateral surface area using the formula `4 * side_length ** 2` and return the computed value.",
        "new_prompt": "Write a function to find the lateral surface area of a cube given its side length. The input parameter should be identified as a float or integer that represents the side length of the cube. To calculate the lateral surface area, use the formula `4 * side_length ** 2` and return the computed value."
    },
    {
        "task_id": 267,
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of odd natural numbers to consider.",
        "instruction 2": "Use a loop to iterate through the first n odd natural numbers, calculate their squares, and return the sum of these squared values.",
        "new_prompt": "Write a python function that takes in an integer n, which represents the number of odd natural numbers to consider, and returns the sum of the squares of the first n odd natural numbers. Use a loop to iterate through these odd natural numbers, calculate their squares, and return the sum of these squared values."
    },
    {
        "task_id": 268,
        "prompt": "Write a function to find the n'th star number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the star number to find.",
        "instruction 2": "Use the formula for the star number, which is calculated as n * (2n - 1) / 2, and return the computed star number.",
        "new_prompt": "Write a function to find the n'th star number. # The input parameter should be an integer n, representing the position of the star number to calculate. Use the formula for the star number, which is n * (2n - 1) / 2, to compute and return the resulting star number."
    },
    {
        "task_id": 269,
        "prompt": "Write a function to find the ascii value of a character.",
        "instruction 1": "Identify the input parameter as a single character whose ASCII value needs to be found.",
        "instruction 2": "Use Python's built-in `ord()` function to return the ASCII value of the specified character.",
        "new_prompt": "Write a function to find the ASCII value of a character, where the input parameter should be a single character whose ASCII value needs to be determined. Utilize Python's built-in `ord()` function to return the ASCII value of the specified character."
    },
    {
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
        "instruction 1": "Identify the input parameter as a list of numbers, and determine that even positions refer to indices 0, 2, 4, etc.",
        "instruction 2": "Use a loop or list comprehension to filter the even numbers at even indices and return the sum of these numbers using the `sum()` function.",
        "new_prompt": "Write a python function to find the sum of even numbers at even positions of a list. The input parameter should be a list of numbers, where even positions correspond to indices 0, 2, 4, and so on. Utilize a loop or list comprehension to filter the even numbers located at these even indices, and return their sum by employing the `sum()` function."
    },
    {
        "task_id": 271,
        "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of even natural numbers to consider.",
        "instruction 2": "Use a loop to generate the first n even natural numbers, raise each to the fifth power, and return the sum of these values.",
        "new_prompt": "Write a python function that takes in an integer n, which represents the number of even natural numbers to consider, and finds the sum of the first n even natural numbers that are raised to the fifth power by using a loop to generate these numbers, raising each to the fifth power, and returning the sum of these values."
    },
    {
        "task_id": 272,
        "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "instruction 1": "Identify the input parameter as a list of tuples.",
        "instruction 2": "Use a list comprehension to iterate through the list of tuples and extract the last element of each tuple, then return the resulting list.",
        "new_prompt": "Write a function that accepts a list of tuples as an input parameter and returns a list containing the last element of each tuple by using a list comprehension to iterate through the list of tuples."
    },
    {
        "task_id": 273,
        "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "instruction 1": "Identify the input parameters as two tuples containing numeric elements of the same length.",
        "instruction 2": "Use a loop or a list comprehension to iterate through the elements of both tuples, subtracting elements with the same index and returning a new tuple containing the results.",
        "new_prompt": "Write a function that takes in two tuples containing numeric elements of the same length and subtracts the elements of the first tuple by the elements of the second tuple with the same index. Use a loop or a list comprehension to iterate through the elements of both tuples, subtracting corresponding elements and returning a new tuple with the results."
    },
    {
        "task_id": 274,
        "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "instruction 1": "Identify the input parameter as a positive integer n and determine that the task is to find the binomial coefficients for each index up to n.",
        "instruction 2": "Use the `math.comb()` function to calculate the binomial coefficients for even indices and sum them up, then return the resulting sum.",
        "new_prompt": "Write a python function that takes in a positive integer n, which is identified as the input parameter, and finds the sum of the binomial coefficients at even indices for all indices up to n. Use the `math.comb()` function to calculate the binomial coefficients for even indices, sum them, and return the final result."
    },
    {
        "task_id": 276,
        "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "instruction 1": "Identify the input parameters as the radius and height of the cylinder, both represented as floating-point numbers.",
        "instruction 2": "Use the formula for the volume of a cylinder, V = π * r^2 * h, where r is the radius and h is the height, to calculate and return the volume.",
        "new_prompt": "Write a function that takes in the radius and height of a cylinder (both represented as floating-point numbers) and returns the volume calculated using the formula V = π * r^2 * h, where r is the radius and h is the height."
    },
    {
        "task_id": 277,
        "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "instruction 1": "Identify the input parameters as a dictionary and an integer n that specifies the threshold for filtering the dictionary entries.",
        "instruction 2": "Use a dictionary comprehension to create a new dictionary that includes only the entries from the original dictionary where the values are greater than or equal to n, then return the filtered dictionary.",
        "new_prompt": "Write a function that takes in a dictionary and an integer n that specifies the threshold for filtering the dictionary entries, and filters the dictionary to only include entries with values greater than or equal to n. Use a dictionary comprehension to create a new dictionary that includes only the entries from the original dictionary where the values meet the specified threshold, then return the filtered dictionary."
    },
    {
        "task_id": 278,
        "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "instruction 1": "Identify the input parameter as a tuple and the specific element within that tuple for which the count of preceding elements is to be determined.",
        "instruction 2": "Use the `index()` method to find the position of the specified element in the tuple and return that position, which represents the count of elements before it.",
        "new_prompt": "Write a function to find the number of elements that occur before the specified element in the given tuple. Ensure to identify the input parameter as a tuple and the specific element within that tuple for which the count of preceding elements is to be determined. Use the `index()` method to find the position of the specified element in the tuple and return that position, which represents the count of elements before it."
    },
    {
        "task_id": 279,
        "prompt": "Write a function to find the nth decagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that specifies which decagonal number to compute.",
        "instruction 2": "Use the formula for the nth decagonal number, which is given by n * (4n - 3), to calculate and return the result.",
        "new_prompt": "Write a function to find the nth decagonal number, where the input parameter is an integer n that specifies which decagonal number to compute. Utilize the formula for the nth decagonal number, given by n * (4n - 3), to calculate and return the result."
    },
    {
        "task_id": 280,
        "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "instruction 1": "Identify the input parameters as an array and an element to search for within the array.",
        "instruction 2": "Use the 'in' operator to check if the element is present in the array, and utilize the 'index()' method to find the index if it exists, returning a tuple with a boolean and the index or -1 if the element is not found.",
        "new_prompt": "Write a function that takes in an array and an element to search for within the array, and returns a tuple containing a boolean that indicates if the element is present in the array and the index position of the element (or -1 if the element is not found). Use the 'in' operator to determine if the element exists in the array, and apply the 'index()' method to locate the index if it is found, ensuring the function returns a tuple with the boolean value and the index or -1 when the element is absent."
    },
    {
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "instruction 1": "Identify the input parameter as a list of elements that need to be checked for uniqueness.",
        "instruction 2": "Use a set to compare the length of the list with the length of the set created from the list; return True if they are equal (indicating all elements are unique), otherwise return False.",
        "new_prompt": "Write a python function to check if the elements of a given list are unique or not. The function should accept a list of elements as its input parameter that are to be verified for uniqueness. To determine this, utilize a set to compare the length of the original list with the length of the set derived from it; return True if the lengths match (indicating all elements are unique), otherwise return False."
    },
    {
        "task_id": 282,
        "prompt": "Write a function to subtract two lists element-wise.",
        "instruction 1": "Identify the input parameters as two lists of numbers that need to be subtracted element-wise.",
        "instruction 2": "Use a list comprehension to iterate over the elements of both lists simultaneously and return a new list containing the results of the subtraction.",
        "new_prompt": "Write a function to subtract two lists element-wise, taking two lists of numbers as input parameters that need to be subtracted. Utilize a list comprehension to simultaneously iterate over the elements of both lists and return a new list containing the results of the subtraction."
    },
    {
        "task_id": 283,
        "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "instruction 1": "Identify the input parameter as an integer and convert it to a string to iterate through each digit.",
        "instruction 2": "Count the frequency of each digit and compare it to the digit's value, returning True if all frequencies are less than or equal to their respective digits, otherwise return False.",
        "new_prompt": "Write a python function that takes in an integer, converts it to a string to iterate through each digit, and checks whether the frequency of each digit is less than or equal to the digit itself. Count the frequency of each digit and compare it to the digit's value, returning True if all frequencies are less than or equal to their respective digits; otherwise, return False."
    },
    {
        "task_id": 284,
        "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "instruction 1": "Identify the input parameters as a list and an element to be checked for equality against all items in the list.",
        "instruction 2": "Use a loop or the `all()` function to verify if every item in the list is equal to the given element, and return the result as a boolean.",
        "new_prompt": "Write a function that takes in a list and an element to be checked for equality against all items in the list, and verifies if every item in the list is equal to the given element using a loop or the `all()` function, returning the result as a boolean."
    },
    {
        "task_id": 285,
        "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "instruction 1": "Identify the input parameter as a string that needs to be checked for the presence of the pattern 'abb' or 'abbb'.",
        "instruction 2": "Use a regular expression to determine if the string contains 'a' followed by either two or three 'b' characters, returning True if it matches, otherwise return False.",
        "new_prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters. The input parameter should be identified as a string that needs to be checked for the presence of the pattern 'abb' or 'abbb'. Use a regular expression to determine if the string contains 'a' followed by either two or three 'b' characters, returning True if it matches; otherwise, return False."
    },
    {
        "task_id": 286,
        "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "instruction 1": "Identify the input parameters as an array and an integer k, which represents the number of times the array is repeated.",
        "instruction 2": "Create the modified array by repeating the original array k times, then implement a variation of Kadane's algorithm to find the largest sum of a contiguous subarray within this modified array.",
        "new_prompt": "Write a function to find the largest sum of a contiguous array in the modified array, created by repeating the given array a specified number of times, represented by the integer k. The input parameters should include an array and this integer k. First, construct the modified array by repeating the original array k times, and then utilize a variation of Kadane's algorithm to determine the largest sum of a contiguous subarray within this modified array."
    },
    {
        "task_id": 287,
        "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the count of even natural numbers to be squared and summed.",
        "instruction 2": "Use a loop or a mathematical formula to calculate the sum of squares of the first n even natural numbers, which can be represented as the sum of (2*i)^2 for i in the range from 1 to n.",
        "new_prompt": "Write a python function that takes in an integer n, which represents the count of even natural numbers to be squared and summed, and returns the sum of squares of the first n even natural numbers. Use a loop or a mathematical formula to calculate this sum, which can be represented as the sum of (2*i)^2 for i in the range from 1 to n."
    },
    {
        "task_id": 290,
        "prompt": "Write a function to find the list of maximum length in a list of lists.",
        "instruction 1": "Identify the input parameter as a list of lists and initialize a variable to keep track of the maximum length found.",
        "instruction 2": "Iterate through each sublist, compare its length to the current maximum length, and update the maximum length and corresponding sublist if a longer sublist is found; return the sublist with the maximum length.",
        "new_prompt": "Write a function to find the list of maximum length in a list of lists. The input parameter should be identified as a list of lists, and a variable should be initialized to keep track of the maximum length found. The function should then iterate through each sublist, comparing its length to the current maximum length, updating the maximum length and the corresponding sublist whenever a longer sublist is encountered, ultimately returning the sublist with the maximum length."
    },
    {
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "instruction 1": "Identify the input parameters as two numbers, numerator and denominator.",
        "instruction 2": "Use integer division in Python with the '//' operator to compute the quotient of the two numbers and return the result.",
        "new_prompt": "Write a python function that takes two input parameters, a numerator and a denominator, to find the quotient of these two numbers (rounded down to the nearest integer) using integer division with the '//' operator, and return the result."
    },
    {
        "task_id": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "instruction 1": "Identify the input parameters as two integers or floats representing the lengths of the two sides of the right-angled triangle that are adjacent to the right angle.",
        "instruction 2": "Use the Pythagorean theorem to calculate the length of the third side by taking the square root of the sum of the squares of the two given sides, then return the result.",
        "new_prompt": "Write a function to find the third side of a right-angled triangle. # Identify the input parameters as two integers or floats representing the lengths of the two sides of the right-angled triangle that are adjacent to the right angle. Use the Pythagorean theorem to calculate the length of the third side by taking the square root of the sum of the squares of the two given sides, then return the result."
    },
    {
        "task_id": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "instruction 1": "Identify the input parameter as a list that may contain elements of different data types, including integers, floats, and strings.",
        "instruction 2": "Iterate through the list, use conditional statements to compare numeric values, and determine the maximum value while ignoring non-numeric types, then return that maximum value.",
        "new_prompt": "Write a function to find the maximum value in a given heterogeneous list. The input parameter should be identified as a list that may contain elements of various data types, including integers, floats, and strings. Iterate through the list and use conditional statements to compare numeric values, determining the maximum value while ignoring non-numeric types, and then return that maximum value."
    },
    {
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.",
        "instruction 1": "Identify the input parameter as an array of integers and implement a method to count the number of inversions, where an inversion is defined as a pair of indices (i, j) such that i < j and array[i] > array[j].",
        "instruction 2": "Utilize a modified merge sort algorithm to efficiently count the inversions as the array is sorted, returning the total count at the end.",
        "new_prompt": "Write a python function to count inversions in an array. The input parameter should be defined as an array of integers. Implement a method to calculate the number of inversions, defined as pairs of indices (i, j) that satisfy i < j and array[i] > array[j]. To efficiently count the inversions during the sorting process, utilize a modified merge sort algorithm, returning the total count at the end."
    },
    {
        "task_id": 297,
        "prompt": "Write a function to flatten a given nested list structure.",
        "instruction 1": "Identify the input parameter as a nested list, which may contain integers or other lists as elements.",
        "instruction 2": "Use a recursive approach or an iterative method with a stack to traverse the nested list structure, appending each integer to a result list, and then return the flattened list.",
        "new_prompt": "Write a function to flatten a given nested list structure. \n# The input parameter should be identified as a nested list that may contain integers or other lists as elements. \n# Utilize either a recursive approach or an iterative method with a stack to traverse the nested list structure, appending each integer to a result list before returning the flattened list."
    },
    {
        "task_id": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "instruction 1": "Identify the input parameter as a list of tuples where each tuple contains numerical values.",
        "instruction 2": "Use Python's built-in `max()` function along with a generator expression to calculate and return the maximum aggregate value from the tuples.",
        "new_prompt": "Write a function to calculate the maximum aggregate from the list of tuples, where the input parameter is identified as a list of tuples containing numerical values. Utilize Python's built-in `max()` function in conjunction with a generator expression to compute and return the maximum aggregate value from the tuples."
    },
    {
        "task_id": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "instruction 1": "Identify the input parameter as an integer n that represents half the length of the binary sequences.",
        "instruction 2": "Use combinatorial mathematics to calculate the count of valid binary sequences by determining combinations of n bits that result in equal sums for the first and last n bits.",
        "new_prompt": "Write a function to find the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits. The input parameter should be an integer n that represents half the length of the binary sequences. Utilize combinatorial mathematics to calculate the count of valid binary sequences by determining combinations of n bits that result in equal sums for both the first and last n bits."
    },
    {
        "task_id": 301,
        "prompt": "Write a function to find the depth of a dictionary.",
        "instruction 1": "Identify the input parameter as a dictionary whose depth you need to determine.",
        "instruction 2": "Use a recursive approach to traverse the dictionary, counting the depth by checking for nested dictionaries and returning the maximum depth found.",
        "new_prompt": "Write a function to find the depth of a dictionary, identifying the input parameter as the dictionary whose depth you need to determine. Use a recursive approach to traverse the dictionary, counting the depth by checking for nested dictionaries and returning the maximum depth found."
    },
    {
        "task_id": 305,
        "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
        "instruction 1": "Identify the input parameter as a list of words and filter the list to find words that start with the letter 'p'.",
        "instruction 2": "Return the first two words from the filtered list, ensuring to handle cases where fewer than two words start with 'p'.",
        "new_prompt": "Write a function to return two words from a list of words starting with the letter 'p'. First, identify the input parameter as a list of words and filter this list to find those that start with the letter 'p'. Then, return the first two words from the filtered list, ensuring to manage scenarios where fewer than two words start with 'p'."
    },
    {
        "task_id": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "instruction 1": "Identify the input parameters as an integer list representing the sequence and two integers i and k where k > i, indicating the prefix index and the index of the element to be included respectively.",
        "instruction 2": "Implement a dynamic programming approach to calculate the maximum sum of increasing subsequences up to index i and include the element at index k, ensuring that all elements in the subsequence before k are less than the element at k.",
        "new_prompt": "```python\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i. The input parameters should be an integer list representing the sequence and two integers i and k, where k > i, indicating the prefix index and the index of the element to be included respectively. Implement a dynamic programming approach to calculate the maximum sum of increasing subsequences up to index i and include the element at index k, ensuring that all elements in the subsequence before k are less than the element at k.\n```"
    },
    {
        "task_id": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "instruction 1": "Identify the input parameters as two lists of numbers and a specified integer that indicates how many largest products to find.",
        "instruction 2": "Calculate the products of each pair formed by selecting one element from each list, sort these products in descending order, and return the top specified number of largest products.",
        "new_prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list. The input parameters should consist of two lists of numbers and a specified integer that indicates how many largest products to find. The function should calculate the products of each pair formed by selecting one element from each list, sort these products in descending order, and return the top specified number of largest products."
    },
    {
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.",
        "instruction 1": "Identify the input parameters as two numbers that need to be compared.",
        "instruction 2": "Use Python's built-in `max()` function to determine and return the maximum of the two numbers.",
        "new_prompt": "Write a python function to find the maximum of two numbers, where the input parameters are two numbers that need to be compared. Utilize Python's built-in `max()` function to determine and return the maximum of these two numbers."
    },
    {
        "task_id": 310,
        "prompt": "Write a function to convert a given string to a tuple of characters.",
        "instruction 1": "Identify the input parameter as a string that needs to be converted into a tuple.",
        "instruction 2": "Use Python's built-in `tuple()` function to convert the string into a tuple of its characters and return the resulting tuple.",
        "new_prompt": "Write a function that takes an input parameter, which is a string that needs to be converted into a tuple of characters, and utilizes Python's built-in `tuple()` function to achieve this conversion, returning the resulting tuple."
    },
    {
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.",
        "instruction 1": "Identify the input parameter as an integer representing the number for which the left most unset bit needs to be set.",
        "instruction 2": "Use bitwise operations to find the left most unset bit and return the modified number with that bit set to 1.",
        "new_prompt": "Write a python function that accepts an integer as an input parameter, representing the number for which the left most unset bit needs to be set. Use bitwise operations to identify the left most unset bit and return the modified number with that bit set to 1."
    },
    {
        "task_id": 312,
        "prompt": "Write a function to find the volume of a cone.",
        "instruction 1": "Identify the input parameters as the radius r and height h of the cone.",
        "instruction 2": "Use the formula for the volume of a cone, V = (1/3) * π * r^2 * h, to calculate and return the volume.",
        "new_prompt": "Write a function to find the volume of a cone, identifying the input parameters as the radius r and height h of the cone. Use the formula for the volume of a cone, V = (1/3) * π * r^2 * h, to calculate and return the volume."
    },
    {
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "instruction 1": "Identify the input parameter as an integer n, representing the upper limit for which the highest power of 2 needs to be found.",
        "instruction 2": "Use a loop or bit manipulation to find the highest power of 2 that is less than or equal to n, then return that power.",
        "new_prompt": "Write a python function to find the highest power of 2 that is less than or equal to n, where n is an integer representing the upper limit for which the highest power of 2 needs to be determined. Use a loop or bit manipulation to calculate this highest power of 2 and return the result."
    },
    {
        "task_id": 389,
        "prompt": "Write a function to find the n'th lucas number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the desired Lucas number.",
        "instruction 2": "Implement a recursive function or use an iterative approach to calculate the nth Lucas number, using the base cases L(0) = 2 and L(1) = 1, where L(n) = L(n-1) + L(n-2) for n > 1.",
        "new_prompt": "Write a function to find the n'th lucas number, where the input parameter is an integer n that represents the position of the desired Lucas number. Implement a recursive function or use an iterative approach to calculate the nth Lucas number, utilizing the base cases L(0) = 2 and L(1) = 1, and following the relation L(n) = L(n-1) + L(n-2) for n > 1."
    },
    {
        "task_id": 390,
        "prompt": "Write a function to apply a given format string to all of the elements in a list.",
        "instruction 1": "Identify the input parameters as a list of elements and a format string to apply to each element.",
        "instruction 2": "Use a list comprehension to iterate over the list, applying the format string to each element, and return the new list with formatted elements.",
        "new_prompt": "Write a function to apply a given format string to all of the elements in a list. The function should take two input parameters: a list of elements and a format string to be applied to each element. Utilize a list comprehension to iterate over the list, applying the format string to each element, and return the new list containing the formatted elements."
    },
    {
        "task_id": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "instruction 1": "Identify the input parameters as multiple lists, where each list contains key-value pairs, and determine the appropriate structure for the nested dictionary.",
        "instruction 2": "Use a loop to iterate through the lists, adding each key-value pair to the corresponding level of the nested dictionary, and return the completed nested dictionary.",
        "new_prompt": "Write a function to convert more than one list to a nested dictionary. Identify the input parameters as multiple lists, where each list contains key-value pairs, and determine the appropriate structure for the nested dictionary. Use a loop to iterate through the lists, adding each key-value pair to the corresponding level of the nested dictionary, and return the completed nested dictionary."
    },
    {
        "task_id": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "instruction 1": "Identify the input parameter as an integer n, which represents the input for the function f(n).",
        "instruction 2": "Implement a recursive function that calculates f(n) by comparing the sum of f(n/2), f(n/3), f(n/4), and f(n/5) with n, using memoization to optimize repeated calculations.",
        "new_prompt": "```python\n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). The function should take an integer n as input, which represents the input for f(n). Implement a recursive function that calculates f(n) by comparing the sum of f(n/2), f(n/3), f(n/4), and f(n/5) with n, utilizing memoization to enhance efficiency in handling repeated calculations.\n```"
    },
    {
        "task_id": 394,
        "prompt": "Write a function to check if given tuple contains no duplicates.",
        "instruction 1": "Identify the input parameter as a tuple that needs to be checked for duplicates.",
        "instruction 2": "Use a set to determine if the length of the tuple is equal to the length of the set created from the tuple, as this will indicate the presence of duplicates.",
        "new_prompt": "Write a function to check if a given tuple, identified as the input parameter, contains no duplicates. Utilize a set to verify whether the length of the tuple matches the length of the set derived from it, as this will signify the absence of duplicates."
    },
    {
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.",
        "instruction 1": "Identify the input parameter as a string from which to find the first non-repeated character.",
        "instruction 2": "Utilize a dictionary to count the occurrences of each character in the string, then iterate through the string a second time to return the first character that has a count of one.",
        "new_prompt": "Write a python function to find the first non-repeated character in a given string. The input parameter should be identified as a string from which the first non-repeated character will be extracted. Use a dictionary to count the occurrences of each character in this string, and then iterate through the string again to return the first character that has a count of one."
    },
    {
        "task_id": 397,
        "prompt": "Write a function to find the median of three numbers.",
        "instruction 1": "Identify the input parameters as three distinct numbers whose median needs to be calculated.",
        "instruction 2": "Use sorting to arrange the three numbers in ascending order and return the second number in the sorted list as the median.",
        "new_prompt": "Write a function to find the median of three distinct numbers. Identify the input parameters as the three numbers whose median needs to be calculated. Use sorting to arrange the three numbers in ascending order and return the second number in the sorted list as the median."
    },
    {
        "task_id": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "instruction 1": "Identify the input parameter as a list of integers that contains the numbers for which the sum of digits needs to be computed.",
        "instruction 2": "Iterate through each number in the list, convert each number to a string to extract its digits, convert the digits back to integers, and return the sum of those integers for each number.",
        "new_prompt": "Write a function to compute the sum of digits of each number of a given list. Identify the input parameter as a list of integers that contains the numbers for which the sum of digits needs to be computed. Iterate through each number in the list, convert each number to a string to extract its digits, convert the digits back to integers, and return the sum of those integers for each number."
    },
    {
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.",
        "instruction 1": "Identify the input parameters as two numbers that need to be compared.",
        "instruction 2": "Use Python's built-in `min()` function to return the smaller of the two input numbers.",
        "new_prompt": "Write a python function to find the minimum of two numbers, identified as the input parameters that need to be compared, using Python's built-in `min()` function to return the smaller of the two input numbers."
    },
    {
        "task_id": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "instruction 1": "Identify the input parameters as a tuple and the element to check for existence within that tuple.",
        "instruction 2": "Use the 'in' keyword to check if the specified element is present in the tuple and return a boolean value.",
        "new_prompt": "Write a function to check whether a specified element exists within an input tuple. Use the 'in' keyword to determine if the element is present in the tuple and return a boolean value."
    },
    {
        "task_id": 406,
        "prompt": "Write a python function to find whether the parity of a given number is odd.",
        "instruction 1": "Identify the input parameter as an integer number whose parity needs to be checked.",
        "instruction 2": "Use the modulo operator to determine if the number is odd by checking if the remainder when divided by 2 is not equal to 0, then return the result.",
        "new_prompt": "Write a python function to find whether the parity of a given integer number is odd by using the modulo operator to check if the remainder, when divided by 2, is not equal to 0, and then return the result."
    },
    {
        "task_id": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "instruction 1": "Identify the input parameter as a list of tuples, each containing two numeric elements, and initialize a variable to store the minimum product found.",
        "instruction 2": "Use a loop to iterate through each tuple in the list, calculate the product of the two elements in the tuple, compare it with the current minimum product, and update the minimum product if the new product is smaller, then return the minimum product.",
        "new_prompt": "Write a function to find the minimum product from the pairs of tuples within a given list. # The input parameter should be specified as a list of tuples, with each tuple containing two numeric elements. Initialize a variable to keep track of the minimum product found. Iterate through each tuple in the list using a loop; for each tuple, calculate the product of its two elements, compare it to the current minimum product, and update the minimum product if the newly calculated product is smaller. Finally, return the minimum product."
    },
    {
        "task_id": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "instruction 1": "Identify the input parameter as a heterogeneous list that may contain different data types including numbers and handle comparisons appropriately.",
        "instruction 2": "Use a loop to iterate through the list, check for numeric values, and track the minimum value found, then return that minimum value.",
        "new_prompt": "Write a function to find the minimum value in a given heterogeneous list. The input parameter should be identified as a heterogeneous list that may include various data types, including numbers, and it is important to handle comparisons appropriately. Utilize a loop to iterate through the list, checking for numeric values while keeping track of the minimum value found, and then return that minimum value."
    },
    {
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers from which odd numbers need to be removed.",
        "instruction 2": "Use a list comprehension to filter out odd numbers and return a new list containing only the even numbers.",
        "new_prompt": "Write a python function that takes a list of numbers as an input parameter and removes odd numbers from it. Use a list comprehension to filter out the odd numbers and return a new list containing only the even numbers."
    },
    {
        "task_id": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "instruction 1": "Identify the input parameters as a list of tuples and an integer n that specifies the index of the element to extract from each tuple.",
        "instruction 2": "Use a list comprehension to iterate through the list of tuples and return a new list containing the nth element from each tuple.",
        "new_prompt": "Write a function to extract the nth element from a given list of tuples. # The function should take as input a list of tuples and an integer n, indicating the index of the element to extract from each tuple. Employ a list comprehension to iterate through the list of tuples and return a new list consisting of the nth element from each tuple."
    },
    {
        "task_id": 414,
        "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "instruction 1": "Identify the input parameters as two sequences (e.g., lists or sets) to check for common values.",
        "instruction 2": "Use Python's built-in set operations to determine if there are any shared elements between the two sequences and return a boolean value indicating the result.",
        "new_prompt": "Write a python function to check whether any value in one sequence exists in another sequence or not. Identify the input parameters as two sequences (e.g., lists or sets) to check for common values. Use Python's built-in set operations to determine if there are any shared elements between the two sequences and return a boolean value indicating the result."
    },
    {
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "instruction 1": "Identify the input parameter as an array of integers and check whether the array has at least two elements for pairing.",
        "instruction 2": "Sort the array, then calculate the product of the two largest integers and the product of the two smallest integers, and return the maximum of the two products.",
        "new_prompt": "Write a python function to find a pair with the highest product from a given array of integers. Ensure that the input parameter is an array of integers and verify that the array contains at least two elements for pairing. Sort the array, then calculate the product of the two largest integers and the product of the two smallest integers, returning the maximum of the two products."
    },
    {
        "task_id": 418,
        "prompt": "Write a python function to find the element of a list having maximum length.",
        "instruction 1": "Identify the input parameter as a list of strings and initialize a variable to track the longest string found.",
        "instruction 2": "Iterate through the list, comparing the length of each string to the current longest string, and update the longest string variable accordingly, then return the longest string.",
        "new_prompt": "Write a python function to find the element of a list having maximum length. The input parameter should be recognized as a list of strings, and a variable must be initialized to track the longest string found. In the function, iterate through the list, comparing the length of each string to the current longest string, updating the longest string variable as needed, and finally return the longest string."
    },
    {
        "task_id": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize a variable to store the rounded numbers.",
        "instruction 2": "Use a loop to round each number in the list, calculate the sum of the rounded numbers, and then multiply that sum by the length of the list before printing the result.",
        "new_prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. Identify the input parameter as a list of numbers and initialize a variable to store the rounded numbers. Use a loop to round each number in the list, calculate the sum of the rounded numbers, and then multiply that sum by the length of the list before printing the result."
    },
    {
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of even natural numbers to consider.",
        "instruction 2": "Use a loop to calculate the sum of the cubes of the first n even natural numbers, which can be generated by the formula 2*i for i in the range from 1 to n, then return the calculated sum.",
        "new_prompt": "Write a python function to find the cube sum of the first n even natural numbers. The input parameter should be an integer n that represents the number of even natural numbers to consider. Use a loop to calculate the sum of the cubes of the first n even natural numbers, generated by the formula 2*i for i in the range from 1 to n, and then return the calculated sum."
    },
    {
        "task_id": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "instruction 1": "Identify the input parameters as a tuple of elements and a string delimiter that will be used for concatenation.",
        "instruction 2": "Use the `join()` method on the delimiter to concatenate the elements of the tuple into a single string with the delimiter separating each element.",
        "new_prompt": "Write a function to concatenate each element of a tuple, which serves as the input parameter, by using a specified string delimiter for the concatenation. Utilize the `join()` method on the delimiter to combine the elements of the tuple into a single string, ensuring that the delimiter separates each element."
    },
    {
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n representing the first n natural numbers.",
        "instruction 2": "Use the formula for the average of cubes, which is (n^2 * (n + 1)^2) / 4, and return the computed average.",
        "new_prompt": "Write a python function to find the average of cubes of first n natural numbers. The function should take an integer parameter n, which represents the first n natural numbers. Utilize the formula for the average of cubes, given by (n^2 * (n + 1)^2) / 4, and return the computed average."
    },
    {
        "task_id": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "instruction 1": "Identify the input parameter as a tuple of strings and create an empty list to store the last characters.",
        "instruction 2": "Loop through each string in the tuple, extract the last character using indexing, and append it to the list, then return the list of collected last characters.",
        "new_prompt": "Write a function to extract only the rear index element of each string in the given tuple. The input parameter should be identified as a tuple of strings, and an empty list must be created to store the last characters. Then, loop through each string in the tuple, extract the last character using indexing, and append it to the list. Finally, return the list of collected last characters."
    },
    {
        "task_id": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "instruction 1": "Identify the input parameters as a list of sublists and the specific element to search for within those sublists.",
        "instruction 2": "Iterate through each sublist, check for the presence of the specified element, and maintain a count of how many sublists contain that element, then return the count.",
        "new_prompt": "Write a function to count the number of sublists containing a particular element. The input parameters should be defined as a list of sublists and the specific element to search for within those sublists. The function must iterate through each sublist, check for the presence of the specified element, maintain a count of how many sublists contain that element, and then return the count."
    },
    {
        "task_id": 426,
        "prompt": "Write a function to filter odd numbers.",
        "instruction 1": "Identify the input parameter as a list of numbers that needs to be filtered.",
        "instruction 2": "Use a list comprehension to create a new list containing only the odd numbers from the input list, and return this new list.",
        "new_prompt": "Write a function that takes a list of numbers as an input parameter and filters out the odd numbers using a list comprehension, returning a new list that contains only the odd numbers from the input list."
    },
    {
        "task_id": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "instruction 1": "Identify the input parameter as a string representing the date in 'yyyy-mm-dd' format.",
        "instruction 2": "Split the input string by the '-' character to extract the year, month, and day, then format and return the date as 'dd-mm-yyyy'.",
        "new_prompt": "Write a function to convert a date from 'yyyy-mm-dd' format to 'dd-mm-yyyy' format. Ensure to identify the input parameter as a string representing the date in 'yyyy-mm-dd' format. The function should split the input string by the '-' character to extract the year, month, and day, then format and return the date as 'dd-mm-yyyy'."
    },
    {
        "task_id": 428,
        "prompt": "Write a function to sort the given array by using shell sort.",
        "instruction 1": "Identify the input parameter as an array of numbers that needs to be sorted using shell sort algorithm.",
        "instruction 2": "Implement the shell sort algorithm by defining a gap and using insertion sort on subarrays defined by the gap, then progressively reduce the gap until it becomes zero.",
        "new_prompt": "Write a function to sort the given array of numbers by using the shell sort algorithm. The function should define a gap and apply insertion sort on subarrays based on that gap, progressively reducing the gap until it reaches zero."
    },
    {
        "task_id": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "instruction 1": "Identify the input parameters as two tuples from which you need to extract the corresponding elements and their positional tuples.",
        "instruction 2": "Use a loop to iterate through the range of the length of the tuples, and for each index, collect the elements and their positions in a new list or structure representing elementwise pairs.",
        "new_prompt": "Write a function to extract the elementwise pairs and their positional tuples from the given two tuples. Identify the input parameters as the two tuples from which you need to extract the corresponding elements and their positional tuples. Use a loop to iterate through the range of the length of the tuples, and for each index, collect the elements and their positions in a new list or structure representing elementwise pairs."
    },
    {
        "task_id": 430,
        "prompt": "Write a function to find the directrix of a parabola.",
        "instruction 1": "Identify the input parameter as a tuple or list containing the coefficients of the parabola, typically in the form (a, b, c) for the equation y = ax^2 + bx + c.",
        "instruction 2": "Calculate the directrix using the formula y = (1 - (b^2 - 4ac)/(4a)) for a vertical parabola, and return the value of the directrix.",
        "new_prompt": "Write a function to find the directrix of a parabola, where the input parameter should be identified as a tuple or list containing the coefficients of the parabola, typically in the form (a, b, c) for the equation y = ax^2 + bx + c. The directrix can be calculated using the formula y = (1 - (b^2 - 4ac)/(4a)) for a vertical parabola, and the function should return the value of the directrix."
    },
    {
        "task_id": 432,
        "prompt": "Write a function to find the median length of a trapezium.",
        "instruction 1": "Identify the input parameters as the lengths of the two parallel sides of the trapezium and the height.",
        "instruction 2": "Calculate the median length using the formula (base1 + base2) / 2 and return the result.",
        "new_prompt": "Write a function to find the median length of a trapezium, where the input parameters are the lengths of the two parallel sides of the trapezium and the height. Calculate the median length using the formula (base1 + base2) / 2 and return the result."
    },
    {
        "task_id": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "instruction 1": "Identify the input parameters as an integer number to check and an array of numbers to compare against.",
        "instruction 2": "Use a loop or a list comprehension to compare the number against each element in the array, returning True if the number is greater than all elements, otherwise return False.",
        "new_prompt": "Write a function to check whether the entered number is greater than the elements of the given array. Ensure to identify the input parameters as an integer number to check and an array of numbers to compare against. Utilize a loop or a list comprehension to compare the number against each element in the array, returning True if the number is greater than all elements; otherwise, return False."
    },
    {
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.",
        "instruction 1": "Identify the input parameter as an integer number for which the last digit needs to be found.",
        "instruction 2": "Use the modulus operator (%) to calculate and return the last digit of the given number by performing the operation number % 10.",
        "new_prompt": "Write a python function to find the last digit of a given integer number. Identify the input parameter as an integer for which the last digit needs to be found. Use the modulus operator (%) to calculate and return the last digit by performing the operation number % 10."
    },
    {
        "task_id": 436,
        "prompt": "Write a python function to return the negative numbers in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers from which negative numbers need to be extracted.",
        "instruction 2": "Use a list comprehension to iterate through the input list and filter out the negative numbers, then return the new list containing only the negative values.",
        "new_prompt": "Write a python function to return the negative numbers in a list. # Identify the input parameter as a list of numbers from which negative numbers need to be extracted. # Use a list comprehension to iterate through the input list and filter out the negative numbers, then return the new list containing only the negative values."
    },
    {
        "task_id": 437,
        "prompt": "Write a function to remove odd characters in a string.",
        "instruction 1": "Identify the input parameter as a string from which odd-indexed characters need to be removed.",
        "instruction 2": "Use Python's string slicing to create a new string containing only the characters at even indices and return this new string.",
        "new_prompt": "Write a function to remove odd characters in a string. Identify the input parameter as a string from which odd-indexed characters need to be removed. Use Python's string slicing to create a new string containing only the characters at even indices and return this new string."
    },
    {
        "task_id": 439,
        "prompt": "Write a function to join a list of multiple integers into a single integer.",
        "instruction 1": "Identify the input parameter as a list of integers that need to be joined into a single integer.",
        "instruction 2": "Convert each integer in the list to a string, concatenate them together, and then convert the resulting string back to an integer before returning it.",
        "new_prompt": "Write a function to join a list of integers, identified as the input parameter, into a single integer. Convert each integer in the list to a string, concatenate them, and then convert the resulting string back to an integer before returning it."
    },
    {
        "task_id": 440,
        "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
        "instruction 1": "Identify the input parameter as a string representing the sentence, and define a list of common adverbs to check against the words in the sentence.",
        "instruction 2": "Split the sentence into words, iterate through the list, find the first adverb, and store its position, then return the adverb and its position as a tuple.",
        "new_prompt": "Write a function to find the first adverb and their positions in a given sentence. The function should take a string as an input parameter, which represents the sentence. Additionally, define a list of common adverbs to use for comparison against the words in the sentence. The function must split the sentence into individual words, iterate through the list to identify the first adverb found, and store its position. Finally, return the identified adverb along with its position as a tuple."
    },
    {
        "task_id": 441,
        "prompt": "Write a function to find the surface area of a cube of a given size.",
        "instruction 1": "Identify the input parameter as a single integer or float representing the length of the side of the cube.",
        "instruction 2": "Calculate the surface area using the formula 6 * side_length ** 2, and return the result.",
        "new_prompt": "Write a function to find the surface area of a cube of a given size, where the input parameter is a single integer or float representing the length of the side of the cube. Calculate the surface area using the formula 6 * side_length ** 2, and return the result."
    },
    {
        "task_id": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "instruction 1": "Identify the input parameters as two tuples containing numeric elements that need to be multiplied together index-wise.",
        "instruction 2": "Use a tuple comprehension to multiply the elements at corresponding indices of the two tuples and return the resulting tuple.",
        "new_prompt": "Write a function to perform index-wise multiplication of tuple elements in the given two tuples. Identify the input parameters as two tuples containing numeric elements that need to be multiplied together index-wise. Use a tuple comprehension to multiply the elements at corresponding indices of the two tuples and return the resulting tuple."
    },
    {
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "instruction 1": "Identify the input parameters as a list and a tuple, where you will count the occurrences of each element from the list in the tuple.",
        "instruction 2": "Use a loop to iterate over the list, and for each element, use the `count()` method of the tuple to count its occurrences, storing the results in a dictionary or similar structure.",
        "new_prompt": "Write a python function to count the occurrence of all elements of a list in a tuple, taking the list and the tuple as input parameters. Use a loop to iterate over the list, and for each element, apply the `count()` method of the tuple to determine its occurrences, storing the results in a dictionary or a similar structure."
    },
    {
        "task_id": 447,
        "prompt": "Write a function to find cubes of individual elements in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers.",
        "instruction 2": "Use a list comprehension to iterate through the list and compute the cube of each element, returning the new list of cubes.",
        "new_prompt": "Write a function to find cubes of individual elements in a list of numbers. Use a list comprehension to iterate through the list and compute the cube of each element, returning the new list of cubes."
    },
    {
        "task_id": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "instruction 1": "Identify the input parameter as an integer n representing the number of Perrin numbers to sum.",
        "instruction 2": "Define the Perrin sequence with the first three numbers as 3, 0, 2 and use a loop to generate the series up to the nth term, then return the sum of these generated Perrin numbers.",
        "new_prompt": "Write a function to calculate the sum of Perrin numbers, where the input parameter is an integer n representing the number of Perrin numbers to sum. Define the Perrin sequence with the first three numbers as 3, 0, 2, and use a loop to generate the series up to the nth term, then return the sum of these generated Perrin numbers."
    },
    {
        "task_id": 450,
        "prompt": "Write a function to extract specified size of strings from a given list of string values.",
        "instruction 1": "Identify the input parameters as a list of string values and an integer specifying the required size of strings to extract.",
        "instruction 2": "Use a list comprehension to filter and collect strings from the input list that match the specified size, then return the resulting list of strings.",
        "new_prompt": "Write a function to extract specified size of strings from a given list of string values. The function should take as input a list of string values and an integer that indicates the required size of strings to extract. Utilize a list comprehension to filter and gather strings from the input list that correspond to the specified size, and then return the resulting list of strings."
    },
    {
        "task_id": 451,
        "prompt": "Write a function to remove all whitespaces from the given string.",
        "instruction 1": "Identify the input parameter as a string from which whitespaces need to be removed.",
        "instruction 2": "Use the `replace()` method or `join()` with `split()` to eliminate all whitespace characters from the string and return the modified string.",
        "new_prompt": "Write a function to remove all whitespaces from the given string. Identify the input parameter as the string from which whitespaces need to be eliminated. Use the `replace()` method or `join()` with `split()` to effectively remove all whitespace characters from the string and return the modified version."
    },
    {
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.",
        "instruction 1": "Identify the input parameter as an integer number for which the even factors need to be calculated.",
        "instruction 2": "Iterate through the range of integers from 1 to the number, check if each integer is a factor and even, then accumulate the sum of those factors and return the total sum.",
        "new_prompt": "Write a python function to find the sum of even factors of a number. The function should take an integer input parameter representing the number for which the even factors need to be calculated. It should iterate through the range of integers from 1 to the specified number, check whether each integer is both a factor and even, accumulate the sum of those factors, and return the total sum."
    },
    {
        "task_id": 454,
        "prompt": "Write a function that matches a word containing 'z'.",
        "instruction 1": "Identify the input parameter as a list of words to search for the presence of the letter 'z' in each word.",
        "instruction 2": "Use a list comprehension to filter the words that contain 'z' and return the resulting list of matched words.",
        "new_prompt": "Write a function that matches a word containing 'z', taking a list of words as the input parameter to search for the presence of the letter 'z' in each word. Utilize a list comprehension to filter the words that include 'z' and return the resulting list of matched words."
    },
    {
        "task_id": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "instruction 1": "Identify the input parameter as an integer month number, which should be within the range of 1 to 12.",
        "instruction 2": "Use a conditional statement to check if the month number corresponds to months that contain 31 days (January, March, May, July, August, October, December) and return a boolean value.",
        "new_prompt": "Write a function to check whether the given month number contains 31 days or not. The input parameter should be identified as an integer month number, which must be within the range of 1 to 12. Utilize a conditional statement to determine if the month number aligns with those months that have 31 days (January, March, May, July, August, October, December) and return a boolean value."
    },
    {
        "task_id": 456,
        "prompt": "Write a function to reverse each string in a given list of string values.",
        "instruction 1": "Identify the input parameter as a list of strings that needs to be reversed.",
        "instruction 2": "Use a list comprehension with string slicing to reverse each string in the input list and return a new list containing the reversed strings.",
        "new_prompt": "Write a function to reverse each string in a given list of string values. Identify the input parameter as a list of strings that needs to be reversed, and use a list comprehension with string slicing to reverse each string in the input list, returning a new list containing the reversed strings."
    },
    {
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.",
        "instruction 1": "Identify the input parameter as a list from which to find the sublist with the minimum length, and set an initial minimum length to a large number.",
        "instruction 2": "Iterate through all possible sublists in the given list, check their lengths, and update the minimum length and corresponding sublist whenever a smaller length is found, then return the sublist with the minimum length.",
        "new_prompt": "Write a python function to find the sublist having minimum length. The function should accept a list as an input parameter to identify the sublist, and it should initialize a minimum length variable that starts as a large number. The function will then iterate through all possible sublists in the provided list, checking their lengths and updating both the minimum length and the corresponding sublist whenever a shorter length is found. Finally, it will return the sublist with the minimum length."
    },
    {
        "task_id": 458,
        "prompt": "Write a function to find the area of a rectangle.",
        "instruction 1": "Identify the input parameters as the length and width of the rectangle, both of which should be positive numbers.",
        "instruction 2": "Calculate the area by multiplying the length by the width, and return the resulting value.",
        "new_prompt": "Write a function to find the area of a rectangle. The input parameters should be the length and width of the rectangle, ensuring that both are positive numbers. Calculate the area by multiplying the length by the width, and return the resulting value."
    },
    {
        "task_id": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string.",
        "instruction 1": "Identify the input parameter as a string from which uppercase substrings need to be removed.",
        "instruction 2": "Use a regular expression to find all uppercase substrings in the input string and replace them with an empty string, then return the modified string.",
        "new_prompt": "Write a function to remove uppercase substrings from a given string, identifying the input parameter as the string from which uppercase substrings need to be eliminated. Utilize a regular expression to locate all uppercase substrings in the input string, replace them with an empty string, and then return the modified string."
    },
    {
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.",
        "instruction 1": "Identify the input parameter as a list of sublists from which the first element of each sublist will be extracted.",
        "instruction 2": "Use a list comprehension to iterate through each sublist and retrieve the first element, then return the resulting list of first elements.",
        "new_prompt": "Write a python function to get the first element of each sublist, where the input parameter is a list of sublists from which the first element of each sublist will be extracted. Use a list comprehension to iterate through each sublist, retrieve the first element, and return the resulting list of first elements."
    },
    {
        "task_id": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "instruction 1": "Identify the input parameter as a list of elements and prepare to store the combinations.",
        "instruction 2": "Use Python's itertools library to generate all possible combinations of the list elements of varying lengths and return the result.",
        "new_prompt": "Write a function to find all possible combinations of the elements of a given list. # Identify the input parameter as a list of elements and prepare to store the combinations. Use Python's itertools library to generate all possible combinations of the list elements of varying lengths and return the result."
    },
    {
        "task_id": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "instruction 1": "Identify the input parameter as an array of integers and initialize variables to keep track of the maximum product found so far and the current product as you iterate through the array.",
        "instruction 2": "Use a loop to iterate through the array, updating the current product by multiplying the current element, and keep track of the maximum product by comparing it with the current product and resetting when the current product becomes zero.",
        "new_prompt": "Write a function to find the maximum product subarray of the given array. Identify the input parameter as an array of integers and initialize variables to maintain the maximum product found so far as well as the current product while you iterate through the array. Use a loop to traverse the array, updating the current product by multiplying it with the current element, and track the maximum product by comparing it with the current product, resetting it when the current product becomes zero."
    },
    {
        "task_id": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "instruction 1": "Identify the input parameter as a dictionary from which empty items need to be removed.",
        "instruction 2": "Use a dictionary comprehension to iterate over the items in the dictionary and create a new dictionary that only includes items with non-empty values.",
        "new_prompt": "Write a function that takes a dictionary as an input parameter and removes any empty items from it. Utilize a dictionary comprehension to iterate over the entries in the dictionary, constructing a new dictionary that exclusively contains items with non-empty values."
    },
    {
        "task_id": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize a variable to keep track of the maximum product found among increasing subsequences.",
        "instruction 2": "Implement a nested loop to check for increasing subsequences, calculate their products, and update the maximum product variable accordingly before returning it.",
        "new_prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. The input parameter should be identified as a list of integers, and a variable must be initialized to track the maximum product found among the increasing subsequences. Implement a nested loop to examine the increasing subsequences, calculate their products, and update the maximum product variable as needed before returning it."
    },
    {
        "task_id": 470,
        "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "instruction 1": "Identify the input parameter as a tuple containing numerical elements.",
        "instruction 2": "Iterate through the tuple, adding each element to its neighbor to create a new tuple of the pairwise sums and return this new tuple.",
        "new_prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple, which should be identified as a tuple containing numerical elements. Iterate through the tuple, adding each element to its neighbor to create a new tuple of the pairwise sums and return this new tuple."
    },
    {
        "task_id": 471,
        "prompt": "Write a python function to find the product of the array multiplication modulo n.",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer n to perform the multiplication modulo operation.",
        "instruction 2": "Use a loop to iterate through the list, calculate the product of the elements, and take modulo n at each step to prevent overflow, then return the final result.",
        "new_prompt": "Write a python function to find the product of the array multiplication modulo n. The function should take as input a list of numbers and an integer n to perform the multiplication modulo operation. Utilize a loop to iterate through the list, calculate the product of the elements, and apply modulo n at each step to avoid overflow, then return the final result."
    },
    {
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "instruction 1": "Identify the input parameter as a list of integers and ensure it is converted to a set to remove duplicates.",
        "instruction 2": "Sort the unique integers and check if the difference between the maximum and minimum values plus one equals the length of the set, returning True if they match or False otherwise.",
        "new_prompt": "Write a python function to check whether the given list contains consecutive numbers or not. The input parameter should be identified as a list of integers, which must be converted to a set to eliminate any duplicates. Additionally, sort the unique integers and verify if the difference between the maximum and minimum values plus one equals the length of the set, returning True if they match or False otherwise."
    },
    {
        "task_id": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "instruction 1": "Identify the input parameter as a list of tuples and use a set to store the elements of the first tuple as the initial intersection.",
        "instruction 2": "Iterate through the remaining tuples, updating the intersection set with the common elements found in each tuple, then return the resulting tuple from the intersection set.",
        "new_prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. The input parameter should be identified as a list of tuples, and a set must be used to store the elements of the first tuple as the initial intersection. Then, iterate through the remaining tuples, updating the intersection set with the common elements found in each tuple, and finally return the resulting tuple from the intersection set."
    },
    {
        "task_id": 474,
        "prompt": "Write a function to replace characters in a string.",
        "instruction 1": "Identify the input parameters as a string to be modified and a dictionary containing characters to be replaced as keys and their replacement characters as values.",
        "instruction 2": "Iterate over the dictionary and use Python's string `replace()` method to substitute the specified characters in the string, then return the modified string.",
        "new_prompt": "Write a function to replace characters in a string. # The function should take two input parameters: a string to be modified and a dictionary where the keys are the characters to be replaced and the values are the corresponding replacement characters. # It should iterate over the dictionary and utilize Python's string `replace()` method to replace the specified characters in the string, and then return the modified string."
    },
    {
        "task_id": 475,
        "prompt": "Write a function to sort a dictionary by value.",
        "instruction 1": "Identify the input parameter as a dictionary where the keys are associated with values that need to be sorted.",
        "instruction 2": "Use the `sorted()` function along with a lambda function to sort the dictionary items by their values, then return a new dictionary constructed from the sorted items.",
        "new_prompt": "Write a function to sort a dictionary by value, identifying the input parameter as a dictionary where the keys are associated with values that need to be sorted. Use the `sorted()` function along with a lambda function to sort the dictionary items by their values, then return a new dictionary constructed from the sorted items."
    },
    {
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "instruction 1": "Identify the input parameter as an array of numbers from which to find the largest and smallest values.",
        "instruction 2": "Use the `max()` and `min()` functions to determine the largest and smallest values in the array, then return their sum.",
        "new_prompt": "Write a python function that takes an array of numbers as an input parameter and finds the sum of the largest and smallest value within that array. To achieve this, utilize the `max()` and `min()` functions to identify the largest and smallest values, and then return their sum."
    },
    {
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.",
        "instruction 1": "Identify the input parameter as a string that needs to be converted to lower case.",
        "instruction 2": "Use Python's built-in string method `lower()` to convert the input string to lower case and return the result.",
        "new_prompt": "Write a python function to convert the given string to lower case. Identify the input parameter as a string that requires conversion to lower case. Utilize Python's built-in string method `lower()` to perform the conversion and return the result."
    },
    {
        "task_id": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "instruction 1": "Identify the input parameter as a string from which lowercase substrings need to be removed.",
        "instruction 2": "Use Python's string methods or regular expressions to find and remove all substrings that consist of only lowercase letters, then return the modified string.",
        "new_prompt": "Write a function to remove lowercase substrings from a given string, identifying the input parameter as a string from which these substrings need to be eliminated. Utilize Python's string methods or regular expressions to locate and remove all substrings comprising solely of lowercase letters, and then return the modified string."
    },
    {
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.",
        "instruction 1": "Identify the input parameter as an integer or string representation of the number from which to find the first digit.",
        "instruction 2": "Convert the number to a string if it isn't already, access the first character of the string, and convert it back to an integer to return as the first digit.",
        "new_prompt": "Write a python function to find the first digit of a given number. The function should identify the input parameter as either an integer or a string representation of the number from which to extract the first digit. If the input is not already a string, convert it to a string, then access the first character of that string and convert it back to an integer to return as the first digit."
    },
    {
        "task_id": 554,
        "prompt": "Write a python function which takes a list of integers and only returns the odd ones.",
        "instruction 1": "Identify the input parameter as a list of integers.",
        "instruction 2": "Use a list comprehension to filter and return only the odd integers from the input list.",
        "new_prompt": "Write a python function which takes a parameter identified as a list of integers and uses a list comprehension to filter and return only the odd ones."
    },
    {
        "task_id": 555,
        "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the number of natural numbers to consider for the calculations.",
        "instruction 2": "Calculate the sum of the first n natural numbers using the formula n(n + 1) / 2, compute the sum of cubes using the formula (n(n + 1) / 2)^2, and return the difference between the two results.",
        "new_prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers. The input parameter should be an integer n that represents the number of natural numbers to consider for the calculations. To perform the calculations, calculate the sum of the first n natural numbers using the formula n(n + 1) / 2, compute the sum of cubes using the formula (n(n + 1) / 2)^2, and return the difference between the two results."
    },
    {
        "task_id": 556,
        "prompt": "Write a python function to count the number of pairs whose xor value is odd.",
        "instruction 1": "Identify the input parameter as a list of integers to evaluate for pairs whose xor value is odd.",
        "instruction 2": "Iterate through the list to count pairs where one number is even and the other is odd, since only such pairs will have an odd xor value.",
        "new_prompt": "Write a python function to count the number of pairs whose xor value is odd. The function should take a list of integers as an input parameter and iterate through this list to count pairs where one number is even and the other is odd, as only such pairs will produce an odd xor value."
    },
    {
        "task_id": 557,
        "prompt": "Write a function to toggle the case of all characters in a string.",
        "instruction 1": "Identify the input parameter as a string, which contains the characters whose case needs to be toggled.",
        "instruction 2": "Use Python's string method `.swapcase()` to toggle the case of all characters in the string and return the modified string.",
        "new_prompt": "Write a function that takes a string as an input parameter, which consists of the characters whose case needs to be toggled, and utilizes Python's string method `.swapcase()` to toggle the case of all characters in the string before returning the modified string."
    },
    {
        "task_id": 558,
        "prompt": "Write a python function to find the sum of the per-digit difference between two integers.",
        "instruction 1": "Identify the input parameters as two integers and convert them to strings to allow for per-digit comparison.",
        "instruction 2": "Iterate through the digits of both integers, calculate the absolute difference for each corresponding digit, and return the sum of these differences.",
        "new_prompt": "Write a python function to find the sum of the per-digit difference between two integers. Identify the input parameters as two integers, converting them to strings for per-digit comparison. Then, iterate through the digits of both integers, calculating the absolute difference for each corresponding digit, and return the sum of these differences."
    },
    {
        "task_id": 559,
        "prompt": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize a variable to keep track of the maximum sum found.",
        "instruction 2": "Use a loop to implement Kadane's algorithm to find the largest sum of contiguous sublists by iterating through the list and updating the current sum and maximum sum as needed.",
        "new_prompt": "Write a function to find the sum of the largest contiguous sublist in the given list of integers. Begin by initializing a variable to track the maximum sum found. Then, use a loop to implement Kadane's algorithm, iterating through the list to update both the current sum and the maximum sum as necessary."
    },
    {
        "task_id": 560,
        "prompt": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "instruction 1": "Identify the input parameters as two tuples from which the union of elements is to be found.",
        "instruction 2": "Convert the tuples to a set to eliminate duplicates, compute the union using the `set.union()` method, and return the sorted list of the union elements using `sorted()`.",
        "new_prompt": "Write a function to find the union of the elements of two given tuples (the input parameters) and output them in sorted order. Convert the tuples to a set to eliminate duplicates, compute the union using the `set.union()` method, and return the sorted list of the union elements using `sorted()`."
    },
    {
        "task_id": 562,
        "prompt": "Write a python function to find the length of the longest sublists.",
        "instruction 1": "Identify the input parameter as a list of lists, and initialize a variable to keep track of the maximum length found.",
        "instruction 2": "Use a loop to iterate through each sublist in the list of lists, compare each sublist's length with the maximum length variable, and update it accordingly before returning the maximum length.",
        "new_prompt": "Write a python function to find the length of the longest sublists. The function should take a list of sublists as an input parameter and initialize a variable to track the maximum length found. Utilize a loop to go through each sublist, comparing its length with the maximum length variable, and update this variable as needed before returning the maximum length."
    },
    {
        "task_id": 563,
        "prompt": "Write a function to extract values between quotation marks from a string.",
        "instruction 1": "Identify the input parameter as a string that contains text with values enclosed in quotation marks.",
        "instruction 2": "Use regular expressions to find all substrings that are encapsulated within quotation marks and return them as a list.",
        "new_prompt": "Write a function to extract values between quotation marks from a string, which is the input parameter containing text with values enclosed in quotation marks. Utilize regular expressions to find all substrings that are encapsulated within the quotation marks and return them as a list."
    },
    {
        "task_id": 564,
        "prompt": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize a count variable to zero.",
        "instruction 2": "Use nested loops to iterate through the list and count all pairs of elements that are unequal, ensuring that each pair is counted only once.",
        "new_prompt": "Write a python function which takes a list of integers as the input parameter and initializes a count variable to zero. Then, use nested loops to iterate through the list and count the number of possible unordered pairs where both elements are unequal, ensuring that each pair is counted only once."
    },
    {
        "task_id": 565,
        "prompt": "Write a python function to split a string into characters.",
        "instruction 1": "Identify the input parameter as a string that needs to be split into its constituent characters.",
        "instruction 2": "Use Python's built-in `list()` function to convert the string into a list of characters and return that list.",
        "new_prompt": "Write a python function to split a string into characters, identifying the input parameter as a string that needs to be split into its constituent characters. Use Python's built-in `list()` function to convert the string into a list of characters and return that list."
    },
    {
        "task_id": 566,
        "prompt": "Write a function to get the sum of the digits of a non-negative integer.",
        "instruction 1": "Identify the input parameter as a non-negative integer and convert it to a string to access each digit.",
        "instruction 2": "Use a loop or a generator expression to iterate over the string representation of the integer, convert each character back to an integer, and return the sum of these integers.",
        "new_prompt": "Write a function to get the sum of the digits of a non-negative integer. Identify the input parameter as a non-negative integer and convert it to a string to access each digit. Use a loop or a generator expression to iterate over the string representation of the integer, convert each character back to an integer, and return the sum of these integers."
    },
    {
        "task_id": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.",
        "instruction 1": "Identify the input parameter as a list that needs to be checked for sorting order.",
        "instruction 2": "Use a comparison method to check if the list is equal to its sorted version, and return True if it is sorted and False otherwise.",
        "new_prompt": "Write a function to check whether a specified list, identified as the input parameter, is sorted or not by using a comparison method that determines if the list is equal to its sorted version; return True if the list is sorted and False otherwise."
    },
    {
        "task_id": 568,
        "prompt": "Write a function to create a list of N empty dictionaries.",
        "instruction 1": "Identify the input parameter as an integer N that represents the number of empty dictionaries to create.",
        "instruction 2": "Use a list comprehension to generate a list containing N empty dictionaries and return this list.",
        "new_prompt": "Write a function to create a list of N empty dictionaries, where N is an integer input parameter that specifies the number of empty dictionaries to generate. Utilize a list comprehension to construct and return the list of N empty dictionaries."
    },
    {
        "task_id": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
        "instruction 1": "Identify the input parameter as a list of lists, where each sublist contains strings that need to be sorted.",
        "instruction 2": "Use a list comprehension to iterate through each sublist and apply Python's `sorted()` function to sort the strings in each sublist, then return the updated list of lists.",
        "new_prompt": "Write a function to sort each sublist of strings in a given list of lists, where the input parameter is a list of lists that contains sublists of strings requiring sorting. Utilize a list comprehension to iterate through each sublist and employ Python's `sorted()` function to sort the strings in each sublist, then return the updated list of lists."
    },
    {
        "task_id": 572,
        "prompt": "Write a python function to remove duplicate numbers from a given number of lists.",
        "instruction 1": "Identify the input parameter as a list of lists containing numbers, and initialize an empty list to store the result without duplicates.",
        "instruction 2": "Iterate through each sublist, convert it to a set to remove duplicates, and append the resulting list of unique numbers to the result list.",
        "new_prompt": "Write a python function to remove duplicate numbers from a given list of lists containing numbers. Initialize an empty list to store the result without duplicates. Iterate through each sublist, convert it to a set to eliminate duplicates, and append the resulting list of unique numbers to the result list."
    },
    {
        "task_id": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers in a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers and use a set to filter out the unique numbers from this list.",
        "instruction 2": "Use Python's `math.prod()` function or a loop to calculate the product of the unique numbers and return the result.",
        "new_prompt": "Write a python function to calculate the product of the unique numbers in a given list. The input parameter should be identified as a list of numbers, and a set must be used to filter out the unique numbers from this list. To calculate the product of these unique numbers, utilize Python's `math.prod()` function or implement a loop, and return the result."
    },
    {
        "task_id": 576,
        "prompt": "Write a python function to check whether a list is sublist of another or not.",
        "instruction 1": "Identify the input parameters as two lists, the first to be checked as a sublist and the second as the main list.",
        "instruction 2": "Use Python's list slicing and comparison to determine if the first list exists within the second list, returning a boolean value accordingly.",
        "new_prompt": "Write a python function to check whether a list is a sublist of another or not. The function should accept two input parameters: the first list to be checked as a sublist and the second list as the main list. Utilize Python's list slicing and comparison techniques to ascertain if the first list is contained within the second list, returning a boolean value based on the result."
    },
    {
        "task_id": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.",
        "instruction 1": "Identify the input parameter as an integer n for which the factorial will be calculated.",
        "instruction 2": "Use a mathematical approach to compute the last non-zero digit of n! by accounting for factors of 2 and 5, and return that digit.",
        "new_prompt": "Write a python function to find the last digit in factorial of a given number. The function should take an integer parameter n for which the factorial will be calculated. Utilize a mathematical approach to determine the last non-zero digit of n! by considering the factors of 2 and 5, and return that digit."
    },
    {
        "task_id": 578,
        "prompt": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "instruction 1": "Identify the input parameters as three lists of equal length that need to be interleaved.",
        "instruction 2": "Use a loop to iterate through the indices of the lists and append elements from each list in alternating order to a new flat list, then return the resulting list.",
        "new_prompt": "Write a function to interleave 3 lists of the same length into a single flat list. The input parameters should be identified as three lists of equal length that need to be interleaved. Utilize a loop to iterate through the indices of the lists and append elements from each list in alternating order to create a new flat list, which should then be returned."
    },
    {
        "task_id": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.",
        "instruction 1": "Identify the input parameters as two tuples containing elements that need to be compared for dissimilarity.",
        "instruction 2": "Use Python's set operations to find the elements that are present in one tuple but not in the other, and return a combined set of these dissimilar elements.",
        "new_prompt": "Write a function to find the dissimilar elements in the given two tuples. The input parameters will be two tuples containing elements that need to be compared for dissimilarity. Utilize Python's set operations to identify the elements that are present in one tuple but absent in the other, and return a combined set of these dissimilar elements."
    },
    {
        "task_id": 580,
        "prompt": "Write a function to remove uneven elements in the nested mixed tuple.",
        "instruction 1": "Identify the input parameter as a nested tuple containing mixed data types and prepare to filter out the uneven elements.",
        "instruction 2": "Use a loop or a list comprehension to iterate through the nested structure and create a new tuple that contains only the even elements, then return the filtered tuple.",
        "new_prompt": "Write a function to remove uneven elements in the nested mixed tuple, where the input parameter is a nested tuple containing various data types. Use a loop or a list comprehension to iterate through the nested structure, filtering out the uneven elements and creating a new tuple that includes only the even elements, which will then be returned."
    },
    {
        "task_id": 581,
        "prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "instruction 1": "Identify the input parameters as a float or integer representing the base edge length and the height of the pyramid.",
        "instruction 2": "Calculate the surface area using the formula: surface_area = base_edge**2 + 2 * base_edge * ((height**2 + (base_edge / 2)**2) ** 0.5), and return the result.",
        "new_prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height. The input parameters should be identified as a float or integer representing the base edge length and the height of the pyramid. Calculate the surface area using the formula: surface_area = base_edge**2 + 2 * base_edge * ((height**2 + (base_edge / 2)**2) ** 0.5), and return the result."
    },
    {
        "task_id": 583,
        "prompt": "Write a function which returns nth catalan number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the Catalan number to calculate.",
        "instruction 2": "Use the formula C(n) = (2n)! / ((n + 1)!n!) to compute the nth Catalan number, utilizing Python's math library for factorial calculations.",
        "new_prompt": "Write a function which returns the nth Catalan number, where the input parameter is an integer n that represents the position of the Catalan number to calculate. Use the formula C(n) = (2n)! / ((n + 1)!n!) to compute the nth Catalan number, utilizing Python's math library for factorial calculations."
    },
    {
        "task_id": 585,
        "prompt": "Write a function to find the n most expensive items in a given dataset.",
        "instruction 1": "Identify the input parameters as a dataset (list of items) and an integer n that specifies the number of expensive items to find.",
        "instruction 2": "Sort the dataset based on the price attribute of the items in descending order and return the first n items from the sorted list.",
        "new_prompt": "Write a function to find the n most expensive items in a given dataset. The input parameters for this function should include a dataset, which is a list of items, and an integer n that indicates how many of the most expensive items to retrieve. To accomplish this, sort the dataset based on the price attribute of the items in descending order, and then return the first n items from the sorted list."
    },
    {
        "task_id": 586,
        "prompt": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "instruction 1": "Identify the input parameters as a list and an integer n that specifies the index at which to split the list.",
        "instruction 2": "Use list slicing to separate the list into two parts at the nth element, then concatenate the second part with the first part and return the new list.",
        "new_prompt": "Write a python function to split a list at the nth element and add the first part to the end. Identify the input parameters as a list and an integer n that specifies the index at which to split the list. Use list slicing to separate the list into two parts at the nth element, then concatenate the second part with the first part and return the new list."
    },
    {
        "task_id": 587,
        "prompt": "Write a function to convert a list to a tuple.",
        "instruction 1": "Identify the input parameter as a list that needs to be converted to a tuple.",
        "instruction 2": "Use the Python built-in `tuple()` function to convert the list to a tuple and return the resulting tuple.",
        "new_prompt": "Write a function to convert a list, identified as the input parameter, to a tuple using the Python built-in `tuple()` function and return the resulting tuple."
    },
    {
        "task_id": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given list.",
        "instruction 1": "Identify the input parameter as a list of numeric values.",
        "instruction 2": "Use the `max()` function to find the largest value and the `min()` function to find the smallest value in the list, then return the difference between these two values.",
        "new_prompt": "Write a python function to find the difference between the largest and smallest value in a given list of numeric values. Use the `max()` function to determine the largest value and the `min()` function to identify the smallest value in the list, then return the difference between these two values."
    },
    {
        "task_id": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.",
        "instruction 1": "Identify the input parameters as two integers that represent the range within which to find perfect squares.",
        "instruction 2": "Use a loop to iterate through the range from the first number to the second number, checking each number to determine if it is a perfect square, then return a list of the perfect squares found.",
        "new_prompt": "Write a function to find perfect squares between two given numbers, with the input parameters being two integers that define the range for locating these perfect squares. Utilize a loop to iterate through the range from the first number to the second number, checking each number to see if it qualifies as a perfect square, and return a list of the perfect squares identified."
    },
    {
        "task_id": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.",
        "instruction 1": "Identify the input parameters as two float values representing the polar coordinates: r (radius) and theta (angle in radians).",
        "instruction 2": "Calculate the rectangular coordinates using the formulas x = r * cos(theta) and y = r * sin(theta), then return the values as a tuple (x, y).",
        "new_prompt": "Write a function to convert polar coordinates to rectangular coordinates. The function should accept two float values representing the polar coordinates: r (radius) and theta (angle in radians). It should calculate the rectangular coordinates using the formulas x = r * cos(theta) and y = r * sin(theta), then return the values as a tuple (x, y)."
    },
    {
        "task_id": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.",
        "instruction 1": "Identify the input parameter as a list and ensure it has at least two elements to perform the interchange.",
        "instruction 2": "Swap the first element (index 0) with the last element (index -1) in the list and return the modified list.",
        "new_prompt": "Write a python function that takes a list as an input parameter, ensuring it contains at least two elements to perform the interchange, and interchanges the first element (index 0) with the last element (index -1) in the list before returning the modified list."
    },
    {
        "task_id": 592,
        "prompt": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
        "instruction 1": "Identify the input parameter as an integer n that represents the highest binomial coefficient index to calculate.",
        "instruction 2": "Use a loop to calculate the binomial coefficients using the formula for combinations, compute the product of each pair of consecutive coefficients, and return the sum of these products.",
        "new_prompt": "Write a python function to find the sum of the product of consecutive binomial coefficients. The function should take an integer n as an input parameter, representing the highest binomial coefficient index to calculate. Within the function, use a loop to compute the binomial coefficients using the combinations formula, calculate the product of each pair of consecutive coefficients, and return the sum of these products."
    },
    {
        "task_id": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.",
        "instruction 1": "Identify the input parameter as a string representing the IP address that may contain leading zeroes.",
        "instruction 2": "Split the IP address by the '.' delimiter, convert each octet to an integer to remove any leading zeroes, and then join the octets back together with '.' before returning the result.",
        "new_prompt": "Write a function to remove leading zeroes from an IP address, where the input parameter is a string representing the IP address that may contain leading zeroes. The function should split the IP address by the '.' delimiter, convert each octet to an integer to eliminate any leading zeroes, and then join the octets back together with '.' before returning the final result."
    },
    {
        "task_id": 594,
        "prompt": "Write a function to find the difference of the first even and first odd number of a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize variables to store the first even and first odd numbers found in the list.",
        "instruction 2": "Iterate through the list to find the first even and first odd numbers, calculate their difference, and return the result.",
        "new_prompt": "Write a function to find the difference of the first even and first odd number of a given list. The input parameter should be identified as a list of numbers, and you should initialize variables to store the first even and first odd numbers found in the list. Iterate through the list to locate the first even and first odd numbers, calculate their difference, and return the result."
    },
    {
        "task_id": 596,
        "prompt": "Write a function to find the size in bytes of the given tuple.",
        "instruction 1": "Identify the input parameter as a tuple whose size in bytes needs to be determined.",
        "instruction 2": "Use Python's built-in `sys.getsizeof()` function to calculate and return the size in bytes of the given tuple.",
        "new_prompt": "Write a function to find the size in bytes of the given tuple. Identify the input parameter as a tuple whose size in bytes needs to be determined, and use Python's built-in `sys.getsizeof()` function to calculate and return the size in bytes of the given tuple."
    },
    {
        "task_id": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.",
        "instruction 1": "Identify the input parameters as two sorted arrays and an integer k that represents the position of the element to find.",
        "instruction 2": "Implement a method to merge the two sorted arrays while keeping track of the kth element, and return that element when it is reached.",
        "new_prompt": "Write a function to find the kth element from two sorted arrays, where the input parameters are the two sorted arrays and an integer k that indicates the position of the element to find. Implement a method to merge the two sorted arrays while monitoring the kth element, and return that element once it is reached."
    },
    {
        "task_id": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.",
        "instruction 1": "Identify the input parameter as an integer number that needs to be checked for being an Armstrong number.",
        "instruction 2": "Calculate the sum of the digits of the number, each raised to the power of the number of digits, and compare it to the original number to determine if it is an Armstrong number.",
        "new_prompt": "Write a function to check whether the given integer number is an Armstrong number by calculating the sum of its digits, each raised to the power of the total number of digits, and comparing that sum to the original number."
    },
    {
        "task_id": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n that represents the count of natural numbers to sum and average.",
        "instruction 2": "Calculate the sum using the formula n * (n + 1) // 2, then compute the average by dividing the sum by n, and return both the sum and average.",
        "new_prompt": "Write a function to find the sum and average of the first n natural numbers, where n is an integer input parameter representing the count of natural numbers to sum and average. Calculate the sum using the formula n * (n + 1) // 2, then compute the average by dividing the sum by n, and return both the sum and average."
    },
    {
        "task_id": 600,
        "prompt": "Write a python function to check whether the given number is even or not.",
        "instruction 1": "Identify the input parameter as an integer that represents the number to be checked for evenness.",
        "instruction 2": "Use the modulus operator (%) to determine if the number is divisible by 2, and return True if it is even, otherwise return False.",
        "new_prompt": "Write a python function that takes an integer input parameter representing the number to be checked for evenness and determines whether the given number is even or not by using the modulus operator (%). Return True if the number is divisible by 2, and False otherwise."
    },
    {
        "task_id": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.",
        "instruction 1": "Identify the input parameter as a string from which to find the first repeated character.",
        "instruction 2": "Use a set to track characters as they are encountered while iterating through the string, returning the first character that is found in the set.",
        "new_prompt": "Write a python function to find the first repeated character in a given string. The function should take a string as input and use a set to track the characters encountered during the iteration. It should return the first character that appears in the set."
    },
    {
        "task_id": 603,
        "prompt": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "instruction 1": "Identify the input parameter as an integer n representing the upper limit for finding lucid numbers.",
        "instruction 2": "Implement a function to check each number from 1 to n for the lucid number condition, collecting all valid numbers in a list and returning that list.",
        "new_prompt": "Write a function to get all lucid numbers smaller than or equal to a given integer n, which represents the upper limit for finding lucid numbers. Implement the function to check each number from 1 to n for the lucid number condition, collecting all valid numbers in a list and returning that list."
    },
    {
        "task_id": 604,
        "prompt": "Write a function to reverse words seperated by spaces in a given string.",
        "instruction 1": "Identify the input parameter as a string that contains words separated by spaces.",
        "instruction 2": "Split the string into a list of words, reverse the list, and then join the reversed list back into a single string with spaces between the words.",
        "new_prompt": "Write a function to reverse words separated by spaces in a given string, identifying the input parameter as a string that contains words separated by spaces. Split the string into a list of words, reverse the list, and then join the reversed list back into a single string with spaces between the words."
    },
    {
        "task_id": 605,
        "prompt": "Write a function to check if the given integer is a prime number.",
        "instruction 1": "Identify the input parameter as an integer n that needs to be checked for primality.",
        "instruction 2": "Implement the logic to determine if n is prime by checking divisibility from 2 up to the square root of n, returning True if no divisors are found and False otherwise.",
        "new_prompt": "Write a function to check if the given integer n is a prime number by implementing the logic to determine its primality. The function should identify n as the input parameter and check its divisibility from 2 up to the square root of n, returning True if no divisors are found and False otherwise."
    },
    {
        "task_id": 606,
        "prompt": "Write a function to convert degrees to radians.",
        "instruction 1": "Identify the input parameter as a numeric value representing degrees.",
        "instruction 2": "Use the formula radians = degrees * (π / 180) to convert the input degrees to radians and return the result.",
        "new_prompt": "Write a function to convert degrees to radians, where the input parameter is a numeric value representing degrees. Use the formula radians = degrees * (π / 180) to convert the input degrees to radians and return the result."
    },
    {
        "task_id": 607,
        "prompt": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "instruction 1": "Identify the input parameters as a string to search and a regex pattern to match, and import the `re` module for regex operations.",
        "instruction 2": "Use the `re.search()` function to find the first match of the pattern in the string, and return the matching substring along with its start and end indices using the `start()` and `end()` methods.",
        "new_prompt": "Write a function to search a string for a regex pattern. The function should identify the input parameters as a string to search and a regex pattern to match, and import the `re` module for regex operations. It should return the matching substring, a start index, and an end index by using the `re.search()` function to find the first match of the pattern in the string, along with the start and end indices obtained from the `start()` and `end()` methods."
    },
    {
        "task_id": 608,
        "prompt": "Write a python function to find nth bell number.",
        "instruction 1": "Identify the input parameter as an integer n which represents the position of the Bell number to be computed.",
        "instruction 2": "Implement a dynamic programming approach to calculate Bell numbers using the relation B(n+1) = sum(k=0 to n) of C(n, k) * B(k), starting with B(0) = 1.",
        "new_prompt": "Write a python function to find the nth Bell number, where the input parameter is an integer n representing the position of the Bell number to be computed. Implement a dynamic programming approach to calculate Bell numbers using the relation B(n+1) = sum(k=0 to n) of C(n, k) * B(k), starting with B(0) = 1."
    },
    {
        "task_id": 610,
        "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "instruction 1": "Identify the input parameters as a list and an integer k that specifies the index of the element to be removed.",
        "instruction 2": "Use Python's list slicing to create a new list that includes all elements from the original list except for the element at index k, and return this new list.",
        "new_prompt": "Write a python function which takes a list and an integer k that specifies the index of the element to be removed, and returns a list with the same elements, but the k'th element excluded. Use Python's list slicing to create a new list that includes all elements from the original list except for the one at index k, and return this new list."
    },
    {
        "task_id": 611,
        "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "instruction 1": "Identify the input parameter as a matrix represented as a list of lists and the column index n for which the maximum value needs to be found.",
        "instruction 2": "Use a list comprehension to extract the values from the n'th column of the matrix and apply the `max()` function to return the maximum value from that list.",
        "new_prompt": "Write a function that identifies the input parameters as a matrix, represented as a list of lists, and a column index n for which the maximum value needs to be found, returning the max of the n'th column. Use a list comprehension to extract the values from the n'th column of the matrix and apply the `max()` function to return the maximum value from that list."
    },
    {
        "task_id": 612,
        "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "instruction 1": "Identify the input parameter as a list of lists, where each sublist contains exactly two elements.",
        "instruction 2": "Use a loop or list comprehension to iterate over the list of lists and create two separate lists: one for the first elements and another for the second elements of each sublist.",
        "new_prompt": "Write a python function which takes a list of lists, where each sublist contains exactly two elements, and returns a list of two lists. Use a loop or list comprehension to iterate over the list of lists and create two separate lists: one for the first elements of each sublist and another for the second elements."
    },
    {
        "task_id": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "instruction 1": "Identify the input parameter as a list of tuples, where each tuple contains numerical values.",
        "instruction 2": "Use a loop to iterate through each tuple and calculate the cumulative sum of all the values using the `sum()` function on each tuple and maintain a running total.",
        "new_prompt": "Write a function to find the cumulative sum of all the values that are present in the given list of tuples, where each tuple contains numerical values. Use a loop to iterate through each tuple and calculate the cumulative sum of all the values by applying the `sum()` function on each tuple while maintaining a running total."
    },
    {
        "task_id": 615,
        "prompt": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
        "instruction 1": "Identify the input parameter as a tuple of tuples containing numerical values.",
        "instruction 2": "Use a list comprehension to iterate over each inner tuple, calculate its average using the `sum()` function divided by the length of the tuple, and return the list of averages.",
        "new_prompt": "Write a function that identifies its input parameter as a tuple of tuples containing numerical values and returns the average value for each inner tuple as a list. Use a list comprehension to iterate over each inner tuple, calculating its average by utilizing the `sum()` function divided by the length of the tuple."
    },
    {
        "task_id": 616,
        "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "instruction 1": "Identify the input parameters as two tuples of the same length and ensure that both tuples are non-empty.",
        "instruction 2": "Use a list comprehension to iterate through the elements of both tuples, performing the modulo operation for each corresponding pair of elements, and return the result as a new tuple.",
        "new_prompt": "Write a function which takes two non-empty tuples of the same length as input parameters and performs the element wise modulo. Use a list comprehension to iterate through the elements of both tuples, performing the modulo operation for each corresponding pair of elements, and return the result as a new tuple."
    },
    {
        "task_id": 618,
        "prompt": "Write a function to divide two lists element wise.",
        "instruction 1": "Identify the input parameters as two lists of numbers that need to be divided element wise, ensuring both lists are of equal length.",
        "instruction 2": "Use a list comprehension to iterate over the elements of both lists simultaneously and divide corresponding elements, handling division by zero appropriately.",
        "new_prompt": "Write a function to divide two lists element wise. Ensure the input parameters are two lists of numbers that need to be divided element wise, confirming that both lists are of equal length. Use a list comprehension to iterate over the elements of both lists simultaneously and divide corresponding elements, while appropriately handling division by zero."
    },
    {
        "task_id": 619,
        "prompt": "Write a function to move all the numbers to the end of the given string.",
        "instruction 1": "Identify the input parameter as a string containing both numbers and letters.",
        "instruction 2": "Separate the characters in the string into two groups: letters and numbers, then concatenate the letters followed by the numbers, and return the resultant string.",
        "new_prompt": "Write a function to move all the numbers to the end of the given string, which should be identified as the input parameter containing both numbers and letters. The function should separate the characters into two groups: letters and numbers, then concatenate the letters followed by the numbers, and return the resultant string."
    },
    {
        "task_id": 620,
        "prompt": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "instruction 1": "Identify the input parameter as a list of integers and initialize a variable to track the largest subset size.",
        "instruction 2": "Use a combination of nested loops to check pairs of numbers for divisibility and update the largest subset size accordingly, returning the final size.",
        "new_prompt": "Write a function to find the size of the largest subset of a list of integers so that every pair is divisible. Begin by initializing a variable to keep track of the largest subset size. Then, employ a combination of nested loops to check each pair of numbers for divisibility, updating the largest subset size as needed, and finally return the computed size."
    },
    {
        "task_id": 622,
        "prompt": "Write a function to find the median of two sorted lists of same size.",
        "instruction 1": "Identify the input parameters as two sorted lists of the same size and determine their length to calculate the median.",
        "instruction 2": "Merge the two lists into one sorted list and return the average of the two middle elements as the median for an even-sized list.",
        "new_prompt": "Write a function to find the median of two sorted lists of the same size, where you will identify the input parameters as these two sorted lists and determine their length to calculate the median. Additionally, merge the two lists into one sorted list and return the average of the two middle elements as the median if the length is even."
    },
    {
        "task_id": 623,
        "prompt": "Write a function to compute the n-th power of each number in a list.",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer n that represents the power to which each number will be raised.",
        "instruction 2": "Use a list comprehension to iterate through the list, raising each number to the n-th power using the exponentiation operator **, and return the resulting list.",
        "new_prompt": "Write a function to compute the n-th power of each number in a list. # Identify the input parameters as a list of numbers and an integer n that represents the power to which each number will be raised. # Use a list comprehension to iterate through the list, raising each number to the n-th power using the exponentiation operator **, and return the resulting list."
    },
    {
        "task_id": 624,
        "prompt": "Write a python function to convert a given string to uppercase.",
        "instruction 1": "Identify the input parameter as a string that needs to be converted to uppercase.",
        "instruction 2": "Use the string method `upper()` to convert the input string to uppercase and return the resulting string.",
        "new_prompt": "Write a python function to convert a given string to uppercase. The input parameter should be identified as the string that needs to be transformed into uppercase. Utilize the string method `upper()` to perform the conversion and return the resulting uppercase string."
    },
    {
        "task_id": 626,
        "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "instruction 1": "Identify the input parameter as a float or integer radius that represents the radius of the semicircle.",
        "instruction 2": "Use the formula for the area of a triangle inscribed in a semicircle, which is (radius^2) / 2, and return the computed area.",
        "new_prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius. The input parameter should be defined as a float or integer that represents the radius of the semicircle. Utilize the formula for the area of a triangle inscribed in a semicircle, which is (radius^2) / 2, to return the calculated area."
    },
    {
        "task_id": 628,
        "prompt": "Write a function to replace all spaces in the given string with '%20'.",
        "instruction 1": "Identify the input parameter as a string that contains spaces that need to be replaced.",
        "instruction 2": "Use the `replace()` method of the string to replace all spaces with '%20' and return the modified string.",
        "new_prompt": "Write a function that takes a string containing spaces as an input parameter and replaces all spaces in that string with '%20' using the `replace()` method, then returns the modified string."
    },
    {
        "task_id": 629,
        "prompt": "Write a python function to find even numbers from a list of numbers.",
        "instruction 1": "Identify the input parameter as a list of numbers from which even numbers need to be extracted.",
        "instruction 2": "Use a list comprehension to filter and return the numbers from the list that are divisible by 2.",
        "new_prompt": "Write a python function to find even numbers from a list of numbers. The input parameter should be recognized as a list of numbers from which even numbers need to be extracted. Utilize a list comprehension to filter and return the numbers from the list that are divisible by 2."
    },
    {
        "task_id": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "instruction 1": "Identify the input parameter as a tuple representing the coordinate (x, y) for which adjacent coordinates need to be found.",
        "instruction 2": "Calculate the adjacent coordinates by adding and subtracting 1 from the x and y values, returning a list of the resulting tuples.",
        "new_prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple, which is identified as (x, y). Calculate the adjacent coordinates by adding and subtracting 1 from both the x and y values, and return a list of the resulting tuples."
    },
    {
        "task_id": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "instruction 1": "Identify the input parameter as a string that may contain whitespace characters.",
        "instruction 2": "Use Python's string methods to iterate through the characters of the string, replacing whitespaces with underscores and underscores with whitespaces, then return the modified string.",
        "new_prompt": "Write a function that takes a string, which may include whitespace characters, as an input parameter, and replaces whitespaces with underscores and underscores with whitespaces using Python's string methods while iterating through the characters of the string. Finally, return the modified string."
    },
    {
        "task_id": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.",
        "instruction 1": "Identify the input parameter as a list of numbers that may contain zeroes, and initialize a new list to store non-zero elements.",
        "instruction 2": "Iterate through the original list, appending non-zero elements to the new list, and then extend the new list by adding the same number of zeroes at the end, and return the modified list.",
        "new_prompt": "Write a python function to move all zeroes to the end of the given list. The input parameter should be identified as a list of numbers that may contain zeroes, and a new list must be initialized to store non-zero elements. The function should iterate through the original list, appending non-zero elements to the new list, and subsequently extend the new list by adding the same number of zeroes at the end, before returning the modified list."
    },
    {
        "task_id": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "instruction 1": "Identify the input parameter as a list of integers from which all pairs will be formed to compute the xor.",
        "instruction 2": "Use nested loops to iterate through all unique pairs of numbers in the list, calculate the xor for each pair, and return the total sum of these xor results.",
        "new_prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list. The input parameter should be a list of integers from which all pairs will be formed to compute the xor. Utilize nested loops to iterate through all unique pairs of numbers in the list, calculate the xor for each pair, and return the total sum of these xor results."
    },
    {
        "task_id": 635,
        "prompt": "Write a function to sort the given list.",
        "instruction 1": "Identify the input parameter as a list that needs to be sorted.",
        "instruction 2": "Use Python's built-in `sort()` method or the `sorted()` function to sort the list in ascending order and return the sorted list.",
        "new_prompt": "Write a function to sort the given list. The input parameter should be identified as a list that needs to be sorted. Utilize Python's built-in `sort()` method or the `sorted()` function to arrange the list in ascending order and return the sorted list."
    },
    {
        "task_id": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss",
        "instruction 1": "Identify the input parameter as a numerical value representing the amount to be checked.",
        "instruction 2": "Implement a conditional statement to check if the amount is equal to zero, and return True if it is (indicating no profit, no loss), otherwise return False.",
        "new_prompt": "Write a function to check whether the given amount has no profit and no loss. Identify the input parameter as a numerical value representing the amount to be checked, and implement a conditional statement to check if the amount is equal to zero; return True if it is (indicating no profit, no loss), otherwise return False."
    },
    {
        "task_id": 638,
        "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "instruction 1": "Identify the input parameters as a float for wind velocity in km/h and a float for temperature in celsius.",
        "instruction 2": "Implement the wind chill index formula: WCI = 13.12 + 0.6215 * T - 35.75 * (V ** 0.16) + 0.4275 * T * (V ** 0.16), round the result to the next integer, and return it.",
        "new_prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h (as a float) and a temperature in celsius (as a float). Implement the wind chill index formula: WCI = 13.12 + 0.6215 * T - 35.75 * (V ** 0.16) + 0.4275 * T * (V ** 0.16), round the result to the next integer, and return it."
    },
    {
        "task_id": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "instruction 1": "Identify the input parameter as a list of names and filter the list to exclude names that start with a lowercase letter.",
        "instruction 2": "Use a loop or a comprehension to calculate the sum of the lengths of the remaining names and return that sum.",
        "new_prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter. Identify the input parameter as a list of names and filter the list to exclude any names that begin with a lowercase letter. Use either a loop or a comprehension to compute the sum of the lengths of the names that remain and return that sum."
    },
    {
        "task_id": 641,
        "prompt": "Write a function to find the nth nonagonal number.",
        "instruction 1": "Identify the input parameter as an integer n that represents the position of the nonagonal number to be calculated.",
        "instruction 2": "Use the formula for the nth nonagonal number, which is given by n * (7n - 5) / 2, to compute and return the result.",
        "new_prompt": "Write a function to find the nth nonagonal number, where the input parameter is an integer n that represents the position of the nonagonal number to be calculated. Use the formula for the nth nonagonal number, which is given by n * (7n - 5) / 2, to compute and return the result."
    },
    {
        "task_id": 643,
        "prompt": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "instruction 1": "Identify the input parameter as a string and check the characters from index 1 to the second-to-last index for the presence of 'z'.",
        "instruction 2": "Return True if 'z' is found in the specified range, otherwise return False.",
        "new_prompt": "Write a function that checks if a string contains 'z', except at the start and end of the word. Identify the input parameter as a string and check the characters from index 1 to the second-to-last index for the presence of 'z'. Return True if 'z' is found in the specified range, otherwise return False."
    },
    {
        "task_id": 644,
        "prompt": "Write a python function to reverse an array upto a given position.",
        "instruction 1": "Identify the input parameters as an array and an integer position that specifies the index up to which the array should be reversed.",
        "instruction 2": "Use Python's slicing to reverse the portion of the array up to the specified position and concatenate it with the remaining elements of the array, then return the modified array.",
        "new_prompt": "Write a python function to reverse an array up to a given position. # The function should accept an array and an integer position that indicates the index up to which the array will be reversed. Use Python's slicing to reverse the section of the array up to the specified position, then concatenate it with the remaining elements of the array, and return the updated array."
    },
    {
        "task_id": 720,
        "prompt": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "instruction 1": "Identify the input parameters as a tuple and a dictionary that need to be combined.",
        "instruction 2": "Create a new tuple by converting the dictionary to a tuple of its items and appending it to the original tuple, then return the new tuple.",
        "new_prompt": "Write a function to add a dictionary to the tuple. The output should be a tuple. Identify the input parameters as a tuple and a dictionary that need to be combined. Create a new tuple by converting the dictionary to a tuple of its items and appending it to the original tuple, then return the new tuple."
    },
    {
        "task_id": 721,
        "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "instruction 1": "Identify the input parameter as a square matrix represented by a list of lists, and determine its size N.",
        "instruction 2": "Implement a recursive or dynamic programming approach to explore all paths from the top-left to the bottom-right cell while keeping track of the total cost and number of cells visited, then calculate the maximum average cost across all paths.",
        "new_prompt": "Given a square matrix of size N*N represented as a list of lists, where each cell is associated with a specific cost, a path is defined as a specific sequence of cells that starts from the top-left cell and moves only right or down, ending at the bottom-right cell. We aim to find a path that maximizes the average cost across all possible paths, with the average calculated as the total cost divided by the number of cells visited in the path. First, identify the input parameter as a square matrix using a list of lists, and determine its size N. Then, implement either a recursive or dynamic programming approach to explore all paths from the top-left to the bottom-right cell, while tracking the total cost and number of cells visited, and subsequently calculate the maximum average cost among all paths."
    },
    {
        "task_id": 722,
        "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "instruction 1": "Identify the input parameters as a dictionary containing student names paired with tuples of their height and weight, and two float values representing the minimum height and weight.",
        "instruction 2": "Use a dictionary comprehension to iterate through the input dictionary and filter out students whose height and weight are above the specified minimum values, then return the filtered dictionary.",
        "new_prompt": "The input is given as - a dictionary containing student names paired with tuples of their height and weight, along with two float values representing the minimum height and weight. Write a function that employs a dictionary comprehension to filter students who have both their height and weight exceeding the specified minimum values, then return the resulting filtered dictionary."
    },
    {
        "task_id": 723,
        "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "instruction 1": "Identify the input parameters as two lists of the same length that will be compared element-wise.",
        "instruction 2": "Use a loop or list comprehension to iterate through the indices of the lists, counting how many times the elements at corresponding indices are equal, and return that count.",
        "new_prompt": "The input is defined as two lists of the same length that will be compared element-wise. Write a function to count the indices where the elements at corresponding indices in these lists have the same values by using a loop or list comprehension to iterate through the indices and return the count of equal elements."
    },
    {
        "task_id": 724,
        "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "instruction 1": "Identify the input parameters as two integers: base and power.",
        "instruction 2": "Calculate the result of base raised to the power, convert the result to a string, iterate through each character in the string to convert it back to an integer, and return the sum of these integers.",
        "new_prompt": "Write a function that takes two integers as input parameters—base and power—and calculates the sum of all digits of the base raised to the specified power by first determining the result of base raised to power, converting it to a string, iterating through each character to convert it back to an integer, and finally returning the sum of these integers."
    },
    {
        "task_id": 725,
        "prompt": "Write a function to extract values between quotation marks \" \" of the given string.",
        "instruction 1": "Identify the input parameter as a string that contains text with values enclosed in quotation marks.",
        "instruction 2": "Use regular expressions to find and extract all values that are enclosed between quotation marks in the given string and return them as a list.",
        "new_prompt": "Write a function to extract values between quotation marks \" \" from a given string, which contains text with values enclosed in quotation marks. Use regular expressions to identify and extract all values that are enclosed within these quotation marks and return them as a list."
    },
    {
        "task_id": 726,
        "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "instruction 1": "Identify the input parameter as a tuple of numbers, and determine the length N of the output tuple, which is one less than the length of the input tuple.",
        "instruction 2": "Use a loop to iterate over the indices of the input tuple and calculate the product of each pair of consecutive elements, storing these products in a new tuple which is then returned.",
        "new_prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}. The function should first identify the input parameter as a tuple of numbers and determine the length N of the output tuple, which is one less than the length of the input tuple. It should then use a loop to iterate over the indices of the input tuple, calculating the product of each pair of consecutive elements and storing these products in a new tuple, which is then returned."
    },
    {
        "task_id": 728,
        "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "instruction 1": "Identify the input parameters as two lists of equal length, where each list contains n elements.",
        "instruction 2": "Use a list comprehension to iterate through the indices of the two lists and return a new list containing the element-wise sums of the corresponding elements from both lists.",
        "new_prompt": "Write a function that takes as input two lists of equal length, where each list contains n elements, [a_1,...,a_n], [b_1,...,b_n], and returns a new list containing the element-wise sums of the corresponding elements from both lists: [a_1+b_1,...,a_n+b_n]. Use a list comprehension to iterate through the indices of the two lists."
    },
    {
        "task_id": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.",
        "instruction 1": "Identify the input parameter as a list from which consecutive duplicates need to be removed.",
        "instruction 2": "Iterate through the list while comparing each element with the previous one, appending non-duplicate elements to a new list and return that new list.",
        "new_prompt": "Write a function to remove consecutive duplicates from a given list, where the input parameter is identified as a list from which consecutive duplicates need to be removed. The function should iterate through the list, comparing each element with the previous one, appending non-duplicate elements to a new list, and finally returning that new list."
    },
    {
        "task_id": 731,
        "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "instruction 1": "Identify the input parameters as the radius r and the height h of the cone.",
        "instruction 2": "Use the formula for the lateral surface area of a cone, which is given by the expression π r l, where l is the slant height calculated using the formula l = sqrt(r^2 + h^2), and return the computed area.",
        "new_prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h, where the input parameters are the radius r and the height h of the cone. Use the formula for the lateral surface area of a cone, which is expressed as π r l, with l being the slant height calculated using the formula l = sqrt(r^2 + h^2), and return the computed area."
    },
    {
        "task_id": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "instruction 1": "Identify the input parameter as a string that may contain spaces, commas, or dots.",
        "instruction 2": "Use Python's string `replace()` method or a regular expression to replace all occurrences of spaces, commas, and dots with a colon, then return the modified string.",
        "new_prompt": "Write a function that takes a string as an input, which may contain spaces, commas, or dots, to replace all occurrences of those characters with a colon using Python's string `replace()` method or a regular expression, then return the modified string."
    },
    {
        "task_id": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "instruction 1": "Identify the input parameters as a sorted array of numbers and the target number to find.",
        "instruction 2": "Implement a binary search algorithm to efficiently locate the index of the first occurrence of the target number in the array.",
        "new_prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array. The input parameters should include a sorted array of numbers and the target number to find. Utilize a binary search algorithm to efficiently locate the index of the first occurrence of the target number in the array."
    },
    {
        "task_id": 734,
        "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize a variable to store the cumulative sum of products.",
        "instruction 2": "Use nested loops to generate all possible sublists, calculate the product of each sublist, and accumulate the products into the initialized variable before returning the total sum.",
        "new_prompt": "Write a python function to find the sum of products of all possible sublists of a given list. The input parameter should be identified as a list of numbers, and a variable must be initialized to store the cumulative sum of products. Use nested loops to generate all possible sublists, calculate the product of each sublist, and accumulate these products into the initialized variable before returning the total sum. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/"
    },
    {
        "task_id": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "instruction 1": "Identify the input parameter as an integer that represents the number whose bits need to be toggled, ensuring to handle at least three bits to allow toggling between the first and last bit.",
        "instruction 2": "Convert the number to its binary representation, toggle the bits between the first and last bit, and then convert it back to an integer before returning the result.",
        "new_prompt": "Write a python function to toggle the bits of a number, identified as an integer that represents the number whose bits need to be toggled, except for the first and the last bit, ensuring to handle at least three bits. Convert the number to its binary representation, toggle the bits between the first and last bit, and then convert it back to an integer before returning the result. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/"
    },
    {
        "task_id": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
        "instruction 1": "Identify the input parameters as a sorted list and a specified value for which the left insertion point needs to be found.",
        "instruction 2": "Implement a binary search algorithm to determine the left insertion point by finding the index at which the specified value can be inserted while maintaining the sorted order.",
        "new_prompt": "Write a function to locate the left insertion point for a specified value in sorted order, where the input parameters are a sorted list and the specified value for which the left insertion point needs to be found. Implement a binary search algorithm to determine the left insertion point by finding the index at which the specified value can be inserted while maintaining the sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php"
    },
    {
        "task_id": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "instruction 1": "Identify the input parameter as a string that needs to be checked for starting with a vowel, and import the `re` module for regex operations.",
        "instruction 2": "Use a regex pattern to check if the string starts with a vowel ('A', 'E', 'I', 'O', 'U', case insensitive) and return a boolean result.",
        "new_prompt": "Write a function to check whether the given input parameter, a string that needs to be evaluated, starts with a vowel or not using regex by importing the `re` module for regex operations. Use a regex pattern to determine if the string begins with a vowel ('A', 'E', 'I', 'O', 'U', case insensitive) and return a boolean result."
    },
    {
        "task_id": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "instruction 1": "Identify the input parameter as an integer n that specifies the number of digits in the triangular number.",
        "instruction 2": "Calculate triangular numbers iteratively, check the number of digits in each triangular number using `len(str(triangular_number))`, and return the index of the first triangular number that has n digits.",
        "new_prompt": "Write a python function to find the index of the smallest triangular number with n digits, where n is an integer input parameter that specifies the number of digits in the triangular number. Calculate triangular numbers iteratively, checking the number of digits in each triangular number using `len(str(triangular_number))`, and return the index of the first triangular number that has n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/"
    },
    {
        "task_id": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
        "instruction 1": "Identify the input parameter as a tuple containing an even number of elements that will be used to create key-value pairs.",
        "instruction 2": "Iterate through the tuple in steps of 2, using the first element as the key and the second element as the value to populate a dictionary, then return the resulting dictionary.",
        "new_prompt": "Write a function to convert the given tuple, which is expected to contain an even number of elements, into a key-value dictionary using adjacent elements. The function should iterate through the tuple in steps of 2, treating the first element as the key and the second element as the value to populate a dictionary, and then return the resulting dictionary. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/"
    },
    {
        "task_id": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.",
        "instruction 1": "Identify the input parameter as a string that represents the sequence of characters to be checked.",
        "instruction 2": "Use Python's set data structure to check if the length of the set created from the input string is equal to 1, indicating all characters are the same.",
        "new_prompt": "Write a python function that takes a string as an input parameter, representing the sequence of characters to be checked, to determine whether all the characters are the same. Use Python's set data structure to verify if the length of the set created from the input string is equal to 1, indicating that all characters are identical."
    },
    {
        "task_id": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.",
        "instruction 1": "Identify the input parameters as the lengths of the four edges of the tetrahedron.",
        "instruction 2": "Use the formula for the volume of the tetrahedron and then apply the appropriate mathematical relationships to calculate the surface area based on those edge lengths.",
        "new_prompt": "Write a function to calculate the area of a tetrahedron, taking as input the lengths of its four edges. Utilize the formula for the volume of the tetrahedron and apply the suitable mathematical relationships to determine the surface area based on these edge lengths."
    },
    {
        "task_id": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
        "instruction 1": "Identify the input parameters as a list and an integer n that specifies the number of positions to rotate the list to the right.",
        "instruction 2": "Use Python's slicing to reorder the list by getting the last n elements and concatenating them with the rest of the list before the last n elements, then return the rotated list.",
        "new_prompt": "Write a function to rotate a given list by a specified number of items to the right direction. The function should take two input parameters: a list and an integer n, which indicates the number of positions to rotate the list. Utilize Python's slicing to rearrange the list by extracting the last n elements and appending them to the remainder of the list that precedes the last n elements, then return the rotated list. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/"
    },
    {
        "task_id": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.",
        "instruction 1": "Identify the input parameter as a tuple and initialize a boolean variable to track if a None value is found.",
        "instruction 2": "Use a loop to iterate through the elements of the tuple, checking if any element is None, and return True if found; otherwise, return False.",
        "new_prompt": "Write a function to check if the given tuple has any None value or not. Identify the input parameter as a tuple and initialize a boolean variable to track if a None value is found. Use a loop to iterate through the elements of the tuple, checking if any element is None; return True if one is found, and return False if none are found."
    },
    {
        "task_id": 745,
        "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
        "instruction 1": "Identify the input parameters as two integers startnum and endnum that specify the range of numbers to check.",
        "instruction 2": "Use a loop to iterate through the numbers in the specified range, and for each number, check if it is divisible by each of its non-zero digits; collect and return those numbers that meet the criteria.",
        "new_prompt": "Write a function to find numbers within a given range from startnum to endnum, where every number is divisible by every digit it contains. Identify the input parameters as two integers, startnum and endnum, that specify the range of numbers to check. Use a loop to iterate through the numbers in the specified range, and for each number, check if it is divisible by each of its non-zero digits; collect and return those numbers that meet the criteria. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php"
    },
    {
        "task_id": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string.",
        "instruction 1": "Identify the input parameter as a string that contains words with capital letters.",
        "instruction 2": "Use a regular expression to find capital letters and insert spaces before them, except when the capital letter is at the start of the string, then return the modified string.",
        "new_prompt": "Write a function that takes a string containing words with capital letters as an input parameter and adds spaces before capital letters using a regular expression, unless the capital letter is at the start of the string, then return the modified string."
    },
    {
        "task_id": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
        "instruction 1": "Identify the input parameter as a list of strings that represent numeric values.",
        "instruction 2": "Convert the list of strings to a list of integers for numeric sorting and then return the sorted list.",
        "new_prompt": "Write a function to sort a given list of strings of numbers numerically. The input parameter should be identified as a list of strings that represent numeric values. Convert this list of strings to a list of integers for numeric sorting and then return the sorted list. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/"
    },
    {
        "task_id": 750,
        "prompt": "Write a function to add the given tuple to the given list.",
        "instruction 1": "Identify the input parameters as a list and a tuple, where the tuple contains the elements to be added to the list.",
        "instruction 2": "Use Python's list method `extend()` or the `+=` operator to add the elements of the tuple to the list and return the modified list.",
        "new_prompt": "Write a function to add the given tuple to the given list, where the input parameters include a list and a tuple containing the elements to be added. Utilize Python's list method `extend()` or the `+=` operator to incorporate the elements of the tuple into the list and return the updated list."
    },
    {
        "task_id": 751,
        "prompt": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "instruction 1": "Identify the input parameter as a list of integers that represents the array to be checked.",
        "instruction 2": "Implement a function that checks the min-heap property by ensuring that for every parent node at index i, the value is less than or equal to its children at indices 2*i + 1 and 2*i + 2, iterating through the array.",
        "new_prompt": "Write a function to check if the given array represents a min heap or not, where the input parameter is a list of integers that represents the array to be checked. Implement the function to verify the min-heap property by ensuring that for every parent node at index i, the value is less than or equal to its children at indices 2*i + 1 and 2*i + 2, iterating through the array. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/"
    },
    {
        "task_id": 752,
        "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "instruction 1": "Identify the input parameter as an integer n that indicates the position of the Jacobsthal number to be found.",
        "instruction 2": "Use a recursive function or an iterative approach to calculate the nth Jacobsthal number based on the relation J(n) = J(n-2) + 2*J(n-1), with base cases J(0) = 0 and J(1) = 1.",
        "new_prompt": "Write a function to find the nth Jacobsthal number, where the input parameter is an integer n that indicates the position of the Jacobsthal number to be found. You may choose to implement this using a recursive function or an iterative approach, calculating the nth Jacobsthal number based on the relation J(n) = J(n-2) + 2*J(n-1), with base cases J(0) = 0 and J(1) = 1. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ..."
    },
    {
        "task_id": 753,
        "prompt": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
        "instruction 1": "Identify the input parameters as a list of tuples and an integer k that indicates the number of minimum records to find.",
        "instruction 2": "Use Python's built-in `sorted()` function along with a lambda function to sort the tuples based on the desired key, then return the first k elements from the sorted list.",
        "new_prompt": "Write a function to find minimum k records from a list of tuples and an integer k that indicates the number of minimum records to find. Use Python's built-in `sorted()` function along with a lambda function to sort the tuples based on the desired key, then return the first k elements from the sorted list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases"
    },
    {
        "task_id": 754,
        "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "instruction 1": "Identify the input parameters as three lists l1, l2, and l3 of equal length containing elements.",
        "instruction 2": "Use a list comprehension to iterate over the indices of the lists, checking if the elements at each index are the same across all three lists, and return a list of the common elements.",
        "new_prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists, where the input parameters are three lists l1, l2, and l3 of equal length containing elements. The function should use a list comprehension to iterate over the indices of the lists, checking if the elements at each index are the same across all three lists, and return a list of the common elements."
    },
    {
        "task_id": 755,
        "prompt": "Write a function to find the second smallest number in a list.",
        "instruction 1": "Identify the input parameter as a list of numbers from which the second smallest number needs to be found.",
        "instruction 2": "Sort the list to remove duplicates and return the element at index 1 to get the second smallest number.",
        "new_prompt": "Write a function to find the second smallest number in a list of numbers. Identify the input parameter as the list from which the second smallest number needs to be found. Sort the list to eliminate duplicates and return the element at index 1 to obtain the second smallest number."
    },
    {
        "task_id": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
        "instruction 1": "Identify the input parameter as a list of strings and initialize a counter to keep track of the number of reverse string pairs.",
        "instruction 2": "Use a loop to iterate through each string in the list, check if its reverse exists in the list, and update the counter accordingly, making sure to avoid double counting.",
        "new_prompt": "Write a function to count the pairs of reverse strings in the given list of strings. First, identify the input parameter as a list of strings and initialize a counter to keep track of the number of reverse string pairs. Then, use a loop to iterate through each string in the list, check if its reverse exists in the list, and update the counter accordingly, ensuring that double counting is avoided. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/"
    },
    {
        "task_id": 758,
        "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
        "instruction 1": "Identify the input parameter as a list that contains other lists, and initialize an empty dictionary to hold the tuples and their occurrences.",
        "instruction 2": "Iterate through the outer list, convert each inner list to a tuple, and update the dictionary with the count of occurrences for each tuple, then return the dictionary.",
        "new_prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple, and the value of such tuple is the number of its occurrences in the original list. The function should take a list containing other lists as an input parameter and initialize an empty dictionary to store the tuples and their corresponding counts. It should iterate through the outer list, convert each inner list to a tuple, update the dictionary with the count of occurrences for each tuple, and then return the dictionary."
    },
    {
        "task_id": 759,
        "prompt": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "instruction 1": "Identify the input parameter as a string that represents the decimal number to be checked.",
        "instruction 2": "Use a regular expression to validate if the string matches the format of a decimal number with up to two digits after the decimal point, and return a boolean indicating the result.",
        "new_prompt": "Write a function to check whether a given string, which represents the decimal number to be verified, is a decimal number with a precision of 2. Use a regular expression to validate if the string matches the format of a decimal number with up to two digits after the decimal point, and return a boolean indicating the result."
    },
    {
        "task_id": 760,
        "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "instruction 1": "Identify the input parameter as a list of numbers.",
        "instruction 2": "Use the `set()` function to convert the list into a set and check if the length of the set is equal to 1 to determine if all elements are the same.",
        "new_prompt": "Write a python function to check whether a list of numbers (input parameter) contains only one distinct element or not. Use the `set()` function to convert the list into a set and verify if the length of the set is equal to 1 to determine if all elements are identical."
    },
    {
        "task_id": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "instruction 1": "Identify the input parameter as an integer month number ranging from 1 to 12.",
        "instruction 2": "Check if the month number corresponds to months with 30 days (April, June, September, November) and return a boolean indicating whether it has 30 days.",
        "new_prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as numbers from 1 to 12. The input parameter should be identified as an integer month number ranging from 1 to 12. The function should check if the month number corresponds to months with 30 days (April, June, September, November) and return a boolean indicating whether it has 30 days."
    },
    {
        "task_id": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "instruction 1": "Identify the input parameter as an array of numbers and sort the array to facilitate finding the minimum difference.",
        "instruction 2": "Iterate through the sorted array to compare adjacent elements, calculate their differences, and track the minimum difference found.",
        "new_prompt": "Write a python function to find the minimum difference between any two elements in a given array. Identify the input parameter as an array of numbers and sort the array to facilitate finding the minimum difference. Then, iterate through the sorted array to compare adjacent elements, calculate their differences, and track the minimum difference found. https://www.geeksforgeeks.org/find-minimum-difference-pair/"
    },
    {
        "task_id": 764,
        "prompt": "Write a python function to count number of digits in a given string.",
        "instruction 1": "Identify the input parameter as a string that may contain numeric and non-numeric characters.",
        "instruction 2": "Use a loop or a comprehension to iterate through the string and count the number of characters that are digits using the `isdigit()` method, then return the count.",
        "new_prompt": "Write a python function to count the number of digits in a given string, where the input parameter is a string that may contain both numeric and non-numeric characters. Use a loop or a comprehension to iterate through the string, counting the characters that are digits by utilizing the `isdigit()` method, and then return the count."
    },
    {
        "task_id": 765,
        "prompt": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "instruction 1": "Define the input parameter as an integer n representing the position of the polite number to be found.",
        "instruction 2": "Iterate through natural numbers, checking if each number can be expressed as a sum of distinct natural numbers, and count these polite numbers until reaching the nth polite number.",
        "new_prompt": "Write a function to find the nth polite number. Define the input parameter as an integer n representing the position of the polite number to be found. Iterate through natural numbers, checking if each number can be expressed as a sum of distinct natural numbers, and count these polite numbers until reaching the nth polite number. geeksforgeeks.org/n-th-polite-number/"
    },
    {
        "task_id": 766,
        "prompt": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "instruction 1": "Identify the input parameter as a list from which the pairs of consecutive items will be derived.",
        "instruction 2": "Use a list comprehension or a loop to iterate through the indices of the list, pairing each item with the next one, and return the list of these pairs.",
        "new_prompt": "Write a function to return a list of all pairs of consecutive items in a given list. Identify the input parameter as a list from which the pairs of consecutive items will be derived, and use a list comprehension or a loop to iterate through the indices of the list, pairing each item with the next one, and return the list of these pairs."
    },
    {
        "task_id": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,",
        "instruction 1": "Identify the input parameters as a list of numbers and an integer `sum` that represents the target sum for pairs.",
        "instruction 2": "Use a nested loop to iterate through the list and count the pairs of elements that add up to the specified `sum`, ensuring not to count the same pair multiple times.",
        "new_prompt": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The function takes as input a list of numbers and an integer `sum` that represents the target sum for pairs. Use a nested loop to iterate through the list and count the pairs of elements that add up to the specified `sum`, ensuring that you do not count the same pair multiple times."
    },
    {
        "task_id": 769,
        "prompt": "Write a python function to get the difference between two lists.",
        "instruction 1": "Identify the input parameters as two lists from which the difference will be calculated.",
        "instruction 2": "Use Python's set operations to find the difference between the two lists and return the result as a new list.",
        "new_prompt": "Write a python function to get the difference between two lists. # Identify the input parameters as two lists from which the difference will be calculated. # Use Python's set operations to find the difference between the two lists and return the result as a new list."
    },
    {
        "task_id": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "instruction 1": "Identify the input parameter as an integer n representing the number of odd natural numbers to consider.",
        "instruction 2": "Use a loop to iterate through the first n odd natural numbers, calculate each number raised to the fourth power, and accumulate the sum, then return the final sum.",
        "new_prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers. # Identify the input parameter as an integer n representing the number of odd natural numbers to consider. Use a loop to iterate through the first n odd natural numbers, calculate each number raised to the fourth power, and accumulate the sum, then return the final sum."
    },
    {
        "task_id": 771,
        "prompt": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "instruction 1": "Identify the input parameter as a string that represents the expression containing parentheses, braces, and brackets.",
        "instruction 2": "Use a stack data structure to track the opening symbols and ensure that each closing symbol matches the most recent opening symbol, returning True if balanced and False otherwise.",
        "new_prompt": "Write a function to check if the given expression, represented as a string containing parentheses, braces, and brackets, is balanced or not. Utilize a stack data structure to track the opening symbols and ensure that each closing symbol corresponds to the most recent opening symbol, returning True if the expression is balanced and False otherwise. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/"
    },
    {
        "task_id": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.",
        "instruction 1": "Identify the input parameters as a string containing the sentence and an integer k representing the length of words to be removed.",
        "instruction 2": "Split the string into words, filter out the words that have a length equal to k, and then join the remaining words back into a single string to return.",
        "new_prompt": "Write a function to remove all the words with k length in the given string. The input parameters should include a string containing the sentence and an integer k representing the length of words to be eliminated. The function should split the string into words, filter out those that have a length equal to k, and then join the remaining words back into a single string to return."
    },
    {
        "task_id": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "instruction 1": "Identify the input parameters as a string to search within and the substring to find, and initialize an empty list to store occurrences and their positions.",
        "instruction 2": "Use a loop to search for the substring in the string, recording the index of each occurrence; if found, return the list of occurrences and positions, otherwise return None.",
        "new_prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match. Identify the input parameters as a string to search within and the substring to find, and initialize an empty list to store occurrences and their positions. Use a loop to search for the substring in the string, recording the index of each occurrence; if found, return the list of occurrences and positions, otherwise return None."
    },
    {
        "task_id": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers and determine the odd indices within that list.",
        "instruction 2": "Iterate through the elements at the odd indices and check if each element is an odd number, returning True if all are odd or False if any are not.",
        "new_prompt": "Write a python function to check whether every odd index contains odd numbers of a given list. The input parameter should be identified as a list of numbers, from which you will determine the odd indices. Iterate through the elements at these odd indices and check if each element is an odd number, returning True if all are odd or False if any are not."
    },
    {
        "task_id": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers and use a collections.Counter or a similar method to count the occurrences of each element in the list.",
        "instruction 2": "Iterate through the counted elements, summing only those that appear exactly once, and return the total sum of non-repeated elements.",
        "new_prompt": "Write a python function to find the sum of non-repeated elements in a given list. Identify the input parameter as a list of numbers and utilize a collections.Counter or a similar method to count the occurrences of each element in the list. Iterate through the counted elements, summing only those that appear exactly once, and return the total sum of non-repeated elements."
    },
    {
        "task_id": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "instruction 1": "Identify the input parameter as a list of elements that may contain consecutive duplicates.",
        "instruction 2": "Iterate through the list and group consecutive duplicates into sublists, appending each sublist to a result list, then return the result list.",
        "new_prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists. The input parameter should be identified as a list of elements that may contain consecutive duplicates. The function should iterate through the list to group consecutive duplicates into sublists, appending each sublist to a result list, and finally return the result list."
    },
    {
        "task_id": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
        "instruction 1": "Identify the input parameter as a list of tuples, where each tuple contains integers that may sum up to a desired target value.",
        "instruction 2": "Implement a function that generates all possible combinations of the tuples, checks their sums against the target value, and returns the combinations that match the specified sum.",
        "new_prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. The function should accept a list of tuples as its input parameter, where each tuple contains integers that may sum up to a desired target value. Additionally, implement the function to generate all possible combinations of the tuples, check their sums against the target value, and return the combinations that match the specified sum. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/"
    },
    {
        "task_id": 781,
        "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
        "instruction 1": "Identify the input parameter as an integer n for which you need to check the count of its divisors.",
        "instruction 2": "Write a loop to count the divisors of n by checking for each integer from 1 to n if it divides n without a remainder, then return True if the count is even, otherwise return False.",
        "new_prompt": "Write a python function to check whether the count of divisors is even, identifying the input parameter as an integer n for which you need to check the count of its divisors. Additionally, create a loop to count the divisors of n by checking each integer from 1 to n to see if it divides n without a remainder, then return True if the count is even, otherwise return False. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php"
    },
    {
        "task_id": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "instruction 1": "Identify the input parameter as a list of integers from which to compute the sum of all odd length subarrays.",
        "instruction 2": "Use nested loops to generate all possible odd length subarrays, calculate their sums, and accumulate these sums to return the final result.",
        "new_prompt": "Write a python function that takes a list of integers as input and computes the sum of all odd length subarrays. Use nested loops to generate all possible odd length subarrays, calculate their sums, and accumulate these sums to return the final result. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/"
    },
    {
        "task_id": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize variables to store the first even number and the first odd number found in the list.",
        "instruction 2": "Iterate through the list to find the first even and first odd numbers, then return their product if both are found; otherwise, handle cases where one or both are not found.",
        "new_prompt": "Write a function to find the product of the first even and odd number of a given list. The function should identify the input parameter as a list of numbers and initialize variables to store the first even number and the first odd number found in the list. It must iterate through the list to locate the first even and first odd numbers, then return their product if both are present; if one or both are not found, the function should appropriately handle those cases."
    },
    {
        "task_id": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.",
        "instruction 1": "Identify the input parameter as a string representing a tuple, and use the `ast.literal_eval` method to safely convert the string into a tuple.",
        "instruction 2": "Map each element of the tuple from string format to integers using the `map()` function and return the resulting integer tuple.",
        "new_prompt": "Write a function to convert a string representing a tuple into an integer tuple, identifying the input parameter and using the `ast.literal_eval` method to safely convert the string into a tuple. Then, map each element of the tuple from string format to integers using the `map()` function and return the resulting integer tuple."
    },
    {
        "task_id": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "instruction 1": "Identify the input parameters as a sorted list and a specified value to determine the insertion point.",
        "instruction 2": "Use a loop or the `bisect` module to find the correct index at which the specified value can be inserted to maintain the list's sorted order, then return that index.",
        "new_prompt": "Write a function to locate the right insertion point for a specified value in sorted order. The input parameters should include a sorted list and the specified value for which you need to determine the insertion point. Utilize a loop or the `bisect` module to find the correct index at which the specified value can be inserted to maintain the list's sorted order, and then return that index."
    },
    {
        "task_id": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.",
        "instruction 1": "Identify the input parameter as a string that needs to be matched against the pattern.",
        "instruction 2": "Use Python's `re` module to compile a regular expression that checks for the pattern 'abbb' and return whether the string matches this pattern using the `match()` function.",
        "new_prompt": "Write a function that matches a string, identified as the input parameter, which has an 'a' followed by three 'b's. Utilize Python's `re` module to compile a regular expression that checks for the pattern 'abbb' and return whether the string matches this pattern using the `match()` function."
    },
    {
        "task_id": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.",
        "instruction 1": "Identify the input parameters as a string and a list, and ensure to convert the string into a tuple.",
        "instruction 2": "Combine the tuple created from the string with the elements of the list to form a new tuple and return it.",
        "new_prompt": "Write a function to create a new tuple from the given string and list. # Identify the input parameters as a string and a list, convert the string into a tuple, then combine this tuple with the elements of the list to form a new tuple and return it."
    },
    {
        "task_id": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.",
        "instruction 1": "Identify the input parameter as a list of numbers that needs to be checked for evenness at even indices.",
        "instruction 2": "Iterate through the list, checking if the elements at even indices are even, and return True if all conditions are met, else return False.",
        "new_prompt": "Write a python function to check whether every even index of a given list of numbers contains even numbers. The function should iterate through the list, verifying if the elements at even indices are even, and return True if all conditions are met; otherwise, return False."
    },
    {
        "task_id": 791,
        "prompt": "Write a function to remove tuples from the given tuple.",
        "instruction 1": "Identify the input parameters as a tuple from which specific tuples need to be removed.",
        "instruction 2": "Iterate through the original tuple and use a list comprehension to create a new tuple that excludes the specified tuples, returning the resulting tuple.",
        "new_prompt": "Write a function that takes a tuple as input, from which specific tuples need to be removed. Iterate through the original tuple and use a list comprehension to create and return a new tuple that excludes the specified tuples."
    },
    {
        "task_id": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.",
        "instruction 1": "Identify the input parameter as a list of lists containing multiple sublists.",
        "instruction 2": "Use Python's built-in `len()` function to return the number of sublists in the given list of lists.",
        "new_prompt": "Write a python function to count the number of lists in a given list of lists containing multiple sublists, using Python's built-in `len()` function to return the number of sublists."
    },
    {
        "task_id": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.",
        "instruction 1": "Identify the input parameters as a sorted array and the target element whose last position needs to be found.",
        "instruction 2": "Use a modified binary search algorithm to efficiently locate the last position of the target element in the array, returning the index if found, or -1 if not found.",
        "new_prompt": "Write a python function to find the last position of an element in a sorted array. The function should take a sorted array as the input parameter along with the target element for which the last position needs to be found. Utilize a modified binary search algorithm to efficiently determine the last position of the target element in the array, returning the index if it is found, or -1 if it is not present."
    },
    {
        "task_id": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "instruction 1": "Define the input parameter as a string and use a regular expression to match the pattern where 'a' is followed by any characters and ends with 'b'.",
        "instruction 2": "Return a boolean value indicating whether the string matches the specified pattern using the `re.match()` function from the `re` module.",
        "new_prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'. Define the input parameter as a string and utilize a regular expression to identify the pattern where 'a' is followed by any characters and concludes with 'b'. Return a boolean value that indicates whether the string conforms to the specified pattern using the `re.match()` function from the `re` module."
    },
    {
        "task_id": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.",
        "instruction 1": "Identify the input parameter as a dictionary containing key-value pairs where the values are numeric.",
        "instruction 2": "Use the `sum()` function in combination with the `values()` method of the dictionary to calculate and return the total sum of all the numeric values.",
        "new_prompt": "Write function to find the sum of all items in the given dictionary, which should be identified as having key-value pairs where the values are numeric. Use the `sum()` function along with the `values()` method of the dictionary to compute and return the total sum of all the numeric values."
    },
    {
        "task_id": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "instruction 1": "Identify the input parameters as two integers l and r that define the inclusive range within which to find odd natural numbers.",
        "instruction 2": "Use a loop or list comprehension to generate all odd numbers between l and r, then return the sum of these numbers using the `sum()` function.",
        "new_prompt": "Write a python function to find the sum of all odd natural numbers within the inclusive range defined by the two integer input parameters l and r. Use a loop or list comprehension to generate all odd numbers between l and r, and then return the sum of these numbers using the `sum()` function."
    },
    {
        "task_id": 798,
        "prompt": "Write a python function to find the sum of an array.",
        "instruction 1": "Identify the input parameter as a list or array of numbers.",
        "instruction 2": "Use Python's built-in `sum()` function to calculate and return the sum of the elements in the array.",
        "new_prompt": "Write a python function to find the sum of an array. The function should accept a list or array of numbers as its input parameter, and utilize Python's built-in `sum()` function to calculate and return the total of the elements in the array."
    },
    {
        "task_id": 799,
        "prompt": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "instruction 1": "Identify the input parameters as an integer number that represents the 32-bit integer and an integer d that specifies the number of bits to rotate left.",
        "instruction 2": "Use bitwise operations to perform the left rotation of the number by d bits, ensuring to handle the overflow correctly by wrapping around the bits that extend beyond the 32-bit limit.",
        "new_prompt": "Write a function to rotate left bits by d bits a given 32-bit integer. The input parameters are an integer representing the 32-bit integer and an integer d that specifies the number of bits to rotate left. Use bitwise operations to perform the left rotation of the number by d bits, ensuring to handle the overflow correctly by wrapping around the bits that extend beyond the 32-bit limit."
    },
    {
        "task_id": 800,
        "prompt": "Write a function to remove all whitespaces from a string.",
        "instruction 1": "Identify the input parameter as a string from which all whitespaces need to be removed.",
        "instruction 2": "Use Python's string method `replace()` to replace all whitespace characters with an empty string and return the modified string.",
        "new_prompt": "Write a function to remove all whitespaces from a string. The input parameter should be identified as a string from which all whitespaces need to be removed. Utilize Python's string method `replace()` to substitute all whitespace characters with an empty string and return the modified string."
    },
    {
        "task_id": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.",
        "instruction 1": "Identify the input parameters as three integers to compare for equality.",
        "instruction 2": "Implement logic to count how many of the three integers are equal using conditional statements and return the count.",
        "new_prompt": "Write a python function that takes three integers as input parameters and counts the number of those integers that are equal. Implement logic using conditional statements to determine how many of the three integers share the same value and return the count."
    },
    {
        "task_id": 803,
        "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "instruction 1": "Identify the input parameter as an integer n that represents the number to be checked for being a perfect square.",
        "instruction 2": "Use the mathematical approach of taking the square root of n, converting it to an integer, and squaring it again to see if it equals n; return True if it does, otherwise return False.",
        "new_prompt": "Write a function that takes an integer n as input, representing the number to be checked for being a perfect square, and determine whether it is a perfect square or not, using the mathematical method of calculating the square root of n, converting it to an integer, squaring it again, and comparing it to n; return True if they are equal, otherwise return False. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/"
    },
    {
        "task_id": 804,
        "prompt": "Write a function to check whether the product of numbers in a list is even or not.",
        "instruction 1": "Identify the input parameter as a list of numbers and initialize a variable to hold the product, starting with the value 1.",
        "instruction 2": "Iterate through the list to multiply each number into the product and return True if the product is even (product % 2 == 0), otherwise return False.",
        "new_prompt": "Write a function to check whether the product of numbers in a list is even or not. The input parameter should be identified as a list of numbers, and a variable should be initialized to hold the product, starting with the value 1. Iterate through the list to multiply each number into the product, and return True if the product is even (product % 2 == 0); otherwise, return False."
    },
    {
        "task_id": 805,
        "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "instruction 1": "Identify the input parameter as a list of lists, and initialize a variable to keep track of the list with the highest sum.",
        "instruction 2": "Iterate through each sublist, calculate the sum of its elements, and update the variable if the current sublist's sum is greater than the highest recorded sum, then return the list with the highest sum.",
        "new_prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest. Identify the input parameter as a list of lists, and initialize a variable to keep track of the list with the highest sum. Iterate through each sublist, calculate the sum of its elements, and update the variable if the current sublist's sum exceeds the highest recorded sum, then return the list with the highest sum."
    },
    {
        "task_id": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.",
        "instruction 1": "Identify the input parameter as a string and initialize a variable to keep track of the maximum run of uppercase characters.",
        "instruction 2": "Iterate through each character in the string, counting consecutive uppercase characters, and update the maximum run whenever a longer run is found, then return the maximum run.",
        "new_prompt": "Write a function to find the maximum run of uppercase characters in the given string. The function should take a string as an input parameter and initiate a variable to keep track of the maximum run of uppercase characters. As you iterate through each character in the string, count the consecutive uppercase characters and update the maximum run each time a longer run is detected, then return the maximum run."
    },
    {
        "task_id": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.",
        "instruction 1": "Identify the input parameter as a list of numbers.",
        "instruction 2": "Iterate through the list and return the first number that is odd using the modulus operator `%`.",
        "new_prompt": "Write a python function that takes a list of numbers as an input parameter and finds the first odd number in the given list. Iterate through the list and return the first number that is odd using the modulus operator `%.`"
    },
    {
        "task_id": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.",
        "instruction 1": "Identify the input parameters as a list of tuples and the value k that needs to be checked for presence in those tuples.",
        "instruction 2": "Iterate through each tuple in the list and check if k is present in any of the tuples using the `in` keyword, returning True if found and False otherwise.",
        "new_prompt": "Write a function to check if the given list of tuples contains the value k. Identify the input parameters as a list of tuples and the value k that needs to be checked for presence in those tuples. Iterate through each tuple in the list and check if k is present in any of the tuples using the `in` keyword, returning True if found and False otherwise."
    },
    {
        "task_id": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "instruction 1": "Identify the input parameters as two tuples, ensuring they have the same length for comparison.",
        "instruction 2": "Use a loop to iterate through the elements of both tuples and check if each element of the second tuple is smaller than its corresponding element in the first tuple, returning a boolean result.",
        "new_prompt": "Write a function to check if each element of the second tuple is smaller than its corresponding element in the first tuple. Ensure the input parameters are two tuples of the same length for valid comparison. Utilize a loop to iterate through the elements of both tuples, verifying if each element in the second tuple is less than its counterpart in the first tuple, and return a boolean result."
    }
]